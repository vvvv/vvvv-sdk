#!/bin/bash

####################################################################
# Fetches binaries from vvvv.org for current branch (if available) #
# Server must have list-binaries.php installed.                    #
####################################################################

function usage
{
  echo "Usage: fetch-binaries [--platform=x86|x64]"
}

platform="x86"

while [ -n "$1" ]; do
    case $1 in
        -h | --help )           usage
                                exit
                                ;;
		-p | --platform )		shift
								platform=$1
								;;
        * )                     break
    esac
    shift
done

# Fail silently if we're in our private repo.
gitRootDir=`git rev-parse --show-toplevel`
if [ -d "$gitRootDir/public" ]; then
  exit 0
fi

# Fail if not invoked in root dir of vvvv-sdk.
if [ ! -d "vvvv45/src" ]; then
  echo "Must be run within the root directory of vvvv-sdk."
  exit 1
fi

echo "Using platform ${platform}."

# Check if a value exists in an array
# @param $1 mixed  Needle  
# @param $2 array  Haystack
# @return  Success (0) if value exists, Failure (1) otherwise
# Usage: in_array "$needle" "${haystack[@]}"
# See: http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
in_array() 
{
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}

binariesArchiveFilename="binaries"
url="http://vvvv.org/daily/binaries"

# save and change IFS
OLDIFS=$IFS
IFS=$'\n'

echo "Retrieving directory listing from $url"
archiveMd5Files=(`curl --stderr /dev/null ${url}/list-binaries.php`)

# restore it
IFS=$OLDIFS

echo "Looking for binaries"
found=0

git log --format=%H > GIT_LOG

while read commitId
do
  archiveMD5File="${binariesArchiveFilename}-${commitId}-${platform}.tar.bz2.md5"
  
  if in_array "$archiveMD5File" "${archiveMd5Files[@]}"; then
    found=1
    echo "Found binaries for commit ${commitId}:"
    echo ""
    git log -1 $commitId
    echo ""
  
    archiveFile="${binariesArchiveFilename}-${commitId}-${platform}.tar.bz2"
    remoteFile="${url}/${archiveFile}"
    remoteMd5File="${url}/${archiveMD5File}"
    echo "Fetching ${remoteFile}"
    echo ""
    curl -O "$remoteMd5File"
    curl -O "$remoteFile"
    echo ""
    
    if md5sum --status --check "$archiveMD5File"; then
      echo "Extracting ${archiveFile}"
      tar -jxvf "${archiveFile}"
    else
      echo "Checksum didn't match. Try again by calling scripts/fetch-binaries."
    fi
    
    rm "$archiveFile"
    rm "$archiveMD5File"
    break;
  fi
done < GIT_LOG

rm GIT_LOG

if [ "$found" -eq 0 ]; then
  echo "Didn't find matching binaries. Try later by calling scripts/fetch-binaries."
  exit 0
fi