<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.MetadataModel</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.ErrorEventArgs">
            <summary>
            Supplies information about errors discovered by a particular error reporter in a particular source location.
            The event it describes may occur at arbitrary times on arbitrary threads.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ErrorEventArgs.#ctor(System.Object,Microsoft.Cci.ILocation,System.Collections.Generic.IEnumerable{Microsoft.Cci.IErrorMessage})">
            <summary>
            Constructs an object that supplies information about the presence or absence of errors discovered by a particular error reporter in a particular location.
            The event it describes may occur at arbitrary times on arbitrary threads.
            </summary>
            <param name="errorReporter">
            The object reporting the errors. This can be used to filter out events coming from non interesting sources.
            For example, all top level syntax errors will be reported by an object that implements ISymbolSyntaxErrorsReporter.
            A listener that is only interested to find out if the symbol table is derived from a syntactically correct source
            can ignore any events that come from a reporter that does not implement this interface.
            </param>
            <param name="location">
            Identifies the portion of the document that was analyzed to arrive at the error list.
            </param>
            <param name="errors">
            A possibly empty collection of errors found by ErrorReporter in Location. Any errors previously found by the same reporter
            in the same location should be replaced with this collection.
            </param>
        </member>
        <member name="P:Microsoft.Cci.ErrorEventArgs.ErrorReporter">
            <summary>
            The object reporting the errors. This can be used to filter out events coming from non interesting sources.
            For example, all top level syntax errors will be reported by an object that implements ISymbolSyntaxErrorsReporter.
            A listener that is only interested to find out if the symbol table is derived from a syntactically correct source
            can ignore any events that come from a reporter that does not implement this interface.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorEventArgs.Location">
            <summary>
            Identifies the portion of the document that was analyzed to arrive at the error list.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorEventArgs.Errors">
            <summary>
            A possibly empty collection of errors found by ErrorReporter in SourceLocation. Any errors previously found by the same reporter
            in the same location should be replaced with this collection.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IBinaryDocument">
            <summary>
            An object that represents a binary document, such as dll, compiled resources.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IDocument">
            <summary>
            An object that represents a document. This can be either source or binary or designer surface etc
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IDocument.Location">
            <summary>
            The location where this document was found, or where it should be stored.
            This will also uniquely identify the source document within an instance of compilation host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IDocument.Name">
            <summary>
            The name of the document. For example the name of the file if the document corresponds to a file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryDocument.Length">
            <summary>
            The length of the Binary Document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IBinaryDocumentMemoryBlock">
            <summary>
            Provides efficient readonly access to the content of an IBinaryDocument instance via an unsafe byte pointer.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryDocumentMemoryBlock.BinaryDocument">
            <summary>
            The binary document for which this is the memory block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryDocumentMemoryBlock.Pointer">
            <summary>
            The pointer to the start of Memory block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryDocumentMemoryBlock.Length">
            <summary>
            Length of the memory block
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IBinaryLocation">
            <summary>
            Represents the location in binary document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILocation">
            <summary>
            Represents a location in some document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocation.Document">
            <summary>
            The document containing this location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryLocation.BinaryDocument">
            <summary>
            The binary document containing this location range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IBinaryLocation.Offset">
            <summary>
            The offset of the location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataHost">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.FindAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Finds the assembly that matches the given identifier among the already loaded set of assemblies,
            or a dummy assembly if no matching assembly can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.FindModule(Microsoft.Cci.ModuleIdentity)">
            <summary>
            Finds the module that matches the given identifier among the already loaded set of modules,
            or a dummy module if no matching module can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.FindUnit(Microsoft.Cci.UnitIdentity)">
            <summary>
            Finds the unit that matches the given identifier among the already loaded set of units,
            or a dummy unit if no matching unit can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.LoadAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            The assembly that matches the given identifier, or a dummy assembly if no matching assembly can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.LoadModule(Microsoft.Cci.ModuleIdentity)">
            <summary>
            The module that matches the given identifier, or a dummy module if no matching module can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.LoadUnit(Microsoft.Cci.UnitIdentity)">
            <summary>
            The unit that matches the given identifier, or a dummy unit if no matching unit can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.LoadUnitFrom(System.String)">
            <summary>
            Returns the unit that is stored at the given location, or a dummy unit if no unit exists at that location or if the unit at that location is not accessible.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.ReportErrors(Microsoft.Cci.ErrorEventArgs)">
            <summary>
            Raises the CompilationErrors event with the given error event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.ReportError(Microsoft.Cci.IErrorMessage)">
            <summary>
            Raises the CompilationErrors event with the given error wrapped up in an error event arguments object.
            </summary>
            <param name="error">The error to report.</param>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.ProbeAssemblyReference(Microsoft.Cci.IUnit,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Given the identity of a referenced assembly (but not its location), apply host specific policies for finding the location
            of the referenced assembly.
            </summary>
            <param name="referringUnit">The unit that is referencing the assembly. It will have been loaded from somewhere and thus
            has a known location, which will typically be probed for the referenced assembly.</param>
            <param name="referencedAssembly">The assembly being referenced. This will not have a location since there is no point in probing
            for the location of an assembly when you already know its location.</param>
            <returns>An assembly identity that matches the given referenced assembly identity, but which includes a location.
            If the probe failed to find the location of the referenced assembly, the location will be "unknown://location".</returns>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.ProbeModuleReference(Microsoft.Cci.IUnit,Microsoft.Cci.ModuleIdentity)">
            <summary>
            Given the identity of a referenced module (but not its location), apply host specific policies for finding the location
            of the referenced module.
            </summary>
            <param name="referringUnit">The unit that is referencing the module. It will have been loaded from somewhere and thus
            has a known location, which will typically be probed for the referenced module.</param>
            <param name="referencedModule">Module being referenced.</param>
            <returns>A module identity that matches the given referenced module identity, but which includes a location.
            If the probe failed to find the location of the referenced assembly, the location will be "unknown://location".</returns>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.UnifyAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Returns an assembly identifier of an assembly that is the same, or a later (compatible) version of the given assembly identity.
            </summary>
            <param name="assemblyIdentity">The identity of the assembly that needs to be unified.</param>
            <returns>The identity of the unified assembly.</returns>
            <remarks>If an assembly A references assembly B as well as version 2 of assembly C, and assembly B references version 1 of assembly C then any
            reference to type C.T that is obtained from assembly A will resolve to a different type definition from a reference to type C.T that is obtained
            from assembly B, unless the host declares that any reference to version 1 of assembly should be treated as if it were a reference to 
            version 2 of assembly C. This call is how the host gets to make this declaration.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.IMetadataHost.UnifyAssembly(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Returns an assembly identifier of an assembly that is the same, or a later (compatible) version of the given referenced assembly.
            </summary>
            <param name="assemblyReference">A reference to the assembly that needs to be unified.</param>
            <returns>The identity of the unified assembly.</returns>
            <remarks>If an assembly A references assembly B as well as version 2 of assembly C, and assembly B references version 1 of assembly C then any
            reference to type C.T that is obtained from assembly A will resolve to a different type definition from a reference to type C.T that is obtained
            from assembly B, unless the host declares that any reference to version 1 of assembly should be treated as if it were a reference to 
            version 2 of assembly C. This call is how the host gets to make this declaration.
            </remarks>
        </member>
        <member name="E:Microsoft.Cci.IMetadataHost.Errors">
            <summary>
            The errors reported by this event are discovered in background threads by an open ended
            set of error reporters. Listeners to this event should thus be prepared to be called at arbitrary times from arbitrary threads.
            Each occurrence of the event concerns a particular error location and a particular error reporter.
            The reported error collection (possibly empty) supercedes any errors previously reported by the same error reporter for the same location.
            A location can be an entire IDocument, or just a part of it (the latter would apply, for example, to syntax errors discovered by an incremental
            parser after an edit to the source document).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.ContractAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly containing Microsoft.Contracts.Contract.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.CoreAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly containing the core system types such as System.Object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.SystemCoreAssemblySymbolicIdentity">
            <summary>
            The identity of the System.Core assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.PlatformType">
            <summary>
            A collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.LoadedUnits">
            <summary>
            Returns enumeration of all the units loaded so far.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.NameTable">
            <summary>
            A table used to intern strings used as names.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.PointerSize">
            <summary>
            The size (in bytes) of a pointer on the platform on which the host is targetting.
            The value of this property is either 4 (32-bits) or 8 (64-bit).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataHost.PreserveILLocations">
            <summary>
            True if IL locations should be preserved up into the code model by decompilers using this host.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IContainer`1">
            <summary>
            Implemented by types that contain a collection of members of type MemberType. For example a namespace contains a collection of INamespaceMember instances.
            </summary>
            <typeparam name="MemberType">The type of member contained by the Members collection of this container.</typeparam>
        </member>
        <member name="P:Microsoft.Cci.IContainer`1.Members">
            <summary>
            The collection of contained members.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IContainerMember`1">
            <summary>
            Implemented by types whose instances belong to a specific type of container (see IContainer&lt;MemberType&gt;).
            </summary>
            <typeparam name="ContainerType">The type of the container that has members of this type.</typeparam>
        </member>
        <member name="T:Microsoft.Cci.INamedEntity">
            <summary>
            Implemented by any entity that has a name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamedEntity.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IContainerMember`1.Container">
            <summary>
            The container instance with a Members collection that includes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IContainerMember`1.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IDefinition">
            <summary>
            An object corresponding to a metadata entity such as a type or a field.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IReference">
            <summary>
            An object corresponding to reference to a metadata entity such as a type or a field.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IObjectWithLocations">
            <summary>
            Implemented by types whose instances are usually derived from documents.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IObjectWithLocations.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IErrorMessage">
            <summary>
            Error information relating to a portion of a document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.ErrorReporter">
            <summary>
            The object reporting the error. This can be used to filter out errors coming from non interesting sources.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.ErrorReporterIdentifier">
            <summary>
            A short identifier for the reporter of the error, suitable for use in human interfaces. For example "CS" in the case of a C# language error.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.Code">
            <summary>
            A code that corresponds to this error. This code is the same for all cultures.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.IsWarning">
            <summary>
            True if the error message should be treated as an informational warning rather than as an indication that the associated
            compilation has failed and no useful executable output has been generated. The value of this property does
            not depend solely on this.Code but can be influenced by compiler options such as the csc /warnaserror option.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.Message">
            <summary>
            A description of the error suitable for user interaction. Localized to the current culture.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.Location">
            <summary>
            The location of the error.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IErrorMessage.RelatedLocations">
            <summary>
            Zero ore more locations that are related to this error.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataObjectWithToken">
            <summary>
            Implemented by metadata objects that have been obtained from a CLR PE file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataObjectWithToken.TokenValue">
            <summary>
            The most significant byte identifies a metadata table, using the values specified by ECMA-335.
            The least significant three bytes represent the row number in the table, with the first row being numbered as one.
            If, for some implementation reason, a metadata object implements this interface but was not obtained from a metadata table
            (for example it might be an array type reference that only occurs in a signature blob), the value is UInt32.MaxValue.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ITokenDecoder">
            <summary>
            Implemented by methods that can turn tokens into metadata objects. For example, a method definition implemented
            by a metadata reader might implement this interface.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMethodDefinition">
            <summary>
            This interface models the metadata representation of a method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ITypeDefinitionMember">
            <summary>
            A member of a type definition, such as a field or a method.
            This interface models the metadata representation of a type member.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ITypeMemberReference">
            <summary>
            A reference to a member of a type, such as a field or a method.
            This interface models the metadata representation of a type member reference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeMemberReference.ContainingType">
            <summary>
            A reference to the containing type of the referenced type member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeMemberReference.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IScopeMember`1">
            <summary>
            Implemented by types whose instances belong to a specific type of scope (see IScope&lt;MemberType&gt;).
            </summary>
            <typeparam name="ScopeType">The type of the scope that has members of this type.</typeparam>
        </member>
        <member name="P:Microsoft.Cci.IScopeMember`1.ContainingScope">
            <summary>
            The scope instance with a Members collection that includes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinitionMember.ContainingTypeDefinition">
            <summary>
            The type definition that contains this member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinitionMember.Visibility">
            <summary>
            Indicates if the member is public or confined to its containing type, derived types and/or declaring assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMethodReference">
            <summary>
            A reference to a method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISignature">
            <summary>
            The parameters and return type that makes up a method or property signature.
            This interface models the metadata representation of a signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.IsStatic">
            <summary>
            True if the referenced method or property does not require an instance of its declaring type as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISignature.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.AcceptsExtraArguments">
            <summary>
            True if the call sites that references the method with this object supply extra arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.GenericParameterCount">
            <summary>
            The number of generic parameters of the method. Zero if the referenced method is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedMethod from all other methods obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.IsGeneric">
            <summary>
            True if the method has generic parameters;
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.ParameterCount">
            <summary>
            The number of required parameters of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.ResolvedMethod">
            <summary>
            The method being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodReference.ExtraParameters">
            <summary>
            Information about this types of the extra arguments supplied at the call sites that references the method with this object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.Body">
            <summary>
            A container for a list of IL instructions providing the implementation (if any) of this method.
            Note that each call to this property may result in a different object instance. All instances
            produced by this property will identical in content.
            </summary>
            <remarks>Since the bulk of the memory consumed by a metadata model is usually consumed by method bodies, the
            object model used by the metadata reader does not cache method bodies, but produces them anew for every call.
            If consumers do not hold on the bodies for long, the bodies can be garbage collected and the working set memory used by
            the object model will be considerably reduced.</remarks>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.GenericParameters">
            <summary>
            If the method is generic then this list contains the type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.HasDeclarativeSecurity">
            <summary>
            True if this method has a non empty collection of SecurityAttributes or the System.Security.SuppressUnmanagedCodeSecurityAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.HasExplicitThisParameter">
            <summary>
            True if this an instance method that explicitly declares the type and name of its first parameter (the instance).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsAbstract">
            <summary>
            True if the method does not provide an implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsAccessCheckedOnOverride">
            <summary>
            True if the method can only be overridden when it is also accessible. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsAggressivelyInlined">
            <summary>
            True if the the runtime is requested to inline this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsCil">
            <summary>
            True if the method is implemented in the CLI Common Intermediate Language.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsConstructor">
            <summary>
            True if the method is a constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsExternal">
            <summary>
            True if the method has an external implementation (i.e. not supplied by this definition).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsForwardReference">
            <summary>
            True if the method implementation is defined by another method definition (to be supplied at a later time).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsHiddenBySignature">
            <summary>
            True if this method is hidden if a derived type declares a method with the same name and signature. 
            If false, any method with the same name hides this method. This flag is ignored by the runtime and is only used by compilers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsNativeCode">
            <summary>
            True if the method is implemented in native (platform-specific) code.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsNewSlot">
            <summary>
            The method always gets a new slot in the virtual method table. 
            This means the method will hide (not override) a base type method with the same name and signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsNeverInlined">
            <summary>
            True if the the runtime is not allowed to inline this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsNeverOptimized">
            <summary>
            True if the runtime is not allowed to optimize this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsPlatformInvoke">
            <summary>
            True if the method is implemented via the invocation of an underlying platform method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsRuntimeImplemented">
            <summary>
            True if the implementation of this method is supplied by the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsRuntimeInternal">
            <summary>
            True if the method is an internal part of the runtime and must be called in a special way.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsRuntimeSpecial">
            <summary>
            True if the method gets special treatment from the runtime. For example, it might be a constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsSealed">
            <summary>
            True if the method may not be overridden.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsSpecialName">
            <summary>
            True if the method is special in some way for tools. For example, it might be a property getter or setter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsStaticConstructor">
            <summary>
            True if the method is a static constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsSynchronized">
            <summary>
            True if only one thread at a time may execute this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsVirtual">
            <summary>
            True if the method may be overridden (or if it is an override).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.IsUnmanaged">
            <summary>
            True if the implementation of this method is not managed by the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.PreserveSignature">
            <summary>
            True if the method signature must not be mangled during the interoperation with COM code.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.PlatformInvokeData">
            <summary>
            Detailed information about the PInvoke stub. Identifies which method to call, which module has the method and the calling convention among other things.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.RequiresSecurityObject">
            <summary>
            True if the method calls another method containing security code. If this flag is set, the method
            should have System.Security.DynamicSecurityMethodAttribute present in its list of custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.ReturnValueAttributes">
            <summary>
            Custom attributes associated with the method's return value.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.ReturnValueIsMarshalledExplicitly">
            <summary>
            The return value has associated marshalling information.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.ReturnValueMarshallingInformation">
            <summary>
            Specifies how the return value is marshalled when the method is called from unmanaged code.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.ReturnValueName">
            <summary>
            The name of the parameter to which the return value is marshalled. Returns Dummy.Name if the name has not been specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodDefinition.SecurityAttributes">
            <summary>
            Declarative security actions for this method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ITokenDecoder.GetObjectForToken(System.UInt32)">
            <summary>
            Returns a metadata model object that corresponds to this token value.
            If no such object can be found then the result is null.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IScope`1">
            <summary>
            A collection of named members, with routines to search the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IScope`1.Contains(`0)">
            <summary>
            Return true if the given member instance is a member of this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IScope`1.GetMatchingMembersNamed(Microsoft.Cci.IName,System.Boolean,Microsoft.Cci.Function{`0,System.Boolean})">
            <summary>
            Returns the list of members with the given name that also satisfy the given predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IScope`1.GetMatchingMembers(Microsoft.Cci.Function{`0,System.Boolean})">
            <summary>
            Returns the list of members that satisfy the given predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IScope`1.GetMembersNamed(Microsoft.Cci.IName,System.Boolean)">
            <summary>
            Returns the list of members with the given name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IScope`1.Members">
            <summary>
            The collection of member instances that are members of this scope.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IILLocation">
            <summary>
            Represents a location in IL operation stream.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IILLocation.MethodDefinition">
            <summary>
            The method whose body contains this IL operation whose location this is.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IILLocation.Offset">
            <summary>
            Offset into the IL Stream.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataLocation">
            <summary>
            A location that represents a metadata object with a token.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataLocation.Definition">
            <summary>
            The metadata object whose definition contains this location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IInternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetAssemblyInternedKey(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Returns the interned key corresponding to given assembly. The assembly is unified using ICompilationHostEnvironment.UnifyAssembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetFieldInternedKey(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns the interned key corresponding to the referenced field.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetMethodInternedKey(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns the interned key corresponding to the referenced method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetModuleInternedKey(Microsoft.Cci.ModuleIdentity)">
            <summary>
            Returns the interned key corresponding to given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetNamespaceTypeReferenceInternedKey(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.IName,System.UInt32)">
            <summary>
            Returns the interned key for the namespace type constructed with the given parameters
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetNestedTypeReferenceInternedKey(Microsoft.Cci.ITypeReference,Microsoft.Cci.IName,System.UInt32)">
            <summary>
            Returns the interned key for the nested type constructed with the given parameters
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetVectorTypeReferenceInternedKey(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the interned key for vector type with given element type reference
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetMatrixTypeReferenceInternedKey(Microsoft.Cci.ITypeReference,System.Int32,System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the interned key for the matrix type constructed with the given parameters
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetGenericTypeInstanceReferenceInternedKey(Microsoft.Cci.ITypeReference,System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
            <summary>
            Returns the interned key for the generic type instance constructed with the given parameters
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetPointerTypeReferenceInternedKey(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the interned key for the pointer type constructed with the given target type reference
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetManagedPointerTypeReferenceInternedKey(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the interned key for the managed pointer type constructed with the given target type reference
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetGenericTypeParameterReferenceInternedKey(Microsoft.Cci.ITypeReference,System.Int32)">
            <summary>
            Returns the interned key for the generic type parameter constructed with the given definingType and index
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetGenericMethodParameterReferenceInternedKey(Microsoft.Cci.IMethodReference,System.Int32)">
            <summary>
            Returns the interned key for the generic method parameter constructed with the given index
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetFunctionPointerTypeReferenceInternedKey(Microsoft.Cci.CallingConvention,System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier},System.Boolean,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the interned key for the function pointer type constructed with the given parameters
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetModifiedTypeReferenceInternedKey(Microsoft.Cci.ITypeReference,System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier})">
            <summary>
            Returns the interned key for the given modified type reference
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IInternFactory.GetTypeReferenceInternedKey(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the interned key for the given type reference
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataVisitor">
            <summary>
            Implemented by classes that visit nodes of object graphs via a double dispatch mechanism, usually performing some computation of a subset of the nodes in the graph.
            Contains a specialized Visit routine for each standard type of object defined in this object model. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Performs some computation with the given array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IAssembly)">
            <summary>
            Performs some computation with the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Performs some computation with the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Performs some computation with the given custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ICustomModifier)">
            <summary>
            Performs some computation with the given custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IEventDefinition)">
            <summary>
            Performs some computation with the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Performs some computation with the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IFieldReference)">
            <summary>
            Performs some computation with the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IFileReference)">
            <summary>
            Performs some computation with the given file reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Performs some computation with the given function pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Performs some computation with the given generic method instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Performs some computation with the given generic method parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Performs some computation with the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Performs some computation with the given global field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Performs some computation with the given global method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Performs some computation with the given generic type instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Performs some computation with the given generic parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Performs some computation with the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Performs some computation with the given local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.VisitReference(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Performs some computation with the given local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Performs some computation with the given managed pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Performs some computation with the given marshalling information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Performs some computation with the given metadata constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Performs some computation with the given metadata array creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Performs some computation with the given metadata expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Performs some computation with the given metadata named argument expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Performs some computation with the given metadata typeof expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMethodBody)">
            <summary>
            Performs some computation with the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Performs some computation with the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Performs some computation with the given method implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IMethodReference)">
            <summary>
            Performs some computation with the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Performs some computation with the given modified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IModule)">
            <summary>
            Performs some computation with the given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IModuleReference)">
            <summary>
            Performs some computation with the given module reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Performs some computation with the given alias for a namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Performs some computation with the given namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Performs some computation with the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Performs some computation with the given alias to a nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Performs some computation with the given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Performs some computation with the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Performs some computation with the given nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Performs some computation with the given nested unit namespace reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.INestedUnitSetNamespace)">
            <summary>
            Performs some computation with the given nested unit set namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IOperation)">
            <summary>
            Performs some computation with the given IL operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            Performs some computation with the given IL operation exception information instance.
            </summary>
            <param name="operationExceptionInformation"></param>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Performs some computation with the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.VisitReference(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Performs some computation with the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Performs some computation with the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IPESection)">
            <summary>
            Performs some computation with the given PE section.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            Performs some compuation with the given platoform invoke information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Performs some computation with the given pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Performs some computation with the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IResourceReference)">
            <summary>
            Performs some computation with the given reference to a manifest resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Performs some computation with the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Performs some computation with the given root unit namespace reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IRootUnitSetNamespace)">
            <summary>
            Performs some computation with the given root unit set namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Performs some computation with the given security attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedEventDefinition)">
            <summary>
            Performs some computation with the given specialized event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedFieldDefinition)">
            <summary>
            Performs some computation with the given specialized field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Performs some computation with the given specialized field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedMethodDefinition)">
            <summary>
            Performs some computation with the given specialized method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Performs some computation with the given specialized method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedPropertyDefinition)">
            <summary>
            Performs some computation with the given specialized propperty definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedNestedTypeDefinition)">
            <summary>
            Performs some computation with the given specialized nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Performs some computation with the given specialized nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IUnitSet)">
            <summary>
            Performs some computation with the given unit set.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataVisitor.Visit(Microsoft.Cci.IWin32Resource)">
            <summary>
            Performs some computation with the given Win32 resource.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceAliasForType">
            <summary>
            Represents an alias type in a namespace
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IAliasForType">
            <summary>
            Alias types represent exported and forwarded types, and correspond to entries in the Exported Type table in the ECMA-335 metadata format.
            An exported type is an alias for a type defined a member module of the assembly containing the type table, whereas a forwarded type
            is an alias for a type defined in another assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAliasForType.AliasedType">
            <summary>
            A reference to the type for which this is an alias.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAliasForType.Members">
            <summary>
            The collection of member objects comprising the type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceMember">
            <summary>
            A definition that is a member of a namespace. Typically a nested namespace or a namespace type definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceMember.ContainingNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceAliasForType.IsPublic">
            <summary>
            True if the type can be accessed from other assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IAssembly">
            <summary>
            Represents a .NET assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IModule">
            <summary>
            An object that represents a .NET module.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnit">
            <summary>
            A unit of metadata stored as a single artifact and potentially produced and revised independently from other units.
            Examples of units include .NET assemblies and modules, as well C++ object files and compiled headers.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceRootOwner">
            <summary>
            Implemented by objects that are associated with a root INamespace object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceRootOwner.NamespaceRoot">
            <summary>
            The associated root namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnitReference">
            <summary>
            A reference to a instance of <see cref="T:Microsoft.Cci.IUnit"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitReference.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitReference.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.IUnit.ContractAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly corresponding to the target platform contract assembly at the time this unit was compiled.
            This property will be used to implement IMetadataHost.ContractAssemblySymbolicIdentity and its implementation must
            consequently not use the latter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.CoreAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly corresponding to the target platform core assembly at the time this unit was compiled.
            This property will be used to implement IMetadataHost.CoreAssemblySymbolicIdentity and its implementation must
            consequently not use the latter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.PlatformType">
            <summary>
            A collection of well known types that must be part of every target platform and that are fundamental to modeling compiled code.
            The types are obtained by querying the unit set of the compilation and thus can include types that are defined by the compilation itself.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.Location">
            <summary>
            An indication of the location where the unit is or will be stored. This need not be a file system path and may be empty. 
            The interpretation depends on the ICompilationHostEnviroment instance used to resolve references to this unit.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.UninterpretedSections">
            <summary>
            A sequence of PE sections that are not well known to PE readers and thus have not been decompiled into 
            other parts of the Metadata Model. These sections may have meaning to other tools. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.UnitNamespaceRoot">
            <summary>
            A root namespace that contains nested namespaces as well as top level types and anything else that implements INamespaceMember.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnit.UnitReferences">
            <summary>
            A list of other units that are referenced by this unit. 
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IModuleReference">
            <summary>
            A reference to a .NET module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModuleReference.ContainingAssembly">
            <summary>
            The Assembly that contains this module. May be null if the module is not part of an assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModuleReference.ResolvedModule">
            <summary>
            The referenced module, or Dummy.Module if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModuleReference.ModuleIdentity">
            <summary>
            The identity of the referenced module.
            </summary>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="M:Microsoft.Cci.IModule.GetStrings">
            <summary>
            Returns zero or more strings used in the module. If the module is produced by reading in a CLR PE file, then this will be the contents
            of the user string heap. If the module is produced some other way, the method may return an empty enumeration or an enumeration that is a
            subset of the strings actually used in the module. The main purpose of this method is to provide a way to control the order of strings in a
            prefix of the user string heap when writing out a module as a PE file.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IModule.GetAllTypes">
            <summary>
            Returns all of the types defined in the current module. These are always named types, in other words: INamespaceTypeDefinition or INestedTypeDefinition instances.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IModule.GetTypeReferences">
            <summary>
            Returns zero or more type references used in the module. If the module is produced by reading in a CLR PE file, then this will be the contents
            of the type reference table. If the module is produced some other way, the method may return an empty enumeration or an enumeration that is a
            subset of the type references actually used in the module. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IModule.GetTypeMemberReferences">
            <summary>
            Returns zero or more type member references used in the module. If the module is produced by reading in a CLR PE file, then this will be the contents
            of the member reference table (which only contains entries for fields and methods). If the module is produced some other way, 
            the method may return an empty enumeration or an enumeration that is a subset of the member references actually used in the module. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.AssemblyReferences">
            <summary>
            A list of the assemblies that are referenced by this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.BaseAddress">
            <summary>
            The preferred memory address at which the module is to be loaded at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.ContainingAssembly">
            <summary>
            The Assembly that contains this module. If this module is main module then this returns this.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.DebugInformationLocation">
            <summary>
            A path to the debug information corresponding to this module. Can be absolute or relative to the file path of the module. Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.DebugInformationVersion">
            <summary>
            A hexadecimal string that is used to store and retrieve the debugging symbols from a symbol store.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.DllCharacteristics">
            <summary>
            Flags that control the behavior of the target operating system. CLI implementations are supposed to ignore this, but some operating system pay attention.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.EntryPoint">
            <summary>
            The method that will be called to start execution of this executable module. If there is no entry point, the result is Dummy.MethodReference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.FileAlignment">
            <summary>
            The alignment of sections in the module's image file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.ILOnly">
            <summary>
            True if the module contains only IL and is processor independent.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.StrongNameSigned">
            <summary>
            True if the module contains a hash of its contents, encrypted with the private key of an assembly strong name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.NativeEntryPoint">
            <summary>
            True if the module has a native entry point.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.Kind">
            <summary>
            The kind of metadata stored in this module. For example whether this module is an executable or a manifest resource file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.LinkerMajorVersion">
            <summary>
            The first part of a two part version number indicating the version of the linker that produced this module. For example, the 8 in 8.0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.LinkerMinorVersion">
            <summary>
            The first part of a two part version number indicating the version of the linker that produced this module. For example, the 0 in 8.0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.MetadataFormatMajorVersion">
            <summary>
            The first part of a two part version number indicating the version of the format used to persist this module. For example, the 1 in 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.MetadataFormatMinorVersion">
            <summary>
            The second part of a two part version number indicating the version of the format used to persist this module. For example, the 0 in 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.ModuleAttributes">
            <summary>
            A list of objects representing persisted instances of types that extend System.Attribute. Provides an extensible way to associate metadata
            with this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.ModuleName">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.ModuleReferences">
            <summary>
            A list of the modules that are referenced by this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.PersistentIdentifier">
            <summary>
            A globally unique persistent identifier for this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.Machine">
            <summary>
            Specifies the target CPU. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.RequiresAmdInstructionSet">
            <summary>
            If set, the module contains instructions or assumptions that are specific to the AMD 64 bit instruction set. Setting this flag to
            true also sets Requires64bits to true.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.RequiresStartupStub">
            <summary>
            If set, the module must include a machine code stub that transfers control to the virtual execution system.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.Requires32bits">
            <summary>
            If set, the module contains instructions that assume a 32 bit instruction set. For example it may depend on an address being 32 bits.
            This may be true even if the module contains only IL instructions because of PlatformInvoke and COM interop.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.Requires64bits">
            <summary>
            If set, the module contains instructions that assume a 64 bit instruction set. For example it may depend on an address being 64 bits.
            This may be true even if the module contains only IL instructions because of PlatformInvoke and COM interop.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SizeOfHeapCommit">
            <summary>
            The size of the virtual memory initially committed for the initial process heap.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SizeOfHeapReserve">
            <summary>
            The size of the virtual memory to reserve for the initial process heap.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SizeOfStackCommit">
            <summary>
            The size of the virtual memory initially committed for the initial thread's stack.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SizeOfStackReserve">
            <summary>
            The size of the virtual memory to reserve for the initial thread's stack.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SubsystemMajorVersion">
            <summary>
            The first part of a two part version number indicating the operating subsystem that is expected to be the target environment for this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.SubsystemMinorVersion">
            <summary>
            The second part of a two part version number indicating the operating subsystem that is expected to be the target environment for this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.TargetRuntimeVersion">
            <summary>
            Identifies the version of the CLR that is required to load this module or assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.TrackDebugData">
            <summary>
            True if the instructions in this module must be compiled in such a way that the debugging experience is not compromised.
            To set the value of this property, add an instance of System.Diagnostics.DebuggableAttribute to the MetadataAttributes list.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.UsePublicKeyTokensForAssemblyReferences">
            <summary>
            True if the module will be persisted with a list of assembly references that include only tokens derived from the public keys
            of the referenced assemblies, rather than with references that include the full public keys of referenced assemblies as well
            as hashes over the contents of the referenced assemblies. Setting this property to true is appropriate during development.
            When building for deployment it is safer to set this property to false.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModule.Win32Resources">
            <summary>
            A list of named byte sequences persisted with the module and used during execution, typically via the Win32 API.
            A module will define Win32 resources rather than "managed" resources mainly to present metadata to legacy tools
            and not typically use the data in its own code.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IAssemblyReference">
            <summary>
            A reference to a .NET assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.Aliases">
            <summary>
            A list of aliases for the root namespace of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.ResolvedAssembly">
            <summary>
            The referenced assembly, or Dummy.Assembly if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.Culture">
            <summary>
            Identifies the culture associated with the assembly reference. Typically specified for sattelite assemblies with localized resources.
            Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.HashValue">
            <summary>
            The encrypted SHA1 hash of the persisted form of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.IsRetargetable">
            <summary>
            True if the implementation of the referenced assembly used at runtime is not expected to match the version seen at compile time.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.ContainsForeignTypes">
            <summary>
            True if the referenced assembly contains types that describe objects that are neither COM objects nor objects that are managed by the CLR.
            Instances of such types are created and managed by another runtime and are accessed by CLR objects via some form of interoperation mechanism.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.PublicKey">
            <summary>
            The public part of the key used to encrypt the SHA1 hash over the persisted form of the referenced assembly. Empty if not specified.
            This value is used by the loader to decrypt an encrypted hash value stored in the assembly, which it then compares with a freshly computed hash value
            in order to verify the integrity of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.PublicKeyToken">
            <summary>
            The hashed 8 bytes of the public key of the referenced assembly. This is empty if the referenced assembly does not have a public key.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.Version">
            <summary>
            The version of the assembly reference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.AssemblyIdentity">
            <summary>
            The identity of the referenced assembly. Has the same Culture, Name, PublicKeyToken and Version as the reference.
            </summary>
            <remarks>Also has a location, which may might be empty. Although mostly redundant, the object returned by this
            property is useful because it derives from System.Object and therefore can be used as a hash table key. It may be more efficient
            to use the properties defined directly on the reference, since the object returned by this property may be allocated lazily
            and the allocation can thus be avoided by using the reference's properties.</remarks>
        </member>
        <member name="P:Microsoft.Cci.IAssemblyReference.UnifiedAssemblyIdentity">
            <summary>
            Returns the identity of the assembly reference to which this assembly reference has been unified.
            </summary>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.AssemblyAttributes">
            <summary>
            A list of objects representing persisted instances of types that extend System.Attribute. Provides an extensible way to associate metadata
            with this assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.ExportedTypes">
            <summary>
            Public types defined in other modules making up this assembly and to which other assemblies may refer to via this assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.Files">
            <summary>
            A list of the files that constitute the assembly. These are not the source language files that may have been
            used to compile the assembly, but the files that contain constituent modules of a multi-module assembly as well
            as any external resources. It corresonds to the File table of the .NET assembly file format.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.Flags">
            <summary>
            A set of bits and bit ranges representing properties of the assembly. The value of <see cref="P:Microsoft.Cci.IAssembly.Flags"/> can be set
            from source code via the AssemblyFlags assembly custom attribute. The interpretation of the property depends on the target platform.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.MemberModules">
            <summary>
            A list of the modules that constitute the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.Resources">
            <summary>
            A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAssembly.SecurityAttributes">
            <summary>
            A list of objects representing persisted instances of pairs of security actions and sets of security permissions.
            These apply by default to every method reachable from the module.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataConstant">
            <summary>
            An expression that does not change its value at runtime and can be evaluated at compile time.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataExpression">
            <summary>
            An expression that can be represented directly in metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataExpression.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IStatement. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataExpression.Type">
            <summary>
            The type of value the expression represents.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataConstant.Value">
            <summary>
            The compile time value of the expression. Can be null.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ICustomAttribute">
            <summary>
            A metadata custom attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomAttribute.Arguments">
            <summary>
            Zero or more positional arguments for the attribute constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomAttribute.Constructor">
            <summary>
            A reference to the constructor that will be used to instantiate this custom attribute during execution (if the attribute is inspected via Reflection).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomAttribute.NamedArguments">
            <summary>
            Zero or more named arguments that specify values for fields and properties of the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomAttribute.NumberOfNamedArguments">
            <summary>
            The number of named arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomAttribute.Type">
            <summary>
            The type of the attribute. For example System.AttributeUsageAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ICustomModifier">
            <summary>
            Modifies the set of allowed values for a type, or the semantics of operations allowed on those values. 
            Custom modifiers are not associated directly with types, but rather with typed storage locations for values.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomModifier.IsOptional">
            <summary>
            If true, a language may use the modified storage location without being aware of the meaning of the modification.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICustomModifier.Modifier">
            <summary>
            A type used as a tag that indicates which type of modification applies to the storage location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IEventDefinition">
            <summary>
            An event is a member that enables an object or class to provide notifications. Clients can attach executable code for events by supplying event handlers.
            This interface models the metadata representation of an event.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.Accessors">
            <summary>
            A list of methods that are associated with the event.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.Adder">
            <summary>
            The method used to add a handler to the event.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.Caller">
            <summary>
            The method used to call the event handlers when the event occurs. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.IsRuntimeSpecial">
            <summary>
            True if the event gets special treatment from the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.IsSpecialName">
            <summary>
            This event is special in some way, as specified by the name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.Remover">
            <summary>
            The method used to add a handler to the event.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEventDefinition.Type">
            <summary>
            The (delegate) type of the handlers that will handle the event.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IFieldDefinition">
            <summary>
            A field is a member that represents a variable associated with an object or class.
            This interface models the metadata representation of a field.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IFieldReference">
            <summary>
            A reference to a field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.CustomModifiers">
            <summary>
            Custom modifiers associated with the referenced field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedField from all other fields obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.IsModified">
            <summary>
            The referenced field has custom modifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.IsStatic">
            <summary>
            This field is static (shared by all instances of its declaring type).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.Type">
            <summary>
            The type of value that is stored in this field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldReference.ResolvedField">
            <summary>
            The Field being referred to.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataConstantContainer">
            <summary>
            Implemented by IFieldDefinition, IParameterDefinition and IPropertyDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataConstantContainer.Constant">
            <summary>
            The constant value associated with this metadata object. For example, the default value of a parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.BitLength">
            <summary>
            The number of bits that form part of the value of the field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.CompileTimeValue">
            <summary>
            The compile time value of the field. This value should be used directly in IL, rather than a reference to the field.
            If the field does not have a valid compile time value, Dummy.Constant is returned.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.FieldMapping">
            <summary>
            Information of the location where this field is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsBitField">
            <summary>
            The field is aligned on a bit boundary and uses only the BitLength number of least significant bits of the representation of a Type value.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsCompileTimeConstant">
            <summary>
            This field is a compile-time constant. The field has no runtime location and cannot be directly addressed from IL.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsMapped">
            <summary>
            This field is mapped to an explicitly initialized (static) memory location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsMarshalledExplicitly">
            <summary>
            This field has associated field marshalling information.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsNotSerialized">
            <summary>
            The field does not have to be serialized when its containing instance is serialized.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsReadOnly">
            <summary>
            This field can only be read. Initialization takes place in a constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsRuntimeSpecial">
            <summary>
            True if the field gets special treatment from the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.IsSpecialName">
            <summary>
            This field is special in some way, as specified by the name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.MarshallingInformation">
            <summary>
            Specifies how this field is marshalled when it is accessed from unmanaged code.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.Offset">
            <summary>
            Offset of the field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFieldDefinition.SequenceNumber">
            <summary>
            The position of the field starting from 0 within the class.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IFileReference">
            <summary>
            Represents a file referenced by an assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFileReference.ContainingAssembly">
            <summary>
            The assembly that references this file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFileReference.HasMetadata">
            <summary>
            True if the file has metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFileReference.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFileReference.HashValue">
            <summary>
            A hash of the file contents.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericTypeInstance">
            <summary>
            A generic type instantiated with a list of type arguments
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericTypeInstanceReference">
            <summary>
            A generic type instantiated with a list of type arguments
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ITypeReference">
            <summary>
            A reference to a type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.AliasForType">
            <summary>
            If this type reference can be resolved and it resolves to a type alias, the resolution continues on
            to resolve the reference to the aliased type. This property provides a way to discover how that resolution
            proceeded, by exposing the alias concerned. Think of this as a version of ResolvedType that does not
            traverse aliases.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedType from all other types obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.IsAlias">
            <summary>
            True if this reference can be resolved and it resolves to a type alias. The type alias can be retrieved
            via the AliasForType property. The value of this.ResolvedType will be this.AliasForType.AliasedType.ResolvedType.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.IsEnum">
            <summary>
            True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.
            A type reference may report this value as false, even though the referenced type definition reports it as true.
            However, any type reference used in a custom attribute must report the correct value for this property or the
            resulting metadata would be invalid.
            Important, do not cache this property. Its value may change from false to true (but not the other way round) in some situations.
            To be on the safe side, resolve all type references whenever possible.
            </summary>
            <remarks>
            Metadata readers have trouble with this property because an ITypeReference instance is a model for the TypeRef table in the ECMA-335 metadata format.
            Unfortunately, a TypeRef table entry does not distinguish between enum types and other types. The distinction is made in some signatures that
            include TypeRef tokens. A more accurate model of the metadata format would encode the information obtained from those signatures in a separate property of
            the object containing the type reference, or would introduce a new kind of type reference such as INamespaceEnumTypeReference and INestedEnumTypeReference.
            However, for historical/usability reasons this object model oversimplifies the situation by pretending that all type references can tell if they refer to enum types
            or not. When consuming metadata, a type reference starts off with the value being false, but may change it to true as soon as its token is encountered
            in a signature that indicates that is an enum type. In practice this means that a type reference encountered in a part of the object model where it is
            important to know if the referenced type is an enum type, will get the right value from this property. However, if the value of this property is cached
            as soon as it is encountered for the first time, the wrong value may get cached.
            </remarks>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.IsValueType">
            <summary>
            True if the type is a value type. 
            Value types are sealed and extend System.ValueType or System.Enum.
            A type parameter for which MustBeValueType (the struct constraint in C#) is true also returns true for this property.
            A type reference may report this value as false, even though the referenced type definition reports it as true.
            However, any type reference used in an IL instruction other than ldtoken (used for the C# typeof expression) must report the correct value.
            Important, do not cache this property. Its value may change from false to true (but not the other way round) in some situations.
            To be on the safe side, resolve all type references whenever possible.
            </summary>
            <remarks>
            Metadata readers have trouble with this property because an ITypeReference instance is a model for the TypeRef table in the ECMA-335 metadata format.
            Unfortunately, a TypeRef table entry does not distinguish between value types and reference types. The distinction is made in some signatures that
            include TypeRef tokens. A more accurate model of the metadata format would encode the information obtained from those signatures in a separate property of
            the object containing the type reference, or would introduce a new kind of type reference such as INamespaceValueTypeReference and INestedValueTypeReference.
            However, for historical/usability reasons this object model oversimplifies the situation by pretending that all type references can tell if they refer to value types
            or not. When consuming metadata, a type reference starts off with the value being false, but may change it to true as soon as its token is encountered
            in a signature that indicates that is a value type. In practice this means that a type reference encountered in a part of the object model where it is
            important to know if the referenced type is a value type, will get the right value from this property. However, if the value of this property is cached
            as soon as it is encountered for the first time, the wrong value may get cached.
            </remarks>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.PlatformType">
            <summary>
            A way to get to platform types such as System.Object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case the reference is to an alias, then this is resolved type of the alias, which
            could have a different InternedKey from this reference.
            </summary>
            <remarks>
            If this.IsAlias then this.ResolvedType == this.AliasForType.AliasedType.ResolvedType.
            </remarks>
        </member>
        <member name="P:Microsoft.Cci.ITypeReference.TypeCode">
            <summary>
            Unless the value of TypeCode is PrimitiveTypeCode.NotPrimitive, the type corresponds to a "primitive" CLR type (such as System.Int32) and
            the type code identifies which of the primitive types it corresponds to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericTypeInstanceReference.GenericArguments">
            <summary>
            The type arguments that were used to instantiate this.GenericType in order to create this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericTypeInstanceReference.GenericType">
            <summary>
            Returns the generic type of which this type is an instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ITypeDefinition">
            <summary>
            This interface models the metadata representation of a type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Alignment">
            <summary>
            The byte alignment that values of the given type ought to have. Must be a power of 2. If zero, the alignment is decided at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.BaseClasses">
            <summary>
            Zero or more classes from which this type is derived.
            For CLR types this collection is empty for interfaces and System.Object and populated with exactly one base type for all other types.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Events">
            <summary>
            Zero or more events defined by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.ExplicitImplementationOverrides">
            <summary>
            Zero or more implementation overrides provided by the class.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Fields">
            <summary>
            Zero or more fields defined by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.GenericParameters">
            <summary>
            Zero or more parameters that can be used as type annotations.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.HasDeclarativeSecurity">
            <summary>
            True if this type has a non empty collection of SecurityAttributes or the System.Security.SuppressUnmanagedCodeSecurityAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Interfaces">
            <summary>
            Zero or more interfaces implemented by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.InstanceType">
            <summary>
            An instance of this generic type that has been obtained by using the generic parameters as the arguments. 
            Use this instance to look up members
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsAbstract">
            <summary>
            True if the type may not be instantiated.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsBeforeFieldInit">
            <summary>
            Is type initialized anytime before first access to static field
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsClass">
            <summary>
            True if the type is a class (it is not an interface or type parameter and does not extend a special base class).
            Corresponds to C# class.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsComObject">
            <summary>
            Is this imported from COM type library
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsDelegate">
            <summary>
            True if the type is a delegate (it extends System.MultiCastDelegate). Corresponds to C# delegate
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsGeneric">
            <summary>
            True if this type is parameterized (this.GenericParameters is a non empty collection).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsInterface">
            <summary>
            True if the type is an interface.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsReferenceType">
            <summary>
            True if the type is a reference type. A reference type is non static class or interface or a suitably constrained type parameter.
            A type parameter for which MustBeReferenceType (the class constraint in C#) is true returns true for this property
            as does a type parameter with a constraint that is a class.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsRuntimeSpecial">
            <summary>
            True if this type gets special treatment from the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsSerializable">
            <summary>
            True if this type is serializable.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsSpecialName">
            <summary>
            True if the type has special name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsStruct">
            <summary>
            True if the type is a struct (its not Primitive, is sealed and base is System.ValueType).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsSealed">
            <summary>
            True if the type may not be subtyped.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.IsStatic">
            <summary>
            True if the type is an abstract sealed class that directly extends System.Object and declares no constructors.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Layout">
            <summary>
            Layout of the type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Members">
            <summary>
            The collection of member instances that are members of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Methods">
            <summary>
            Zero or more methods defined by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.NestedTypes">
            <summary>
            Zero or more nested types defined by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.PrivateHelperMembers">
            <summary>
            Zero or more private type members generated by the compiler for implementation purposes. These members
            are only available after a complete visit of all of the other members of the type, including the bodies of methods.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.Properties">
            <summary>
            Zero or more properties defined by this type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.SecurityAttributes">
            <summary>
            Declarative security actions for this type. Will be empty if this.HasSecurity is false.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.SizeOf">
            <summary>
            Size of an object of this type. In bytes. If zero, the size is unspecified and will be determined at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.StringFormat">
            <summary>
            Default marshalling of the Strings in this class.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ITypeDefinition.UnderlyingType">
            <summary>
            Returns a reference to the underlying (integral) type on which this (enum) type is based.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericTypeParameter">
            <summary>
            The definition of a type parameter of a generic type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericParameter">
            <summary>
            The definition of a type parameter of a generic type or method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamedTypeDefinition">
            <summary>
            A named type definition, such as an INamespaceTypeDefinition or an INestedTypeDefinition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamedTypeReference">
            <summary>
            A reference to a named type, such as an INamespaceTypeReference or an INestedTypeReference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamedTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamedTypeReference.MangleName">
            <summary>
            If true, the persisted type name is mangled by appending "`n" where n is the number of type parameters, if the number of type parameters is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamedTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamedTypeDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IParameterListEntry">
            <summary>
            Implemented by an entity that is always a member of a particular parameter list, such as an IParameterDefinition.
            Provides a way to determine the position where the entity appears in the parameter list.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterListEntry.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.Constraints">
            <summary>
            A list of classes or interfaces. All type arguments matching this parameter must be derived from all of the classes and implement all of the interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.MustBeReferenceType">
            <summary>
            True if all type arguments matching this parameter are constrained to be reference types.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.MustBeValueType">
            <summary>
            True if all type arguments matching this parameter are constrained to be value types.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.MustHaveDefaultConstructor">
            <summary>
            True if all type arguments matching this parameter are constrained to be value types or concrete classes with visible default constructors.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericParameter.Variance">
            <summary>
            Indicates if the generic type or method with this type parameter is co-, contra-, or non variant with respect to this type parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericTypeParameterReference">
            <summary>
            A reference to a type parameter of a generic type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericParameterReference">
            <summary>
            A reference to the definition of a type parameter of a generic type or method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericTypeParameterReference.DefiningType">
            <summary>
            A reference to the generic type that defines the referenced type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericTypeParameterReference.ResolvedType">
            <summary>
            The generic type parameter this reference resolves to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericTypeParameter.DefiningType">
            <summary>
            The generic type that defines this type parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericMethodParameter">
            <summary>
            The definition of a type parameter of a generic method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericMethodParameterReference">
            <summary>
            A reference to a type parameter of a generic method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod">
            <summary>
            A reference to the generic method that defines the referenced type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericMethodParameterReference.ResolvedType">
            <summary>
            The generic method parameter this reference resolves to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericMethodParameter.DefiningMethod">
            <summary>
            The generic method that defines this type parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMethodBody">
            <summary>
            A metadata (IL) level represetation of the body of a method or of a property/event accessor.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMethodBody.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDoubleDispatcher. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.OperationExceptionInformation">
            <summary>
            A list exception data within the method body IL.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.LocalsAreZeroed">
            <summary>
            True if the locals are initialized by zeroeing the stack upon method entry.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.LocalVariables">
            <summary>
            The local variables of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.MethodDefinition">
            <summary>
            The definition of the method whose body this is.
            If this is the body of an event or property accessor, this will hold the corresponding adder/remover/setter or getter method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.Operations">
            <summary>
            A list CLR IL operations that implement this method body.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.MaxStack">
            <summary>
            The maximum number of elements on the evaluation stack during the execution of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.PrivateHelperTypes">
            <summary>
            Any types that are implicitly defined in order to implement the body semantics.
            In case of AST to instructions conversion this lists the types produced.
            In case of instructions to AST decompilation this should ideally be list of all types
            which are local to method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodBody.Size">
            <summary>
            The size in bytes of the method body when serialized.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IName">
            <summary>
            The name of an entity. Typically name instances come from a common pool. Within the pool no two distinct instances will have the same Value or UniqueKey.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IName.UniqueKey">
            <summary>
            An integer that is unique within the pool from which the name instance has been allocated. Useful as a hashtable key.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IName.UniqueKeyIgnoringCase">
            <summary>
            An integer that is unique within the pool from which the name instance has been allocated. Useful as a hashtable key.
            All name instances in the pool that have the same string value when ignoring the case of the characters in the string
            will have the same key value.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IName.Value">
            <summary>
            The string value corresponding to this name.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataNamedArgument">
            <summary>
            An expression that represents a (name, value) pair and that is typically used in method calls, custom attributes and object initializers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataNamedArgument.ArgumentName">
            <summary>
            The name of the parameter or property or field that corresponds to the argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataNamedArgument.ArgumentValue">
            <summary>
            The value of the argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataNamedArgument.IsField">
            <summary>
            True if the named argument provides the value of a field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataNamedArgument.ResolvedDefinition">
            <summary>
            Returns either null or the parameter or property or field that corresponds to this argument.
            Obsolete, please do not use.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceTypeDefinition">
            <summary>
            A type definition that is a member of a namespace definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceTypeReference">
            <summary>
            A reference to a type definition that is a member of a namespace definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeReference.ContainingUnitNamespace">
            <summary>
            The namespace that contains the referenced type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeReference.ResolvedType">
            <summary>
            The namespace type this reference resolves to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeReference.KeepDistinctFromDefinition">
            <summary>
            True if this reference should be kept distinct from the definition it refers to. That is, when copied or persisted,
            this object should not be unified with the referenced type, even if the referenced type is defined in the same
            module as the reference to the type.
            </summary>
            <remarks>
            This is a somewhat strange property and there is no corresponding bit in the metadata. It serves to
            constrain the way in which metadata is persisted in order to enable a particular implementation technique for
            substituting one type for another at runtime. This bit needs to be set only if there is a need to exploit this
            implementation technique. Metadata readers will set it whenever they encounter a distinct reference (a TypeRef token)
            when the definition (a TypeDef token) could have been used instead. Metadata writers will not substitute
            TypeDef tokens when they persist references with this property set to true.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.INamespaceTypeDefinition.AttributesFor(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a potentially empty enumeration of custom attributes that describe how this type implements the given interface.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeDefinition.ContainingUnitNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeDefinition.IsPublic">
            <summary>
            True if the type can be accessed from other assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceTypeDefinition.IsForeignObject">
            <summary>
            True if objects of this type are neither COM objects nor native to the CLR and are accessed via some kind of interoperation mechanism.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INameTable">
            <summary>
            An extensible collection of IName instances that represent names that are commonly used during compilation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.INameTable.GetNameFor(System.String)">
            <summary>
            Gets a cached IName instance corresponding to the given string. If no cached instance exists, a new instance is created.
            The method is only available to fully trusted code since it allows the caller to cause new objects to be added to the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.EmptyName">
            <summary>
            A name with no characters. Often used as a dummy.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Address">
            <summary>
            "Address"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.AllowMultiple">
            <summary>
            "AllowMultiple"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.BeginInvoke">
            <summary>
            "BeginInvoke"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.BoolOpBool">
            <summary>
            "bool op bool"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Combine">
            <summary>
            "Combine"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Concat">
            <summary>
            "Concat"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.DecimalOpDecimal">
            <summary>
            "decimal op decimal"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.DelegateOpDelegate">
            <summary>
            "delegate op delegate"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.EndInvoke">
            <summary>
            "EndInvoke"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.EnumOpEnum">
            <summary>
            "enum op enum"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.EnumOpNum">
            <summary>
            "enum op num"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Equals">
            <summary>
            "Equals"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Float32OpFloat32">
            <summary>
            "float32 op float32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Float64OpFloat64">
            <summary>
            "float64 op float64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Get">
            <summary>
            "Get"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.global">
            <summary>
            "global"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.HasValue">
            <summary>
            "HasValue"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Inherited">
            <summary>
            "Inherited"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Invoke">
            <summary>
            "Invoke"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int16OpInt16">
            <summary>
            "int16 op int16"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int32OpInt32">
            <summary>
            "int32 op int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int32OpUInt32">
            <summary>
            "int32 op uint32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int64OpInt32">
            <summary>
            "int64 op int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int64OpUInt32">
            <summary>
            "int64 op uint32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int64OpUInt64">
            <summary>
            "int64 op uint64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int64OpInt64">
            <summary>
            "int64 op int64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int8OpInt8">
            <summary>
            "int8 op int8"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.NullCoalescing">
            <summary>
            "operator ??(object, object)"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.NumOpEnum">
            <summary>
            "num op enum"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.ObjectOpObject">
            <summary>
            "object op object"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.ObjectOpString">
            <summary>
            "object op string"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpAddition">
            <summary>
            "op_Addition"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpBitwiseAnd">
            <summary>
            "op_BitwiseAnd"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpBitwiseOr">
            <summary>
            op_BitwiseOr
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpEnum">
            <summary>
            op enum
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpEquality">
            <summary>
            "op_Equality"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpExplicit">
            <summary>
            op_Explicit
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpImplicit">
            <summary>
            "op_Implicit"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpInequality">
            <summary>
            op_Inequality
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpInt8">
            <summary>
            "op int8"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpInt16">
            <summary>
            "op int16"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpInt32">
            <summary>
            "op int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpInt64">
            <summary>
            "op int64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpComma">
            <summary>
            "op_Comma"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpConcatentation">
            <summary>
            "op_Concatentation"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpDivision">
            <summary>
            "op_Division"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpExclusiveOr">
            <summary>
            "op_ExclusiveOr"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpExponentiation">
            <summary>
            "op_Exponentiation"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpFalse">
            <summary>
            "op_False"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpFloat32">
            <summary>
            "op float32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpFloat64">
            <summary>
            "op float64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpGreaterThan">
            <summary>
            "op_GreaterThan"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpGreaterThanOrEqual">
            <summary>
            "op_GreaterThanOrEqual"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpIntegerDivision">
            <summary>
            "op_IntegerDivision"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLeftShift">
            <summary>
            "op_LeftShift"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLessThan">
            <summary>
            "op_LessThan"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLessThanOrEqual">
            <summary>
            "op_LessThanOrEqual"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLike">
            <summary>
            "op_Like"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLogicalNot">
            <summary>
            "op_LogicalNot"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpLogicalOr">
            <summary>
            "op_LogicalOr"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpModulus">
            <summary>
            "op_Modulus"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpMultiply">
            <summary>
            "op_Multiply"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpOnesComplement">
            <summary>
            "op_OnesComplement"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpBoolean">
            <summary>
            "op boolean"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpChar">
            <summary>
            "op char"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpDecimal">
            <summary>
            "op decimal"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpDecrement">
            <summary>
            "op_Decrement"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpIncrement">
            <summary>
            "op_Increment"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpRightShift">
            <summary>
            op_RightShift
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpSubtraction">
            <summary>
            "op_Subtraction"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpTrue">
            <summary>
            "op_True"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUInt8">
            <summary>
            "op uint8"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUInt16">
            <summary>
            "op uint16"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUInt32">
            <summary>
            "op uint32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUInt64">
            <summary>
            "op uint64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUnaryNegation">
            <summary>
            "op_UnaryNegation"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.OpUnaryPlus">
            <summary>
            "op_UnaryPlus"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.StringOpString">
            <summary>
            "string op string"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.StringOpObject">
            <summary>
            "string op object"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UIntPtrOpUIntPtr">
            <summary>
            "uintPtr op uintPtr"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt32OpInt32">
            <summary>
            "uint32 op int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt32OpUInt32">
            <summary>
            "uint32 op uint32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt64OpInt32">
            <summary>
            "uint64 op int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt64OpUInt32">
            <summary>
            "uint64 op uint32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt64OpUInt64">
            <summary>
            "uint64 op uint64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.value">
            <summary>
            "value"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.System">
            <summary>
            "System"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.VoidPtrOpVoidPtr">
            <summary>
            void* op void*
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Boolean">
            <summary>
            "Boolean"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Cctor">
            <summary>
            ".cctor"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Char">
            <summary>
            Char
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Ctor">
            <summary>
            ".ctor"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Byte">
            <summary>
            "Byte"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.SByte">
            <summary>
            "SByte"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int16">
            <summary>
            "Int16"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt16">
            <summary>
            "UInt16"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int32">
            <summary>
            "Int32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt32">
            <summary>
            "UInt32"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Int64">
            <summary>
            "Int64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UInt64">
            <summary>
            "UInt64"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.String">
            <summary>
            "String"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.IntPtr">
            <summary>
            "IntPtr"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.UIntPtr">
            <summary>
            "UIntPtr"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Object">
            <summary>
            "Object"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Remove">
            <summary>
            "Remove"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Result">
            <summary>
            "result"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Set">
            <summary>
            "Set"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Single">
            <summary>
            "Single"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Double">
            <summary>
            "Double"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.TypedReference">
            <summary>
            "TypedReference"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Enum">
            <summary>
            "Enum"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Length">
            <summary>
            "Length"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.LongLength">
            <summary>
            "LongLength"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.MulticastDelegate">
            <summary>
            "MulticastDelegate"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.ValueType">
            <summary>
            "ValueType"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Type">
            <summary>
            "Type"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Array">
            <summary>
            "Array"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Attribute">
            <summary>
            "Attribute"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.AttributeUsageAttribute">
            <summary>
            "AttributeUsageAttribute"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.DateTime">
            <summary>
            "DateTime"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.DebuggerHiddenAttribute">
            <summary>
            "DebuggerHiddenAttribute"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Decimal">
            <summary>
            "Decimal"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Delegate">
            <summary>
            "Delegate"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Diagnostics">
            <summary>
            "Diagnostics"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.DBNull">
            <summary>
            "DBNull"
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INameTable.Nullable">
            <summary>
            "Nullable"
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedTypeDefinition">
            <summary>
            A type definition that is a member of another type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedTypeReference">
            <summary>
            A type definition that is a member of another type definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedTypeReference.ResolvedType">
            <summary>
            The nested type this reference resolves to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedTypeDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPlatformType">
            <summary>
            A collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IPlatformType.GetTypeFor(Microsoft.Cci.PrimitiveTypeCode)">
            <summary>
            Maps a PrimitiveTypeCode value (other than Pointer, Reference and NotPrimitive) to a corresponding ITypeDefinition instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDiagnosticsContractsContract">
            <summary>
            A reference to the class that contains the standard contract methods, such as System.Diagnostics.Contracts.Contract.Requires.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.PointerSize">
            <summary>
            The size (in bytes) of a pointer on the platform on which these types are implemented.
            The value of this property is either 4 (32-bits) or 8 (64-bit).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemArgIterator">
            <summary>
            System.ArgIterator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemArray">
            <summary>
            System.Array
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemAsyncCallback">
            <summary>
            System.AsyncCallBack
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemAttribute">
            <summary>
            System.Attribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemAttributeUsageAttribute">
            <summary>
            System.AttributeUsageAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemBoolean">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemChar">
            <summary>
            System.Char
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsGenericDictionary">
            <summary>
            System.Collections.Generic.Dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsGenericICollection">
            <summary>
            System.Collections.Generic.ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsGenericIEnumerable">
            <summary>
            System.Collections.Generic.IEnumerable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsGenericIEnumerator">
            <summary>
            System.Collections.Generic.IEnumerator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsGenericIList">
            <summary>
            System.Collections.Generic.IList
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsICollection">
            <summary>
            System.Collections.ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsIEnumerable">
            <summary>
            System.Collections.IEnumerable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsIEnumerator">
            <summary>
            System.Collections.IEnumerator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsIList">
            <summary>
            System.Collections.IList
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsIStructuralComparable">
            <summary>
            System.Collections.IStructuralComparable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemCollectionsIStructuralEquatable">
            <summary>
            System.Collections.IStructuralEquatable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDateTime">
            <summary>
            System.DateTime
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDateTimeOffset">
            <summary>
            System.DateTimeOffset
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDecimal">
            <summary>
            System.Decimal
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDelegate">
            <summary>
            System.Delegate
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemDBNull">
            <summary>
            System.DBNull
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemEnum">
            <summary>
            System.Enum
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemException">
            <summary>
            System.Exception
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemFloat32">
            <summary>
            System.Float32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemFloat64">
            <summary>
            System.Float64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemGlobalizationCultureInfo">
            <summary>
            System.Globalization.CultureInfo
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemIAsyncResult">
            <summary>
            System.IAsyncResult
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemICloneable">
            <summary>
            System.ICloneable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemContextStaticAttribute">
            <summary>
            System.ContextStaticAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemInt16">
            <summary>
            System.Int16
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemInt32">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemInt64">
            <summary>
            System.Int64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemInt8">
            <summary>
            System.Int8
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemIntPtr">
            <summary>
            System.IntPtr
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemMulticastDelegate">
            <summary>
            System.MulticastDelegate
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemNullable">
            <summary>
            System.Nullable&lt;T&gt;
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemObject">
            <summary>
            System.Object
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemReflectionAssemblySignatureKeyAttribute">
            <summary>
            System.Reflection.AssemblySignatureKeyAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeArgumentHandle">
            <summary>
            System.RuntimeArgumentHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeFieldHandle">
            <summary>
            System.RuntimeFieldHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeMethodHandle">
            <summary>
            System.RuntimeMethodHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeTypeHandle">
            <summary>
            System.RuntimeTypeHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesCallConvCdecl">
            <summary>
            System.Runtime.CompilerServices.CallConvCdecl
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesCompilerGeneratedAttribute">
            <summary>
            System.Runtime.CompilerServices.CompilerGeneratedAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesExtensionAttribute">
            <summary>
            System.Runtime.CompilerServices.ExtensionAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesInternalsVisibleToAttribute">
            <summary>
            System.Runtime.CompilerServices.InternalsVisibleToAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesIsConst">
            <summary>
            System.Runtime.CompilerServices.IsCont
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesIsVolatile">
            <summary>
            System.Runtime.CompilerServices.IsVolatile
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeCompilerServicesReferenceAssemblyAttribute">
            <summary>
            System.Runtime.CompilerServices.ReferenceAssemblyAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemRuntimeInteropServicesDllImportAttribute">
            <summary>
            System.Runtime.InteropServices.DllImportAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemSecurityPermissionsSecurityAction">
            <summary>
            System.Security.Permissions.SecurityAction
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemSecuritySecurityCriticalAttribute">
            <summary>
            System.Security.SecurityCriticalAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemSecuritySecuritySafeCriticalAttribute">
            <summary>
            System.Security.SecuritySafeCriticalAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemSecuritySuppressUnmanagedCodeSecurityAttribute">
            <summary>
            System.Security.SuppressUnmanagedCodeSecurityAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemString">
            <summary>
            System.String
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemThreadStaticAttribute">
            <summary>
            System.ThreadStaticAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemType">
            <summary>
            System.Type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemTypedReference">
            <summary>
            System.TypedReference
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemUInt16">
            <summary>
            System.UInt16
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemUInt32">
            <summary>
            System.UInt32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemUInt64">
            <summary>
            System.UInt64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemUInt8">
            <summary>
            System.UInt8
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemUIntPtr">
            <summary>
            System.UIntPtr
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemValueType">
            <summary>
            System.ValueType
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformType.SystemVoid">
            <summary>
            System.Void
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPropertyDefinition">
            <summary>
            A property is a member that provides access to an attribute of an object or a class.
            This interface models the metadata representation of a property.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.Accessors">
            <summary>
            A list of methods that are associated with the property.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.DefaultValue">
            <summary>
            A compile time constant value that provides the default value for the property. (Who uses this and why?)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.Getter">
            <summary>
            The method used to get the value of this property. May be absent (null).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.HasDefaultValue">
            <summary>
            True if this property has a compile time constant associated with that serves as a default value for the property. (Who uses this and why?)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.IsRuntimeSpecial">
            <summary>
            True if this property gets special treatment from the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.IsSpecialName">
            <summary>
            True if this property is special in some way, as specified by the name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPropertyDefinition.Setter">
            <summary>
            The method used to set the value of this property. May be absent (null).
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IRootUnitNamespace">
            <summary>
            A unit namespace that is not nested inside another namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnitNamespace">
            <summary>
            A named collection of namespace members, with routines to search and maintain the collection. All the members belong to an associated
            IUnit instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceDefinition">
            <summary>
            A named collection of namespace members, with routines to search and maintain the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceDefinition.RootOwner">
            <summary>
            The object associated with the namespace. For example an IUnit or IUnitSet instance. This namespace is either the root namespace of that object
            or it is a nested namespace that is directly of indirectly nested in the root namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceDefinition.Members">
            <summary>
            The collection of member objects comprising the namespaces.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnitNamespaceReference">
            <summary>
            A reference to an unit namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitNamespaceReference.Unit">
            <summary>
            A reference to the unit that defines the referenced namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitNamespaceReference.ResolvedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitNamespace.Unit">
            <summary>
            The IUnit instance associated with this namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IRootUnitNamespaceReference">
            <summary>
            A reference to a root unit namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedUnitNamespace">
            <summary>
            A unit namespace that is nested inside another unit namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedUnitNamespaceReference">
            <summary>
            A reference to a nested unit namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedUnitNamespaceReference.ContainingUnitNamespace">
            <summary>
            A reference to the unit namespace that contains the referenced nested unit namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedUnitNamespaceReference.ResolvedNestedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedUnitNamespace.ContainingUnitNamespace">
            <summary>
            The unit namespace that contains this member.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnitSet">
            <summary>
            A set of units that all contribute to a unified root namespace. For example the set of assemblies referenced by a C# project.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IUnitSet.Contains(Microsoft.Cci.IUnit)">
            <summary>
            Determines if the given unit belongs to this set of units.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitSet.Units">
            <summary>
            Enumerates the units making up this set of units.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitSet.UnitSetNamespaceRoot">
            <summary>
            A unified root namespace for this set of units. It contains nested namespaces as well as top level types and anything else that implements INamespaceMember.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IRootUnitSetNamespace">
            <summary>
            A unit set namespace that is not nested inside another namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUnitSetNamespace">
            <summary>
            A named collection of namespace members, with routines to search and maintain the collection. The collection of members
            is the union of the individual members collections of one of more IUnit instances making up the IUnitSet instance associated
            with this namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUnitSetNamespace.UnitSet">
            <summary>
            The IUnitSet instance associated with the namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IResource">
            <summary>
            A named data resource that is stored as part of CLR metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IResourceReference">
            <summary>
            A reference to an IResource instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResourceReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResourceReference.DefiningAssembly">
            <summary>
            A symbolic reference to the IAssembly that defines the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResourceReference.IsPublic">
            <summary>
            Specifies whether other code from other assemblies may access this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResourceReference.Name">
            <summary>
            The name of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResourceReference.Resource">
            <summary>
            The referenced resource.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResource.Data">
            <summary>
            The resource data.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResource.IsInExternalFile">
            <summary>
            The resource is in external file
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IResource.ExternalFile">
            <summary>
            The external file that contains the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMarshallingInformation">
            <summary>
            Information about how values of managed types should be marshalled to and from unmanaged types.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.CustomMarshaller">
            <summary>
            A reference to the type implementing the custom marshaller.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.CustomMarshallerRuntimeArgument">
            <summary>
            An argument string (cookie) passed to the custom marshaller at run time.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.ElementType">
            <summary>
            The unmanaged element type of the unmanaged array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.IidParameterIndex">
            <summary>
            Specifies the index of the parameter that contains the value of the Interface Identifier (IID) of the marshalled object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.UnmanagedType">
            <summary>
            The unmanaged type to which the managed type will be marshalled. This can be be UnmanagedType.CustomMarshaler, in which case the unmanaged type
            is decided at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.NumberOfElements">
            <summary>
            The number of elements in the fixed size portion of the unmanaged array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.ParamIndex">
            <summary>
            The zero based index of the parameter in the unmanaged method that contains the number of elements in the variable portion of unmanaged array.
            If the index is null, the variable portion is of size zero, or the caller conveys the size of the variable portion of the array to the unmanaged method in some other way.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.SafeArrayElementSubtype">
            <summary>
            The type to which the variant values of all elements of the safe array must belong. See also SafeArrayElementUserDefinedSubtype.
            (The element type of a safe array is VARIANT. The "sub type" specifies the value of all of the tag fields (vt) of the element values. )
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMarshallingInformation.SafeArrayElementUserDefinedSubtype">
            <summary>
            A reference to the user defined type to which the variant values of all elements of the safe array must belong.
            (The element type of a safe array is VARIANT. The tag fields will all be either VT_DISPATCH or VT_UNKNOWN or VT_RECORD.
            The "user defined sub type" specifies the type of value the ppdispVal/ppunkVal/pvRecord fields of the element values may point to.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISecurityAttribute">
            <summary>
            A declarative specification of a security action applied to a set of permissions. Used by the CLR loader to enforce security restrictions.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISecurityAttribute.Action">
            <summary>
            Specifies the security action that can be performed using declarative security. For example the action could be Deny.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISecurityAttribute.Attributes">
            <summary>
            Custom attributes that collectively define the permission set to which the action is applied. Each attribute represents a serialized permission
            or permission set. The union of the sets, together with the individual permissions, define the set to which the action applies.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IParameterTypeInformation">
            <summary>
            Information that describes a method or property parameter, but does not include all the information in a IParameterDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterTypeInformation.ContainingSignature">
            <summary>
            The method or property that defines this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterTypeInformation.CustomModifiers">
            <summary>
            The list of custom modifiers, if any, associated with the parameter. Evaluate this property only if IsModified is true.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterTypeInformation.IsByReference">
            <summary>
            True if the parameter is passed by reference (using a managed pointer).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterTypeInformation.IsModified">
            <summary>
            This parameter has one or more custom modifiers associated with it.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterTypeInformation.Type">
            <summary>
            The type of argument value that corresponds to this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedNestedTypeDefinition">
            <summary>
            A type definition that is a specialized nested type. That is, the type definition is a member of a generic type instance, or of another specialized nested type.
            It is specialized, because if it had any references to the type parameters of the generic type, then those references have been replaced with the type arguments of the instance.
            In other words, it may be less generic than before, and hence it has been "specialized".
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedNestedTypeReference">
            <summary>
            A reference to a type definition that is a specialized nested type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedNestedTypeReference.UnspecializedVersion">
            <summary>
            A reference to the nested type that has been specialized to obtain this nested type reference. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedNestedTypeDefinition.UnspecializedVersion">
            <summary>
            The nested type that has been specialized to obtain this nested type. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedFieldDefinition">
            <summary>
            Represents the specialized field definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedFieldReference">
            <summary>
            Represents reference specialized field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedFieldReference.UnspecializedVersion">
            <summary>
            A reference to the field definition that has been specialized to obtain the field definition referred to by this field reference. 
            When the containing type of the referenced specialized field definition is itself a specialized nested type of a generic type instance, 
            then the unspecialized field reference refers to the corresponding field definition from the unspecialized containing type definition.
            (I.e. the unspecialized field reference always refers to a field definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedFieldDefinition.UnspecializedVersion">
            <summary>
            The field that has been specialized to obtain this field. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedMethodDefinition">
            <summary>
            Represents the specialized method definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedMethodReference">
            <summary>
            Represents reference specialized method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedMethodReference.UnspecializedVersion">
            <summary>
            A reference to the method definition that has been specialized to obtain the method definition referred to by this method reference. 
            When the containing type of the referenced specialized method definition is itself a specialized nested type of a generic type instance, 
            then the unspecialized method reference refers to the corresponding method definition from the unspecialized containing type definition.
            (I.e. the unspecialized method reference always refers to a method definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedMethodDefinition.UnspecializedVersion">
            <summary>
            The method that has been specialized to obtain this method. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedPropertyDefinition">
            <summary>
            Represents the specialized property definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedPropertyDefinition.UnspecializedVersion">
            <summary>
            The property that has been specialized to obtain this property. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IFunctionPointer">
            <summary>
            This interface models the metadata representation of a function pointer type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IFunctionPointerTypeReference">
            <summary>
            This interface models the metadata representation of a function pointer type reference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IFunctionPointerTypeReference.ExtraArgumentTypes">
            <summary>
            The types and modifiers of extra arguments that the caller will pass to the methods that are pointed to by this pointer.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILocalDefinition">
            <summary>
            An object that represents a local variable or constant.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.CompileTimeValue">
            <summary>
            The compile time value of the definition, if it is a local constant.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.CustomModifiers">
            <summary>
            Custom modifiers associated with local variable definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.IsConstant">
            <summary>
            True if this local definition is readonly and initialized with a compile time constant value.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.IsModified">
            <summary>
            The local variable has custom modifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.IsPinned">
            <summary>
            True if the value referenced by the local must not be moved by the actions of the garbage collector.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.IsReference">
            <summary>
            True if the local contains a managed pointer (for example a reference to a local variable or a reference to a field of an object).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.MethodDefinition">
            <summary>
            The definition of the method in which this local is defined.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalDefinition.Type">
            <summary>
            The type of the local.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IParameterDefinition">
            <summary>
            This interface models the metadata representation of a method or property parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.DefaultValue">
            <summary>
            A compile time constant value that should be supplied as the corresponding argument value by callers that do not explicitly specify an argument value for this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.HasDefaultValue">
            <summary>
            True if the parameter has a default value that should be supplied as the argument value by a caller for which the argument value has not been explicitly specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.IsIn">
            <summary>
            True if the argument value must be included in the marshalled arguments passed to a remote callee.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.IsMarshalledExplicitly">
            <summary>
            This parameter has associated marshalling information.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.IsOptional">
            <summary>
            True if the argument value must be included in the marshalled arguments passed to a remote callee only if it is different from the default value (if there is one).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.IsOut">
            <summary>
            True if the final value assigned to the parameter will be marshalled with the return values passed back from a remote callee.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.IsParameterArray">
            <summary>
            True if the parameter has the ParamArrayAttribute custom attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.MarshallingInformation">
            <summary>
            Specifies how this parameter is marshalled when it is accessed from unmanaged code.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IParameterDefinition.ParamArrayElementType">
            <summary>
            The element type of the parameter array.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISectionBlock">
            <summary>
            Represents a block of data stored at a given offset within a specified section of the PE file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISectionBlock.PESectionKind">
            <summary>
            Section where the block resides.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISectionBlock.Offset">
            <summary>
            Offset into section where the block resides.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISectionBlock.Size">
            <summary>
            Size of the block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISectionBlock.Data">
            <summary>
            Byte information stored in the block.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPlatformInvokeInformation">
            <summary>
            Information that describes how a method from the underlying Platform is to be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.ImportName">
            <summary>
            Name of the method/field providing the implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.ImportModule">
            <summary>
            Module providing the method/field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.StringFormat">
            <summary>
            Marshalling of the Strings for this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.NoMangle">
            <summary>
            If the PInvoke should use the name specified as is.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.PInvokeCallingConvention">
            <summary>
            The calling convention of the PInvoke call.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.SupportsLastError">
            <summary>
            If the target function supports getting last error.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.UseBestFit">
            <summary>
            Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPlatformInvokeInformation.ThrowExceptionForUnmappableChar">
            <summary>
            Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGlobalMethodDefinition">
            <summary>
            Represents a global method in symbol table.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGlobalMethodDefinition.Name">
            <summary>
            The name of the method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGlobalFieldDefinition">
            <summary>
            Represents a global field in symbol table.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IOperation">
            <summary>
            A single CLR IL operation.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperation.OperationCode">
            <summary>
            The actual value of the operation code
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperation.Offset">
            <summary>
            The offset from the start of the operation stream of a method
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperation.Location">
            <summary>
            The location that corresponds to this instruction.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperation.Value">
            <summary>
            Immediate data such as a string, the address of a branch target, or a metadata reference, such as a Field
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IOperationExceptionInformation">
            <summary>
            Exception information of the method body expressed in terms of offsets in CLR IL.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.HandlerKind">
            <summary>
            Handler kind for this SEH info
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.ExceptionType">
            <summary>
            If HandlerKind == HandlerKind.Catch, this is the type of expection to catch. If HandlerKind == HandlerKind.Filter, this is System.Object.
            Otherwise this is a Dummy.TypeReference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.TryStartOffset">
            <summary>
            Label instruction corresponding to the start of try block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.TryEndOffset">
            <summary>
            Label instruction corresponding to the end of try block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.FilterDecisionStartOffset">
            <summary>
            Label instruction corresponding to the start of filter decision block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.HandlerStartOffset">
            <summary>
            Label instruction corresponding to the start of handler block
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IOperationExceptionInformation.HandlerEndOffset">
            <summary>
            Label instruction corresponding to the end of handler block
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IArrayType">
            <summary>
            This interface models the metadata representation of an array type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IArrayTypeReference">
            <summary>
            This interface models the metadata representation of an array type reference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IArrayTypeReference.ElementType">
            <summary>
            The type of the elements of this array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IArrayTypeReference.IsVector">
            <summary>
            This type of array is a single dimensional array with zero lower bound for index values.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IArrayTypeReference.LowerBounds">
            <summary>
            A possibly empty list of lower bounds for dimension indices. When not explicitly specified, a lower bound defaults to zero.
            The first lower bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IArrayTypeReference.Rank">
            <summary>
            The number of array dimensions.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IArrayTypeReference.Sizes">
            <summary>
            A possible empty list of upper bounds for dimension indices.
            The first upper bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            An unspecified upper bound means that instances of this type can have an arbitrary upper bound for that dimension.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataCreateArray">
            <summary>
            An expression that creates an array instance in metadata. Only for use in custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataCreateArray.ElementType">
            <summary>
            The element type of the array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataCreateArray.Initializers">
            <summary>
            The initial values of the array elements. May be empty.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataCreateArray.LowerBounds">
            <summary>
            The index value of the first element in each dimension.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataCreateArray.Rank">
            <summary>
            The number of dimensions of the array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataCreateArray.Sizes">
            <summary>
            The number of elements allowed in each dimension.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataTypeOf">
            <summary>
            An expression that results in a System.Type instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMetadataTypeOf.TypeToGet">
            <summary>
            The type that will be represented by the System.Type instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.CallingConvention">
            <summary>
            Specifies how the callee passes parameters to the callee and who cleans up the stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.C">
            <summary>
            C/C++ style calling convention for unmanaged methods. The call stack is cleaned up by the caller, 
            which makes this convention suitable for calling methods that accept extra arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.Default">
            <summary>
            The convention for calling managed methods with a fixed number of arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.ExtraArguments">
            <summary>
            The convention for calling managed methods that accept extra arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.FastCall">
            <summary>
            Arguments are passed in registers when possible. This calling convention is not yet supported.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.Standard">
            <summary>
            Win32 API calling convention for calling unmanged methods via PlatformInvoke. The call stack is cleaned up by the callee.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.ThisCall">
            <summary>
            C++ member unmanaged method (non-vararg) calling convention. The callee cleans the stack and the this pointer is pushed on the stack last.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.Generic">
            <summary>
            The convention for calling a generic method.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.HasThis">
            <summary>
            The convention for calling an instance method with an implicit this parameter (the method does not have an explicit parameter definition for this).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CallingConvention.ExplicitThis">
            <summary>
            The convention for calling an instance method that explicitly declares its first parameter to correspond to the this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.HandlerKind">
            <summary>
            The kind of handler for the SEH
            </summary>
        </member>
        <member name="F:Microsoft.Cci.HandlerKind.Illegal">
            <summary>
            Handler is illegal
            </summary>
        </member>
        <member name="F:Microsoft.Cci.HandlerKind.Catch">
            <summary>
            Handler is for Catch
            </summary>
        </member>
        <member name="F:Microsoft.Cci.HandlerKind.Filter">
            <summary>
            Handler is filter
            </summary>
        </member>
        <member name="F:Microsoft.Cci.HandlerKind.Finally">
            <summary>
            Handler is finally
            </summary>
        </member>
        <member name="F:Microsoft.Cci.HandlerKind.Fault">
            <summary>
            Handler is Fault
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IAliasMember">
            <summary>
            A member of a type definition, such as a field or a method.
            This interface models the metadata representation of a type member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAliasMember.ContainingAlias">
            <summary>
            The alias that contains this member.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IAliasMember.Visibility">
            <summary>
            Indicates if the member is public or confined to its containing type, derived types and/or declaring assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISpecializedEventDefinition">
            <summary>
            Represents the specialized event definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISpecializedEventDefinition.UnspecializedVersion">
            <summary>
            The event that has been specialized to obtain this event. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericMethodInstance">
            <summary>
            A generic method instantiated with a list of type arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IGenericMethodInstanceReference">
            <summary>
            A reference to generic method instantiated with a list of type arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericMethodInstanceReference.GenericArguments">
            <summary>
            The type arguments that were used to instantiate this.GenericMethod in order to create this method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IGenericMethodInstanceReference.GenericMethod">
            <summary>
            Returns the generic method of which this method is an instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Enumerable`1">
            <summary>
            A helper class for efficiently getting hold of empty enumerables.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Cci.Enumerable`1.Empty">
            <summary>
            An empty enumerable of element type T.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Function`2">
            <summary>
            A Function that takes a single argument of type P and returns a value of type R.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Function`3">
            <summary>
            A Function that takes an argument of type P, an argument of type Q, and returns a value of type R.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Action`2">
            <summary>
            An action that takes an argument of type P and an argument of type R.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IteratorHelper">
            <summary>
            A container for static helper methods that are used for manipulating and computing iterators.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerablesAreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares two enumerations of elements for equality by calling the Equals method on each pair of elements.
            The enumerations must be of equal length, or must both be null, in order to be considered equal.
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="left">An enumeration of elements. The enumeration may be null, but the elements may not.</param>
            <param name="right">An enumeration of elements. The enumeration may be null, but the elements may not.</param>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerablesAreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumerations of elements for equality by calling the Equals method on each pair of elements.
            The enumerations must be of equal length, or must both be null, in order to be considered equal.
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="left">An enumeration of elements. The enumeration may be null, but the elements may not.</param>
            <param name="right">An enumeration of elements. The enumeration may be null, but the elements may not.</param>
            <param name="comparer">An object that compares two enumeration elements for equality.</param>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetAsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an array whose elements are those returned by the given enumerable.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetEmptyEnumerable``1">
            <summary>
            Returns an enumerable containing no objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetReadonly``1(``0[])">
            <summary>
            Returns an enumerable wrapper for the array that cannot be cast back down to the array. If the array is null, the result is null.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="array">The array to wrap. May be null.</param>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetSingletonEnumerable``1(``0)">
            <summary>
            Returns an enumerable containing single object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetConversionEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an enumerable that acts like cast on enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetConversionEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Given an enumerable <paramref name="sourceEnumeration"/> the elements of which is of type <typeparamref name="SourceType"/> and a convertion 
            method <paramref name="convert"/> that computes a value of type <typeparamref name="TargetType"/> from a value of type <typeparamref name="SourceType"/>,
            return an enumerable of <typeparamref name="TargetType"/> elements. Basically, map over enuemrables. 
            </summary>
            <typeparam name="SourceType"></typeparam>
            <typeparam name="TargetType"></typeparam>
            <param name="sourceEnumeration"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.GetFilterEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an enumerable that acts like cast on enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerableIsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True if the given enumerable is not null and contains at least one element.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerableIsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True if the given enumerable is null or contains no elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerableContains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            True if the given enumerable is not null and contains the given element.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerableCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in the given enumerable. A null enumerable is allowed and results in 0.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.EnumerableHasLength``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Returns true if the number of elements in the given enumerable equals the specified length. A null enumerable is allowed and
            has length 0.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the single element from the given single element collection.
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="enumerable">An enumeration of elements.</param>
            <returns>The single element from the enumerable</returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element from the given non-empty collection.
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="enumerable">An enumeration of elements.</param>
            <returns>The first element from the enumerable</returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns true if any element of the sequence satisfies the predicate
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="enumerable">An enumeration of elements.</param>
            <param name="pred">The predicate to apply.</param>
            <returns>true if and only if pred was true for at least one element</returns>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns enumeration being a concatenation of parameters.
            </summary>
            <typeparam name="T">The element type of the collection</typeparam>
            <param name="left">An enumeration of elements. The enumeration may be null.</param>
            <param name="right">An enumeration of elements. The enumeration may be null.</param>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.Cci.Function{``0,``1,``2})">
            <summary>
            A zip join implementation that walks two enumerables performing some function
            on corresponding elements and returning an enumerable of the result of the
            function.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IteratorHelper.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.Cci.Action{``0,``1})">
            <summary>
            A zip join implementation that walks two enumerables performing some action
            on corresponding elements.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ObjectModelHelper">
            <summary>
            A container for static helper methods that are used to test identities for equality.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ObjectModelHelper.CaseInsensitiveStringHash(System.String)">
            <summary>
            Returns a hash code based on the string content. Strings that differ only in case will always have the same hash code.
            </summary>
            <param name="s">The string to hash.</param>
        </member>
        <member name="M:Microsoft.Cci.ObjectModelHelper.CaseSensitiveStringHash(System.String)">
            <summary>
            Returns a hash code based on the string content. Strings that differ only in case will always have the same hash code.
            </summary>
            <param name="s">The string to hash.</param>
        </member>
        <member name="T:Microsoft.Cci.SecurityAction">
            <summary>
            Enum specifying the kinds of security actions
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.ActionNil">
            <summary>
            No Security Action.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.Request">
            <summary>
            Specify the security requried to run.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.Demand">
            <summary>
            Check that all callers in the call chain have been granted specified permissions, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.Assert">
            <summary>
            Without further checks, satisfy Demand for the specified permissions, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.Deny">
            <summary>
            Without further checks refuse Demand for the specified permissions, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.PermitOnly">
            <summary>
            Without further checks, refuse Demand for all permissions other than those specified, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.LinkDemand">
            <summary>
            Check that immediate caller has been granted the specified permissions, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.InheritanceDemand">
            <summary>
            Check that all derived classes have been granted the specified permissions, all of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.RequestMinimum">
            <summary>
            Specify the minimum permissions required to run.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.RequestOptional">
            <summary>
            Specify the optional permissions to grant.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.RequestRefuse">
            <summary>
            Specify the permissions not to be granted.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.PrejitGrant">
            <summary>
            Reserved for implementation specific use.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.PrejitDenied">
            <summary>
            Reserved for implementation specific use.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.NonCasDemand">
            <summary>
            Check that all callers in the call chain have been granted the specified permissions, none of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.NonCasLinkDemand">
            <summary>
            Check that the immediate caller has been granted the specified permissions, none of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SecurityAction.NonCasInheritance">
            <summary>
            Check that all derived classes have been granted the specified permissions, none of which derive from System.Security.Permissions.CodeAccessPermission.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.OperationCode">
            <summary>
            An enumeration of all of the operation codes that are used in the CLI Common Intermediate Language.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Nop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Break">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarga_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Starg_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloca_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldnull">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_M1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_6">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_7">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldc_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Dup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Pop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Jmp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Call">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Calli">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ret">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Br_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Brfalse_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Brtrue_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Beq_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bge_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bgt_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ble_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Blt_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bne_Un_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bge_Un_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bgt_Un_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ble_Un_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Blt_Un_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Br">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Brfalse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Brtrue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Beq">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bgt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ble">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Blt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bne_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bge_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Bgt_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ble_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Blt_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Switch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_U1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_U2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_U4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldind_Ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_Ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Div">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Div_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Rem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Rem_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.And">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Or">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Xor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Shl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Shr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Shr_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Neg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Not">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_U4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_U8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Callvirt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Cpobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldstr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Newobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Castclass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Isinst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_R_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Unbox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Throw">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldflda">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldsfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldsflda">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stsfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I1_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I2_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I4_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I8_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U1_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U2_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U4_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U8_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Box">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Newarr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldlen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_U1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_U2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_U4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem_Ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_R4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_R8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem_Ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldelem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stelem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Unbox_Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Refanyval">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ckfinite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Mkrefany">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldtoken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_U2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_U1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_Ovf_U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Add_Ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Add_Ovf_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Mul_Ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Mul_Ovf_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Sub_Ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Sub_Ovf_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Endfinally">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Leave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Leave_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stind_I">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Conv_U">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Arglist">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ceq">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Cgt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Cgt_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Clt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Clt_Un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldftn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldvirtftn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldarga">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Starg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Ldloca">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Stloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Localloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Endfilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Unaligned_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Volatile_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Tail_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Initobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Constrained_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Cpblk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Initblk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.No_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Rethrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Sizeof">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Refanytype">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Readonly_">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Array_Create">
            <summary>
            Instruction to create multidimensional array. The value will be Type reference to the matrix type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Array_Create_WithLowerBound">
            <summary>
            Instruction to create multidimensional array. The value will be Type reference to the matrix type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Array_Get">
            <summary>
            Instruction to read from element of a multidimensional array. The value will be Type reference to the matrix type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Array_Set">
            <summary>
            Instruction to store into element of a multidimensional array. The value will be Type reference to the matrix type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Array_Addr">
            <summary>
            Instruction to get the address of element of a multidimensional array. The value will be Type reference to the matrix type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCode.Invalid">
            <summary>
            Not a valid operation.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PInvokeCallingConvention">
            <summary>
            Calling convention for the PInvoke
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PInvokeCallingConvention.WinApi">
            <summary>
            Windows API call.
            Also platformapi in ilasm.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PInvokeCallingConvention.CDecl">
            <summary>
            Standard C style call.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PInvokeCallingConvention.StdCall">
            <summary>
            Standard C++ style call
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PInvokeCallingConvention.ThisCall">
            <summary>
            method accepts implicit this pointer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PInvokeCallingConvention.FastCall">
            <summary>
            C style fast call.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IWin32Resource">
            <summary>
            A resource file formatted according to Win32 API conventions and typically obtained from a Portable Executable (PE) file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.TypeName">
            <summary>
            A string that identifies what type of resource this is. Only valid if this.TypeId &lt; 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.TypeId">
            <summary>
            An integer tag that identifies what type of resource this is. If the value is less than 0, this.TypeName should be used instead.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.Name">
            <summary>
            The name of the resource. Only valid if this.Id &lt; 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.Id">
            <summary>
            An integer tag that identifies this resource. If the value is less than 0, this.Name should be used instead.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.LanguageId">
            <summary>
            The language for which this resource is appropriate.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.CodePage">
            <summary>
            The code page for which this resource is appropriate.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IWin32Resource.Data">
            <summary>
            The data of the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.OperationCheckFlags">
            <summary>
            Flags for IL No Operation
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCheckFlags.NoTypeCheck">
            <summary>
            No type check needs to be performed for next operation
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCheckFlags.NoRangeCheck">
            <summary>
            No range check needs to be performed for next operation
            </summary>
        </member>
        <member name="F:Microsoft.Cci.OperationCheckFlags.NoNullCheck">
            <summary>
            No null check needs to be performed for next operation
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPESection">
            <summary>
            A section of the PE file that does not contain any objects that can be referenced in another way
            using this object model. The data of such a section is not decompiled by metadata reader and 
            is written out unchanged by metadata writers. Presumably it is meaningful in some way and is 
            thus exposed for use by other tools.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.SectionName">
            <summary>
            The name of the section. Should be exactly eight characters long.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.Characteristics">
            <summary>
            A set of bits that describes the purpose of a section and how it behaves when loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.VirtualAddress">
            <summary>
            For executable images this is the address of the first byte of the section, when loaded into memory, relative to the image base. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.VirtualSize">
            <summary>
            Total size of the section in bytes. If this value is greater than SizeOfRawData, the section is zero-padded.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.SizeOfRawData">
            <summary>
            Size of the initialized data on disk in bytes, shall be a multiple of FileAlignment from the PE header.
            If this is less than VirtualSize the remainder of the section is zero filled.
            Because this field is rounded while the VirtualSize field is not it is possible for this to be greater than VirtualSize as well. 
            When a section contains only uninitialized data, this field should be 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPESection.Rawdata">
            <summary>
            The data, if any, with which the section will be initialized when loaded.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PESectionCharacteristics">
            <summary>
            A set of bits that describes the purpose of a section and how it behaves when loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.ContainsExecutableCode">
            <summary>
            Indicates this section contains machine instructions.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.ContainsInitializedData">
            <summary>
            Indicates this section will be initialized from the contents of the PE file when loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.ContainsUninitializedData">
            <summary>
            Indicates this section simply reserves an uninitialized address space in the loaded image of the PE file.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.IsExecutable">
            <summary>
            Indicates the part of the loaded PE file image that corresponds to this section will marked as being executable.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.IsReadable">
            <summary>
            Indicates the part of the loaded PE file image that corresponds to this section will marked as being readable.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionCharacteristics.IsWritable">
            <summary>
            Indicates the part of the loaded PE file image that corresponds to this section will marked as being writable.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PESectionKind">
            <summary>
            An enumeration indicating the section inside the PE File
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.Illegal">
            <summary>
            Section is unrecognized
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.ConstantData">
            <summary>
            Section for initialized constant data.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.CoverageData">
            <summary>
            Section for code coverage data.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.ExtendedData">
            <summary>
            Section for initialized writable data, called .datax rather than .sdata for some or other reason.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.StaticData">
            <summary>
            Section for intialized writable data.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.Text">
            <summary>
            Section for IL and Metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PESectionKind.ThreadLocalStorage">
            <summary>
            Section for initialized thread local storage.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedUnitSetNamespace">
            <summary>
            A unit set namespace that is nested inside another unit set namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INestedUnitSetNamespace.ContainingUnitSetNamespace">
            <summary>
            The unit set namespace that contains this member.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INestedAliasForType">
            <summary>
            Represents an alias type in a type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMethodImplementation">
            <summary>
            Models an explicit implementation or override of a base class virtual method or an explicit implementation of an interface method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMethodImplementation.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDefinition. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodImplementation.ContainingType">
            <summary>
            The type that is explicitly implementing or overriding the base class virtual method or explicitly implementing an interface method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodImplementation.ImplementedMethod">
            <summary>
            A reference to the method whose implementation is being provided or overridden.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IMethodImplementation.ImplementingMethod">
            <summary>
            A reference to the method that provides the implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IModifiedTypeReference">
            <summary>
            A type reference that has custom modifiers associated with it. For example a reference to the target type of a managed pointer to a constant.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModifiedTypeReference.CustomModifiers">
            <summary>
            Returns the list of custom modifiers associated with the type reference. Evaluate this property only if IsModified is true.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IModifiedTypeReference.UnmodifiedType">
            <summary>
            An unmodified type reference.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPointerType">
            <summary>
            This interface models the metadata representation of a pointer to a location in unmanaged memory.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPointerTypeReference">
            <summary>
            This interface models the metadata representation of a pointer to a location in unmanaged memory.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPointerTypeReference.TargetType">
            <summary>
            The type of value stored at the target memory location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IManagedPointerType">
            <summary>
            This interface models the metadata representation of a managed pointer.
            Remark: This should be only used in attributes. For other objects like Local variables etc
            there is explicit IsReference field that should be used.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IManagedPointerTypeReference">
            <summary>
            This interface models the metadata representation of a managed pointer.
            Remark: This should be only used in attributes. For other objects like Local variables etc
            there is explicit IsReference field that should be used.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IManagedPointerTypeReference.TargetType">
            <summary>
            The type of value stored at the target memory location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PrimitiveTypeCode">
            <summary>
            A enumeration of all of the value types that are built into the Runtime (and thus have specialized IL instructions that manipulate them).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Boolean">
            <summary>
            A single bit.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Char">
            <summary>
            An usigned 16 bit integer representing a Unicode UTF16 code point.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Int8">
            <summary>
            A signed 8 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Float32">
            <summary>
            A 32 bit IEEE floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Float64">
            <summary>
            A 64 bit IEEE floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Int16">
            <summary>
            A signed 16 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Int32">
            <summary>
            A signed 32 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Int64">
            <summary>
            A signed 64 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.IntPtr">
            <summary>
            A signed 32 bit integer or 64 bit integer, depending on the native word size of the underlying processor.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Pointer">
            <summary>
            A pointer to fixed or unmanaged memory.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Reference">
            <summary>
            A reference to managed memory.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.UInt8">
            <summary>
            An unsigned 8 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.UInt16">
            <summary>
            An unsigned 16 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.UInt32">
            <summary>
            An unsigned 32 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.UInt64">
            <summary>
            An unsigned 64 bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.UIntPtr">
            <summary>
            An unsigned 32 bit integer or 64 bit integer, depending on the native word size of the underlying processor.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Void">
            <summary>
            A type that denotes the absense of a value.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.NotPrimitive">
            <summary>
            Not a primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimitiveTypeCode.Invalid">
            <summary>
            Type is a dummy type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.TypeMemberVisibility">
            <summary>
            Enumerates the different kinds of levels of visibility a type member can have.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Default">
            <summary>
            The visibility has not been specified. Use the applicable default.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Assembly">
            <summary>
            The member is visible only within its own assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Family">
            <summary>
            The member is visible only within its own type and any subtypes.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.FamilyAndAssembly">
            <summary>
            The member is visible only within the intersection of its family (its own type and any subtypes) and assembly. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.FamilyOrAssembly">
            <summary>
            The member is visible only within the union of its family and assembly. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Other">
            <summary>
            The member is visible only to the compiler producing its assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Private">
            <summary>
            The member is visible only within its own type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Public">
            <summary>
            The member is visible everywhere its declaring type is visible.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeMemberVisibility.Mask">
            <summary>
            A mask that can be used to mask out flag bits when the latter are stored in the same memory word as this enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.TypeParameterVariance">
            <summary>
            Enumerates the different kinds of variance a generic method or generic type parameter may have.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeParameterVariance.NonVariant">
            <summary>
            Two type or method instances are compatible only if they have exactly the same type argument for this parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeParameterVariance.Covariant">
            <summary>
            A type or method instance will match another instance if it has a type for this parameter that is the same or a subtype of the type the
            other instance has for this parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeParameterVariance.Contravariant">
            <summary>
            A type or method instance will match another instance if it has a type for this parameter that is the same or a supertype of the type the
            other instance has for this parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.TypeParameterVariance.Mask">
            <summary>
            A mask that can be used to mask out flag bits when the latter are stored in the same memory word as the enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.LayoutKind">
            <summary>
            The layout on the type
            </summary>
        </member>
        <member name="F:Microsoft.Cci.LayoutKind.Auto">
            <summary>
            Layout is determines at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.LayoutKind.Sequential">
            <summary>
            Layout is sequential.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.LayoutKind.Explicit">
            <summary>
            Layout is specified explicitly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.StringFormatKind">
            <summary>
            Enum indicating the default string formatting in the type
            </summary>
        </member>
        <member name="F:Microsoft.Cci.StringFormatKind.Unspecified">
            <summary>
            Managed string marshalling is unspecified
            </summary>
        </member>
        <member name="F:Microsoft.Cci.StringFormatKind.Ansi">
            <summary>
            Managed strings are marshaled to and from Ansi.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.StringFormatKind.Unicode">
            <summary>
            Managed strings are marshaled to and from Unicode
            </summary>
        </member>
        <member name="F:Microsoft.Cci.StringFormatKind.AutoChar">
            <summary>
            Defined by underlying platform.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ModuleKind">
            <summary>
            The kind of metadata stored in the module. For example whether the module is an executable or a manifest resource file.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleKind.ConsoleApplication">
            <summary>
            The module is an executable with an entry point and has a console.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleKind.WindowsApplication">
            <summary>
            The module is an executable with an entry point and does not have a console.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleKind.DynamicallyLinkedLibrary">
            <summary>
            The module is a library of executable code that is dynamically linked into an application and called via the application.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleKind.ManifestResourceFile">
            <summary>
            The module contains no executable code. Its contents is a resource stream for the modules that reference it.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleKind.UnmanagedDynamicallyLinkedLibrary">
            <summary>
            The module is a library of executable code but contains no .NET metadata and is specific to a processor instruction set.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Machine">
            <summary>
            Target CPU types.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.Unknown">
            <summary>
            The target CPU is unknown or not specified.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.I386">
            <summary>
            Intel 386.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.R3000">
            <summary>
            MIPS little-endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.R4000">
            <summary>
            MIPS little-endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.R10000">
            <summary>
            MIPS little-endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.WCEMIPSV2">
            <summary>
            MIPS little-endian WCE v2
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.Alpha">
            <summary>
            Alpha_AXP
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.SH3">
            <summary>
            SH3 little-endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.SH3DSP">
            <summary>
            SH3 little-endian. DSP.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.SH3E">
            <summary>
            SH3E little-endian.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.SH4">
            <summary>
            SH4 little-endian.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.SH5">
            <summary>
            SH5.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.ARM">
            <summary>
            ARM Little-Endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.Thumb">
            <summary>
            Thumb.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.AM33">
            <summary>
            AM33
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.PowerPC">
            <summary>
            IBM PowerPC Little-Endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.PowerPCFP">
            <summary>
            PowerPCFP
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.IA64">
            <summary>
            Intel 64
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.MIPS16">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.Alpha64">
            <summary>
            ALPHA64
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.MIPSFPU">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.MIPSFPU16">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.AXP64">
            <summary>
            AXP64
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.Tricore">
            <summary>
            Infineon
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.CEF">
            <summary>
            CEF
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.EBC">
            <summary>
            EFI Byte Code
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.AMD64">
            <summary>
            AMD64 (K8)
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.M32R">
            <summary>
            M32R little-endian
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Machine.CEE">
            <summary>
            CEE
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UnitIdentity">
            <summary>
            An object containing information that identifies a unit of metadata such as an assembly or a module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitIdentity.#ctor(Microsoft.Cci.IName,System.String)">
            <summary>
            Allocates an object that identifies a unit of metadata. Can be just the name of the module, but can also include the location where the module is stored.
            </summary>
            <param name="name">The name of the identified unit.</param>
            <param name="location">The location where the unit is stored. Can be the empty string if the location is not known. The location need not be a file path.</param>
        </member>
        <member name="M:Microsoft.Cci.UnitIdentity.Equals(System.Object)">
            <summary>
            Returns true if the given object is an identifier that identifies the same object as this identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitIdentity.ComputeHashCode">
            <summary>
            Computes a hashcode based on the information in the identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitIdentity.GetHashCode">
            <summary>
            Returns a hashcode based on the information in the identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitIdentity.ToString">
            <summary>
            Returns a string that contains the information in the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitIdentity.Location">
            <summary>
            An indication of the location where the unit is or will be stored. Can be the empty string if the location is not known. This need not be a file system path. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitIdentity.Name">
            <summary>
            The name of the unit being identified.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AssemblyIdentity">
            <summary>
            An object that identifies a .NET assembly, using its name, culture, version, public key token, and location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ModuleIdentity">
            <summary>
            An object that identifies a .NET module. Can be just the name of the module, but can also include the location where the module is stored.
            If the module forms part of an assembly, the identifier of the assembly is also included.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.#ctor(Microsoft.Cci.IName,System.String)">
            <summary>
            Allocates an object that identifies a .NET module. Can be just the name of the module, but can also include the location where the module is stored.
            </summary>
            <param name="name">The name of the identified module.</param>
            <param name="location">The location where the module is stored. Can be the empty string if the location is not known. The location need not be a file path.</param>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.#ctor(Microsoft.Cci.IName,System.String,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Allocates an object that identifies a .NET module that forms part of an assembly.
            Can be just the name of the module along with the identifier of the assembly, but can also include the location where the module is stored.
            </summary>
            <param name="name">The name of the identified module.</param>
            <param name="location">The location where the module is stored. Can be the empty string if the location is not known. The location need not be a file path.</param>
            <param name="containingAssembly">The identifier of the assembly to which the identified module belongs. May be null.</param>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.Equals(System.Object)">
            <summary>
            Returns true if the given object is an identifier that identifies the same object as this identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.ComputeHashCode">
            <summary>
            Computes a hashcode from the name of the modules and the containing assembly (if applicable) or the location (if specified).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.GetHashCode">
            <summary>
            Returns a hashcode based on the information in the module identity.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleIdentity.ToString">
            <summary>
            Returns a string that contains the information in the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleIdentity.ContainingAssembly">
            <summary>
            The identity of the assembly to which the identified module belongs. May be null in the case of a module that is not part of an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.#ctor(Microsoft.Cci.IName,System.String,System.Version,System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Allocates an object that identifies a .NET assembly, using its name, culture, version, public key token, and location.
            </summary>
            <param name="name">The name of the identified assembly.</param>
            <param name="culture">Identifies the culture associated with the identified assembly. Typically used to identify sattelite assemblies with localized resources. 
            If the assembly is culture neutral, an empty string should be supplied as argument.</param>
            <param name="version">The version of the identified assembly.</param>
            <param name="publicKeyToken">The public part of the key used to sign the referenced assembly. May be empty if the identified assembly is not signed.</param>
            <param name="location">The location where the assembly is stored. Can be the empty string if the location is not known. The location need not be a file path.</param>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.#ctor(Microsoft.Cci.AssemblyIdentity,System.String)">
            <summary>
            Allocates an object that identifies a .NET assembly, using its name, culture, version, public key token, and location.
            </summary>
            <param name="template">An assembly identity to use a template for the new identity.</param>
            <param name="location">A location that should replace the location from the template.</param>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.Equals(System.Object)">
            <summary>
            Returns true if the given object is an identifier that identifies the same object as this identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.ComputeHashCode">
            <summary>
            Computes a hashcode from the name, version, culture and public key token of the assembly identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.GetHashCode">
            <summary>
            Returns a hashcode based on the information in the assembly identity.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyIdentity.ToString">
            <summary>
            Returns a string that contains the information in the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyIdentity.ContainingAssembly">
            <summary>
            The identity of the assembly to which the identified module belongs. May be null in the case of a module that is not part of an assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyIdentity.Culture">
            <summary>
            Identifies the culture associated with the identified assembly. Typically used to identify sattelite assemblies with localized resources.
            Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyIdentity.PublicKeyToken">
            <summary>
            The public part of the key used to sign the referenced assembly. Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyIdentity.Version">
            <summary>
            The version of the identified assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UnitSetIdentity">
            <summary>
            An object containing information that identifies a set of metadata units.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitSetIdentity.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Cci.UnitIdentity})">
            <summary>
            Allocates an object containing information that identifies a set of metadata units.
            </summary>
            <param name="units">An enumeration of identifiers of the units making up the identified set of units.</param>
        </member>
        <member name="P:Microsoft.Cci.UnitSetIdentity.Units">
            <summary>
            Enumerates the identifiers of the units making up the identified set of units.
            </summary>
        </member>
    </members>
</doc>
