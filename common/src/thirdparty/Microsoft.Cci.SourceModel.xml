<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.SourceModel</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Cci.SourceDummy.PrimarySourceLocation">
            <summary>
            This source location behaves as the notorious FeeFee: a source
            context which exists in the PDB file, but which debuggers do not
            stop at. It is needed, e.g., to mark the first IL operation in a
            method body if it does not have any real source location (such as
            compiler generated closure initialization code). Without that, the
            debugger appears to not step into method calls.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ICompilation">
            <summary>
            The root of an AST that represents the inputs, options and output of a compilation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ICompilation.Contains(Microsoft.Cci.ISourceDocument)">
            <summary>
            Returns true if the given source document forms a part of the compilation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ICompilation.GetUnitSetFor(Microsoft.Cci.IName)">
            <summary>
            Gets a unit set defined by the given name as specified by the compilation options. For example, the name could be an external alias
            in C# and the compilation options will specify which referenced assemblies correspond to the external alias.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICompilation.PlatformType">
            <summary>
            A collection of well known types that must be part of every target platform and that are fundamental to modeling compiled code.
            The types are obtained by querying the unit set of the compilation and thus can include types that are defined by the compilation itself.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICompilation.Result">
            <summary>
            The root of an AST that represents the output of a compilation. This can serve as an input to another compilation.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ICompilation.UnitSet">
            <summary>
            A set of units comprised by the result of the compilation along with all of the units referenced by this compilation.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPrimarySourceDocument">
            <summary>
            An object that represents a source document corresponding to a user accessible entity such as file.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceDocument">
            <summary>
            An object that represents a source document, such as a text file containing C# source code.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies no more than the specified number of characters to the destination character array, starting at the specified position in the source document.
            Returns the actual number of characters that were copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="position">The starting index to copy from. Must be greater than or equal to zero and position+length must be less than or equal to this.Length;</param>
            <param name="destination">The destination array.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Must be greater than 0 and less than or equal to the number elements of the destination array.</param>
        </member>
        <member name="M:Microsoft.Cci.ISourceDocument.GetCorrespondingSourceLocation(Microsoft.Cci.ISourceLocation)">
            <summary>
            Returns a source location in this document that corresponds to the given source location from a previous version
            of this document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceDocument.GetSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceDocument.GetText">
            <summary>
            Returns the source text of the document in string form. Each call may do significant work, so be sure to cache this.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceDocument.IsUpdatedVersionOf(Microsoft.Cci.ISourceDocument)">
            <summary>
            Returns true if this source document has been created by editing the given source document (or an updated
            version of the given source document).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceDocument.Length">
            <summary>
            The length of the source string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceDocument.SourceLanguage">
            <summary>
            The language that determines how the document is parsed and what it means.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceDocument.SourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IPrimarySourceDocument.GetPrimarySourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IPrimarySourceDocument.ToLineColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given (zero based) source position to a (one based) line and column, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, scanning restarts from the start.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceDocument.DocumentType">
            <summary>
            A Guid that identifies the kind of document to applications such as a debugger. Typically System.Diagnostics.SymbolStore.SymDocumentType.Text.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceDocument.Language">
            <summary>
            A Guid that identifies the programming language used in the source document. Typically used by a debugger to locate language specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceDocument.LanguageVendor">
            <summary>
            A Guid that identifies the compiler vendor programming language used in the source document. Typically used by a debugger to locate vendor specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceDocument.PrimarySourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.DummyPrimarySourceLocation">
            <summary>
            Instances of this class behave as the notorious FeeFee: a source
            context which exists in the PDB file, but which debuggers do not
            stop at. It is needed, e.g., to mark the first IL operation in a
            method body if it does not have any real source location (such as
            compiler generated closure initialization code). Without that, the
            debugger appears to not step into method calls.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IPrimarySourceLocation">
            <summary>
            A range of source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceLocation">
            <summary>
            A range of source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocation.Contains(Microsoft.Cci.ISourceLocation)">
            <summary>
            True if the source at the given location is completely contained by the source at this location.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocation.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters to the destination character array, starting at the specified offset from the start if the source location.
            Returns the number of characters actually copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="offset">The starting index to copy from. Must be greater than zero and less than this.Length.</param>
            <param name="destination">The destination array. Must have at least destinationOffset+length elements.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy.</param>
        </member>
        <member name="P:Microsoft.Cci.ISourceLocation.EndIndex">
            <summary>
            The character index after the last character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceLocation.Length">
            <summary>
            The number of characters in this source location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceLocation.SourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceLocation.Source">
            <summary>
            The source text corresponding to this location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceLocation.StartIndex">
            <summary>
            The character index of the first character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceLocation.EndColumn">
            <summary>
            The last column in the last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceLocation.EndLine">
            <summary>
            The last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceLocation.PrimarySourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceLocation.StartColumn">
            <summary>
            The first column in the first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IPrimarySourceLocation.StartLine">
            <summary>
            The first line of the range.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceDocumentEdit">
            <summary>
            An object that describes an edit to a source file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceDocumentEdit.SourceLocationBeforeEdit">
            <summary>
            The location in the source document that is being replaced by this edit.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ISourceDocumentEdit.SourceDocumentAfterEdit">
            <summary>
            The source document that is the result of applying this edit.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SemanticErrorReporter">
            <summary>
            A trivial class that implements the ISemanticErrorsReporter interface and exposes a singleton instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISemanticErrorsReporter">
            <summary>
            This interface is implemented by providers of semantic errors. That is, errors discovered by analysis of a constructed object model.
            Many of these errors will be discovered incrementally and as part of background activities.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SemanticErrorReporter.Instance">
            <summary>
            A singleton instance of an object that implements the ISemanticErrorsReporter interface.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceEditHostEnvironment">
            <summary>
            Provides an abstraction over the application hosting compilers based on this framework.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceEditHost">
            <summary>
            Provides a standard abstraction over the applications that host editing of source files based on this object model.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceEditHost.RegisterAsLatest(Microsoft.Cci.ICompilation)">
            <summary>
            Registers the output of the given compilation as the latest unit associated with unit's location.
            Such units can then be discovered by clients via GetUnit.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceEditHost.ReportEdits(Microsoft.Cci.EditEventArgs)">
            <summary>
            Raises the Edits event with the given edit event arguments. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceEditHost.ReportSymbolTableEdits(Microsoft.Cci.EditEventArgs)">
            <summary>
            Raises the SymbolTableEdits event with the given edit event arguments. 
            </summary>
        </member>
        <member name="E:Microsoft.Cci.ISourceEditHost.Edits">
            <summary>
            When an edit transaction has been completed, new compilations are computed for all affected compilations registered with this environment.
            For each affected compilation the difference between the new compilation and its previous version is reported via this event. 
            If the change involves a statement or expression the change shows up as a modified method declaration (or field declaration).
            </summary>
        </member>
        <member name="E:Microsoft.Cci.ISourceEditHost.SymbolTableEdits">
            <summary>
            When an edit transaction has been completed, new compilations are computed for all affected compilations registered with this environment.
            For each affected compilation the difference between the new compilation and its previous version is reported via this event. 
            Changes that are confined to method bodies (and thus do not affect the symbol table) are not reported via this event.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.#ctor(Microsoft.Cci.INameTable,Microsoft.Cci.IInternFactory,System.Byte,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Allocates an object that provides an abstraction over the application hosting compilers based on this framework.
            </summary>
            <param name="nameTable">
            A collection of IName instances that represent names that are commonly used during compilation.
            This is a provided as a parameter to the host environment in order to allow more than one host
            environment to co-exist while agreeing on how to map strings to IName instances.
            </param>
            <param name="factory">
            The intern factory to use when generating keys. When comparing two or more assemblies using
            TypeHelper, MemberHelper, etc. it is necessary to make the hosts use the same intern factory.
            </param>
            <param name="pointerSize">The size of a pointer on the runtime that is the target of the metadata units to be loaded
            into this metadta host. This parameter only matters if the host application wants to work out what the exact layout
            of a struct will be on the target runtime. The framework uses this value in methods such as TypeHelper.SizeOfType and
            TypeHelper.TypeAlignment. If the host application does not care about the pointer size it can provide 0 as the value
            of this parameter. In that case, the first reference to IMetadataHost.PointerSize will probe the list of loaded assemblies
            to find an assembly that either requires 32 bit pointers or 64 bit pointers. If no such assembly is found, the default is 32 bit pointers.
            </param>
            <param name="searchPaths">
            A collection of strings that are interpreted as valid paths which are used to search for units.
            </param>
            <param name="searchInGAC">
            Whether the GAC (Global Assembly Cache) should be searched when resolving references.
            </param>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.GetUnitSetFor(Microsoft.Cci.UnitSetIdentity)">
            <summary>
            Gets a unit set corresponding to the referenced unit set.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.UnitsAreTheSameObjects(System.Collections.Generic.List{Microsoft.Cci.IUnit},System.Collections.Generic.IEnumerable{Microsoft.Cci.IUnit})">
            <summary>
            Returns true if the given list of units has the same number of elements as the given enumeration of units and
            each corresponding element is the object.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.RegisterAsLatest(Microsoft.Cci.ICompilation)">
            <summary>
            Registers the output of the given compilation as the latest unit associated with the given location.
            Such units can then be discovered by clients via GetUnit. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.ReportEdits(Microsoft.Cci.EditEventArgs)">
            <summary>
            Raises the Edits event with the given edit event arguments. 
            The events are raised on different thread.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.ReportEditsUsingDifferentThread(System.Object)">
            <summary>
            Raises the Edits event with the given edit event arguments. 
            </summary>
            <param name="state">The edit event arguments.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.ReportSymbolTableEdits(Microsoft.Cci.EditEventArgs)">
            <summary>
            Raises the SymbolTableEdits event with the given edit event arguments.
            The events are raised on different thread.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditHostEnvironment.ReportSymbolTableEditsUsingDifferentThread(System.Object)">
            <summary>
            Raises the SymbolTableEdits event with the given edit event arguments.
            </summary>
            <param name="state">The edit event arguments.</param>
        </member>
        <member name="E:Microsoft.Cci.SourceEditHostEnvironment.Edits">
            <summary>
            When a source document that forms part of a compilation that is registered with this environment has been edited a new compilation is computed
            and the difference between the new compilation and its previous version is reported via this event. If the change involves a statement or expression
            the change shows up as a modified method declaration (or field declaration).
            </summary>
        </member>
        <member name="E:Microsoft.Cci.SourceEditHostEnvironment.SymbolTableEdits">
            <summary>
            When an edit transaction has been completed, new compilations are computed for all affected compilations registered with this environment.
            For each affected compilation the difference between the new compilation and its previous version is reported via this event. 
            Changes that are confined to method bodies (and thus do not affect the symbol table) are not reported via this event.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceDocumentEdit">
            <summary>
            An object that describes an edit to a source file.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentEdit.#ctor(Microsoft.Cci.ISourceLocation,Microsoft.Cci.ISourceDocument)">
            <summary>
            Allocates an object that describes an edit to a source file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentEdit.SourceLocationBeforeEdit">
            <summary>
            The location in the source document that is being replaced by this edit.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentEdit.SourceDocumentAfterEdit">
            <summary>
            The source document that is the result of applying this edit.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ErrorMessage">
            <summary>
            Error information relating to a portion of a source document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceErrorMessage">
            <summary>
            Error information relating to a portion of a source document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceErrorMessage.MakeShallowCopy(Microsoft.Cci.ISourceDocument)">
            <summary>
            Makes a copy of this error message, changing only Location and SourceLocation to come from the
            given source document. Returns the same instance if the given source document is the same
            as this.SourceLocation.SourceDocument.
            </summary>
            <param name="targetDocument">The document to which the resulting error message must refer.</param>
        </member>
        <member name="P:Microsoft.Cci.ISourceErrorMessage.SourceLocation">
            <summary>
            The location of the error in the source document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ErrorMessage.#ctor(Microsoft.Cci.ISourceLocation,System.Int64,System.String,System.String[])">
            <summary>
            Initializes an object providing error information relating to a portion of a source document.
            </summary>
            <param name="sourceLocation">The location of the error in the source document.</param>
            <param name="errorCode">A code that corresponds to this error. This code is the same for all cultures.</param>
            <param name="messageKey">A string that is used as the key when looking for the localized error message using a resource manager.</param>
            <param name="messageArguments">Zero or more strings that are to be subsituted for "{i}" sequences in the message string return by GetMessage.</param>
        </member>
        <member name="M:Microsoft.Cci.ErrorMessage.#ctor(Microsoft.Cci.ISourceLocation,System.Int64,System.String,System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation},System.String[])">
            <summary>
            Initializes an object providing error information relating to a portion of a source document.
            </summary>
            <param name="sourceLocation">The location of the error in the source document.</param>
            <param name="errorCode">A code that corresponds to this error. This code is the same for all cultures.</param>
            <param name="messageKey">A string that is used as the key when looking for the localized error message using a resource manager.</param>
            <param name="relatedLocations">Zero ore more locations that are related to this error.</param>
            <param name="messageArguments">Zero or more strings that are to be subsituted for "{i}" sequences in the message string return by GetMessage.</param>
        </member>
        <member name="F:Microsoft.Cci.ErrorMessage.EmptyLocations">
            <summary>
            A readonly list of ILocations with exactly 0 entries.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ErrorMessage.GetMessage(System.Resources.ResourceManager)">
            <summary>
            Obtains a localized message from the given resource manager and formats it using the message arguments associated with this error message.
            If no localized message corresponds to the message key of this message, the invariant culture is used.
            If no message corresponding to this error can be found then the message key itself is returned.
            </summary>
            <param name="rm">A resource manager corresponding to the current locale.</param>
        </member>
        <member name="M:Microsoft.Cci.ErrorMessage.MakeShallowCopy(Microsoft.Cci.ISourceDocument)">
            <summary>
            Makes a copy of this error message, changing only Location and SourceLocation to come from the
            given source document. Returns the same instance if the given source document is the same
            as this.SourceLocation.SourceDocument.
            </summary>
            <param name="targetDocument">The document to which the resulting error message must refer.</param>
        </member>
        <member name="M:Microsoft.Cci.ErrorMessage.MessageArguments">
            <summary>
            Zero or more strings that are to be subsituted for "{i}" sequences in the message string return by GetMessage.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.ErrorReporter">
            <summary>
            The object reporting the error. This can be used to filter out errors coming from non interesting sources.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.ErrorReporterIdentifier">
            <summary>
            A short identifier for the reporter of the error, suitable for use in human interfaces. For example "CS" in the case of a C# language error.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.Code">
            <summary>
            A code that corresponds to this error. This code is the same for all cultures.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.IsWarning">
            <summary>
            True if the error message should be treated as an informational warning rather than as an indication that the associated
            compilation has failed and no useful executable output has been generated. The value of this property does
            not depend solely on this.Code but can be influenced by compiler options such as the csc /warnaserror option.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.Message">
            <summary>
            A description of the error suitable for user interaction. Localized to the current culture.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.MessageKey">
            <summary>
            A string that is used as the key when looking for the localized error message using a resource manager.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.RelatedLocations">
            <summary>
            Zero ore more locations that are related to this error.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ErrorMessage.SourceLocation">
            <summary>
            The location of the error in the source document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.CompositeSourceDocument">
            <summary>
            An object that represents a source document that is the composition of an ordered enumeration of fragments from other source document.
            The document is parsed according to the rules of a particular language, such as C#, to produce an object model that can be obtained via the CompilationPart property.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceDocument">
            <summary>
            An object that represents a source document.
            The document is parsed according to the rules of a particular language, such as C#, to produce an object model that can be obtained via the CompilationPart property.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.#ctor(Microsoft.Cci.IName)">
            <summary>
            Allocates an object that represents a source document, such as a file, which is parsed according to the rules of a particular langauge, 
            such as C#, to produce an object model.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.#ctor(Microsoft.Cci.SourceDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates an object that represents a source document that is derived from another source document by replacing one substring with another.
            </summary>
            <param name="previousVersion">The source document on which the newly allocated document will be based.</param>
            <param name="position">The first character in the previous version of the new document that will be changed in the new document.</param>
            <param name="oldLength">The number of characters in the previous verion of the new document that will be changed in the new document.</param>
            <param name="newLength">The number of replacement characters in the new document. 
            (The length of the string that replaces the substring from position to position+length in the previous version of the new document.)</param>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.GetCorrespondingSourceLocation(Microsoft.Cci.ISourceLocation)">
            <summary>
            Returns a source location in this document that corresponds to the given source location in a previous version
            of this document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.GetSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.IsUpdatedVersionOf(Microsoft.Cci.ISourceDocument)">
            <summary>
            Returns true if this source document has been created by editing the given source document (or a updated
            version of the given source document).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SourceDocument.previousVersion">
            <summary>
            A weak reference to the previous version of this document. It can differ by at most one edit from this version.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SourceDocument.editStartIndex">
            <summary>
            The index of the first character of the string that has been replaced in the previous version in order to create this version.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SourceDocument.editNewLength">
            <summary>
            The length of the string that has replaced editStartIndex through editOldLength in the previous version in order to create this version.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SourceDocument.editOldLength">
            <summary>
            The length of the string that has been replaced in the previous version in order to create this version.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies no more than the specified number of characters to the destination character array, starting at the specified position in the source document.
            Returns the actual number of characters that were copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="position">The starting index to copy from. Must be greater than or equal to zero and position+length must be less than or equal to this.Length;</param>
            <param name="destination">The destination array.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Must be greater than 0 and less than or equal to the number elements of the destination array.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.GetText">
            <summary>
            Returns the source text of the document in string form. Each call may do significant work, so be sure to cache this.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocument.ToLineColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given (zero based) source position to a (one based) line and column, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, scanning restarts from the start.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocument.Length">
            <summary>
            The length of the source string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocument.Location">
            <summary>
            The location where this document was found, or where it should be stored. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocument.Name">
            <summary>
            The name of the document. For example the name of the file if the document corresponds to a file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocument.SourceLanguage">
            <summary>
            The language that determines how the document is parsed and what it means.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocument.SourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IDerivedSourceDocument">
            <summary>
            An object that represents a source document that has been derived from other source documents. 
            A derived source document does not have to correspond to a user accessible entity, in which case its
            name and location should not be used in user interaction.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IDerivedSourceDocument.GetDerivedSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IDerivedSourceDocument.GetPrimarySourceLocationsFor(Microsoft.Cci.IDerivedSourceLocation)">
            <summary>
            Returns zero or more primary source locations that correspond to the given derived location.
            </summary>
            <param name="derivedSourceLocation">A source location in this derived document</param>
        </member>
        <member name="P:Microsoft.Cci.IDerivedSourceDocument.DerivedSourceLocation">
            <summary>
            A location corresponding to the entire document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.#ctor(Microsoft.Cci.IName)">
            <summary>
            Allocates an object that represents a source document that is the composition of an ordered enumeration of fragments from other source document.
            The document is parsed according to the rules of a particular language, such as C#, to produce an object model that can be obtained via the CompilationPart property.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.#ctor(Microsoft.Cci.SourceDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates an object that represents a composite source document that is derived from another source document by replacing one substring with another.
            </summary>
            <param name="previousVersion">The source document on which the newly allocated document will be based.</param>
            <param name="position">The first character in the previous version of the new document that will be changed in the new document.</param>
            <param name="oldLength">The number of characters in the previous verion of the new document that will be changed in the new document.</param>
            <param name="newLength">The number of replacement characters in the new document. 
            (The length of the string that replaces the substring from position to position+length in the previous version of the new document.)</param>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies no more than the specified number of characters to the destination character array, starting at the specified position in the source document.
            Returns the actual number of characters that were copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="position">The starting index to copy from. Must be greater than or equal to zero and position+length must be less than or equal to this.Length;</param>
            <param name="destination">The destination array.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Must be greater than 0 and less than or equal to the number elements of the destination array.</param>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.currentFragmentOffset">
            <summary>
            The total number of characters in the fragments the precede this.fragmentEnumerator.Current.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.enumeratorIsValid">
            <summary>
            True if this.fragmentEnumerator is non null and if this.fragmentEnumerator.Current can be evaluated.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.fragmentEnumerator">
            <summary>
            An enumerator instance that is used to traverse through the enumerable returned by this.GetFragments(), during
            the course of multiple calls to CopyTo or ToLineColumn.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetDerivedSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetFragments">
            <summary>
            Returns an enumeration of fragments from other documents. The source of the enumeration could be a computation, such as a pre-processor.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetFragmentLocationsFor(Microsoft.Cci.ISourceLocation)">
            <summary>
            Returns an enumeration of fragments from other documents that together make up the given source location in this document.
            </summary>
            <param name="sourceLocation">A location in this document.</param>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetPrimarySourceLocationsFor(Microsoft.Cci.IDerivedSourceLocation)">
            <summary>
            Returns zero or more primary source locations that correspond to the given derived location.
            </summary>
            <param name="derivedSourceLocation">A source location in this derived document</param>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.GetText">
            <summary>
            Returns the source text of the document in string form. This call is expensive in time and space. Rather use CopyTo if at all possible.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.ToLineColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given (zero based) source position to a (one based) line and column, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, scanning restarts from the start.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CompositeSourceDocument.ToLineColumn(System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            Scans the given text string, incrementing line every time a new line sequence is encountered and incrementing column
            for every character scanned (resetting column to 1 every time line is incremented).
            </summary>
            <param name="position">The position at which to stop scanning.</param>
            <param name="line">The line counter to increment every time a new line sequence is encountered.</param>
            <param name="column">The column counter to increment for every character scanned and to reset to 1 every time a new line sequence is encountered.</param>
            <param name="text">The text to scan.</param>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.lineCounter">
            <summary>
            The line number computed during the last call to the routine. Initially set to 1.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.columnCounter">
            <summary>
            The column number computed during the last call to the routine. Initially set to 1.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CompositeSourceDocument.lastPosition">
            <summary>
            The position supplied to the last call of this routine. Initially set to 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.CompositeSourceDocument.Length">
            <summary>
            The length of the source string. Evaluating this property is expensive in time and space. Avoid evaluating it if at all possible. It is not necessary
            to evaluate this property if the text of this document is obtained via successive calls to CopyTo.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.CompositeSourceDocument.Location">
            <summary>
            The location where this document was found, or where it should be stored. 
            In this case, since the document is a composite of other documents, the result is always the empty string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.CompositeSourceDocument.SourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IncludedSourceLocation">
            <summary>
            A source location that falls inside a region of text that originally came from another source document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IIncludedSourceLocation">
            <summary>
            A source location that falls inside a region of text that originally came from another source document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IIncludedSourceLocation.OriginalEndLine">
            <summary>
            The last line of the source location in the original document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IIncludedSourceLocation.OriginalSourceDocumentName">
            <summary>
            The name of the document from which this text in this source location was orignally obtained.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IIncludedSourceLocation.OriginalStartLine">
            <summary>
            The first line of the source location in the original document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IncludedSourceLocation.#ctor(Microsoft.Cci.SourceDocumentWithInclusion,System.Int32,System.Int32)">
            <summary>
            Allocates a source location that falls inside a region of text that originally came from another source document.
            </summary>
            <param name="document">A document with a region of text that orignally came from another source document.</param>
            <param name="startIndex">The character index of the first character of this location, when treating the source document as a single string.</param>
            <param name="length">The number of characters in this source location.</param>
        </member>
        <member name="M:Microsoft.Cci.IncludedSourceLocation.Contains(Microsoft.Cci.ISourceLocation)">
            <summary>
            True if this source at the given location is completely contained by the source at this location.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IncludedSourceLocation.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters to the destination character array, starting at the specified offset from the start if the source location.
            </summary>
            <param name="offset">The starting index to copy from. Must be greater than zero and less than this.Length.</param>
            <param name="destination">The destination array. Must have at least destinationOffset+length elements.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Cannot be more than this.Length-position.</param>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.EndColumn">
            <summary>
            The last column in the last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.EndIndex">
            <summary>
            The character index after the last character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.EndLine">
            <summary>
            The last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.InclusionStartLine">
            <summary>
            The line number in the source document where the included region of text starts.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.Length">
            <summary>
            The number of characters in this source location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.OriginalSourceDocumentName">
            <summary>
            The name of the document from which this text in this source location was originally obtained.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.OriginalEndLine">
            <summary>
            The last line of the source location in the original document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.OriginalStartLine">
            <summary>
            The first line of the source location in the original document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.Source">
            <summary>
            The source text corresponding to this location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.StartColumn">
            <summary>
            The first column in the first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.StartIndex">
            <summary>
            The character index of the first character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.StartLine">
            <summary>
            The first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IncludedSourceLocation.SourceDocument">
            <summary>
            The document (with inclusion), containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.OriginalSourceLocation">
            <summary>
            A wrapper for a source location that is obtained from a region inside a primary source document that was
            in fact derived from another document, typically via a preprocessor #include directive. The wrapper
            makes the wrapped source location appear as if it were a location in the document that was included.
            This is useful for error reporting. For editing, the wrapped location is better.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.OriginalSourceLocation.#ctor(Microsoft.Cci.IIncludedSourceLocation)">
            <summary>
            Allocates a wrapper for a source location that is obtained from a region inside a primary source document that was
            in fact derived from another document, typically via a preprocessor #include directive. The wrapper
            makes the wrapped source location appear as if it were a location in the document that was included.
            This is useful for error reporting. For editing, the wrapped location is better.
            </summary>
            <param name="includedSourceLocation">A source location that falls inside a region of text that originally came from another source document.</param>
        </member>
        <member name="P:Microsoft.Cci.OriginalSourceLocation.EndColumn">
            <summary>
            The last column in the last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.OriginalSourceLocation.EndLine">
            <summary>
            The last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.OriginalSourceLocation.PrimarySourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            In this case, the result is always SourceDummy.PrimarySourceDocument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.OriginalSourceLocation.StartColumn">
            <summary>
            The first column in the first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.OriginalSourceLocation.StartLine">
            <summary>
            The first line of the range.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PrimarySourceDocument">
            <summary>
            An object that represents a source document that corresponds to a persistable artifact such as a file or an editor buffer.
            The document is parsed according to the rules of a particular language, such as C#, to produce an object model that can be obtained via the CompilationPart property.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.#ctor(Microsoft.Cci.IName,System.String,System.IO.StreamReader)">
            <summary>
            Allocates an object that represents a source document, such as file, which is parsed according to the rules of a particular langauge, 
            such as C#, to produce an object model.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
            <param name="location">The location where the document was found or where it will be stored.</param>
            <param name="streamReader">A StreamReader instance whose BaseStream produces the contents of the document.</param>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.#ctor(Microsoft.Cci.IName,System.String,System.String)">
            <summary>
            Allocates an object that represents a source document, such as file, which is parsed according to the rules of a particular langauge, 
            such as C#, to produce an object model.
            </summary>
            <param name="name">The name of the document. Used to identify the document in user interaction.</param>
            <param name="location">The location where the document was found or where it will be stored.</param>
            <param name="text">The source text of the document.</param>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.#ctor(System.String,Microsoft.Cci.SourceDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates an object that represents a primary source document that is derived from another source document by replacing one substring with another.
            </summary>
            <param name="text">The text content of new document.</param>
            <param name="previousVersion">The source document on which the newly allocated document will be based.</param>
            <param name="position">The first character in the previous version of the new document that will be changed in the new document.</param>
            <param name="oldLength">The number of characters in the previous verion of the new document that will be changed in the new document.</param>
            <param name="newLength">The number of replacement characters in the new document. 
            (The length of the string that replaces the substring from position to position+length in the previous version of the new document.)</param>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.#ctor(Microsoft.Cci.PrimarySourceDocument)">
            <summary>
            Allocates a copy of the given source document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies no more than the specified number of characters to the destination character array, starting at the specified position in the source document.
            Returns the actual number of characters that were copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="position">The starting index to copy from. Must be greater than or equal to zero and position+length must be less than or equal to this.Length;</param>
            <param name="destination">The destination array.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Must be greater than 0 and less than or equal to the number elements of the destination array.</param>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.GetPrimarySourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a primary source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.GetSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.GetText">
            <summary>
            Returns the source text of the document in string form. Each call may do significant work, so be sure to cache this.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.text">
            <summary>Caches the entire text of the source document.</summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.streamReader">
            <summary>
            A stream reader that is used to obtain the contents of the document in piecemeal fashion. A stream reader can only advance.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.buffer">
            <summary>
            A buffer that serves as a convenient window on the last 8096 (or fewer) characters that were read in from the stream reader. 
            Provides an approximation of random access on the underlying stream.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.charsInBuffer">
            <summary>
            The number of characters in the buffer that came from the stream. Normally 8096, but will be fewer when the end of the stream has been reached.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.streamReaderPosition">
            <summary>
            The number of characters that have already been read from the stream reader. 
            I.e. the index of the next character that will be returned by a call to this.streamReader.Peek().
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.SetStreamReaderPositionTo(System.Int32)">
            <summary>
            Advances or resets the stream reader so that this.buffer (the current window on the stream) spans the given position.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.ToLineColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given (zero based) source position to a (one based) line and column, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, we use backward scanning.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
            <remarks>This method behaves badly when applied to a really large file since it loads the entire file in memory as a UTF16 unicode string.
            In such cases, a slower implementation based on streaming would be more appropriate. However, it is assumed that getting source context
            information from such really large files is an extremely rare event and that bad performance in such cases is better than degraded performance
            in the common case.</remarks>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.ToPosition(System.Int32,System.Int32)">
            <summary>
            Maps a one based line and column pair to a zero based character position, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, scanning restarts from the start.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
            <remarks>This method behaves badly when applied to a really large file since it loads the entire file in memory as a UTF16 unicode string.
            In such cases, a slower implementation based on streaming would be more appropriate. However, it is assumed that getting source context
            information from such really large files is an extremely rare event and that bad performance in such cases is better than degraded performance
            in the common case.</remarks>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.FindBestStartPointForPosition(System.Int32)">
            <summary>
            From the set of stored states for position/(line,column) conversion, find the one that is closed to position
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceDocument.FindBestStartPointForLine(System.Int32)">
            <summary>
            From the set of stored states for position/(line,column) conversion, find the one that is closed to line
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.lineCounters">
            <summary>
            The line number computed during the last call to the routine. Initially set to 1.
            For non-linear access to position information, keep multiple state sets to reduce
            jumping around in the file.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.columnCounters">
            <summary>
            The column number computed during the last call to the routine. Initially set to 1.
            For non-linear access to position information, keep multiple state sets to reduce
            jumping around in the file.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.PrimarySourceDocument.lastPositions">
            <summary>
            The position supplied to the last call of this routine. Initially set to 0.
            For non-linear access to position information, keep multiple state sets to reduce
            jumping around in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.DocumentType">
            <summary>
            A Guid that identifies the kind of document to applications such as a debugger. Typically System.Diagnostics.SymbolStore.SymDocumentType.Text.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.Language">
            <summary>
            A Guid that identifies the programming language used in the source document. Typically used by a debugger to locate language specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.LanguageVendor">
            <summary>
            A Guid that identifies the compiler vendor programming language used in the source document. Typically used by a debugger to locate vendor specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.Length">
            <summary>
            The length of the source string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.Location">
            <summary>
            The location where this document was found, or where it should be stored. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceDocument.SourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceDocumentWithInclusion">
            <summary>
            An object that represents a primary source document that has a region of text that originally came from another source document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.#ctor(Microsoft.Cci.IPrimarySourceDocument,System.Int32,System.String,System.Int32)">
            <summary>
            Allocates an object that represents a primary source document that has a region of text that originally came from another source document.
            </summary>
            <param name="wrappedDocument">A primary source document that has an inclusion (but does not know about it).</param>
            <param name="originalLineNumber">The starting line number that the included region of text has in the the document it originated from.</param>
            <param name="originalDocumentName">The name of the document from which the included region of text has originated.</param>
            <param name="startingPositionOfIncludedRegion">The position in the wrapped document where the included region starts.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.GetPrimarySourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.GetSourceLocation(System.Int32,System.Int32)">
            <summary>
            Obtains a source location instance that corresponds to the substring of the document specified by the given start position and length.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies no more than the specified number of characters to the destination character array, starting at the specified position in the source document.
            Returns the actual number of characters that were copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="position">The starting index to copy from. Must be greater than or equal to zero and position+length must be less than or equal to this.Length;</param>
            <param name="destination">The destination array.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Must be greater than 0 and less than or equal to the number elements of the destination array.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.GetCorrespondingSourceLocation(Microsoft.Cci.ISourceLocation)">
            <summary>
            Returns a source location in this document that corresponds to the given source location from a previous version
            of this document.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.GetText">
            <summary>
            Returns the source text of the document in string form. Each call may do significant work, so be sure to cache this.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.IsUpdatedVersionOf(Microsoft.Cci.ISourceDocument)">
            <summary>
            Returns true if this source document has been created by editing the given source document (or a updated
            version of the given source document).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceDocumentWithInclusion.ToLineColumn(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given (zero based) source position to a (one based) line and column, by scanning the source character by character, counting
            new lines until the given source position is reached. The source position and corresponding line+column are remembered and scanning carries
            on where it left off when this routine is called next. If the given position precedes the last given position, scanning restarts from the start.
            Optimal use of this method requires the client to sort calls in order of position.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.OriginalDocumentName">
            <summary>
            The name of the document from which the included region of text has originated.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.OriginalLineNumber">
            <summary>
            The starting line number that the included region of text has in the in the document it originated from.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.StartingPositionOfIncludedRegion">
            <summary>
            The position in the document where the included region of text starts.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.WrappedDocument">
            <summary>
            A source document that has an inclusion (but does not know about it).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.DocumentType">
            <summary>
            A Guid that identifies the kind of document to applications such as a debugger. Typically System.Diagnostics.SymbolStore.SymDocumentType.Text.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.Language">
            <summary>
            A Guid that identifies the programming language used in the source document. Typically used by a debugger to locate language specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.LanguageVendor">
            <summary>
            A Guid that identifies the compiler vendor programming language used in the source document. Typically used by a debugger to locate vendor specific logic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.SourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.Length">
            <summary>
            The length of the source string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.SourceLanguage">
            <summary>
            The language that determines how the document is parsed and what it means.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.PrimarySourceLocation">
            <summary>
            A source location corresponding to the entire document.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.Location">
            <summary>
            The location where this document was found, or where it should be stored.
            This will also uniquely identify the source docuement within an instance of compilation host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceDocumentWithInclusion.Name">
            <summary>
            The name of the document. For example the name of the file if the document corresponds to a file.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceLocation">
            <summary>
            A range of source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Allocates a range of source text that corresponds to an identifiable entity.
            </summary>
            <param name="startIndex">The character index of the first character of this location, when treating the source document as a single string.</param>
            <param name="length">The number of characters in this source location.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceLocation.Contains(Microsoft.Cci.ISourceLocation)">
            <summary>
            True if this source at the given location is completely contained by the source at this location.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocation.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters to the destination character array, starting at the specified offset from the start if the source location.
            Returns the number of characters actually copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="offset">The starting index to copy from. Must be greater than zero and less than this.Length.</param>
            <param name="destination">The destination array. Must have at least destinationOffset+length elements.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Cannot be more than this.Length-position.</param>
        </member>
        <member name="P:Microsoft.Cci.SourceLocation.EndIndex">
            <summary>
            The character index after the last character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceLocation.Length">
            <summary>
            The number of characters in this source location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceLocation.Source">
            <summary>
            The source text corresponding to this location.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceLocation.SourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceLocation.StartIndex">
            <summary>
            The character index of the first character of this location, when treating the source document as a single string.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.DerivedSourceLocation">
            <summary>
            A range of source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IDerivedSourceLocation">
            <summary>
            A range of derived source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IDerivedSourceLocation.DerivedSourceDocument">
            <summary>
            The document containing the derived source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IDerivedSourceLocation.PrimarySourceLocations">
            <summary>
            A non empty collection of locations in primary source documents that together constitute this source location.
            The text of this location is the concatenation of the texts of each of the primary source locations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.DerivedSourceLocation.#ctor(Microsoft.Cci.IDerivedSourceDocument,System.Int32,System.Int32)">
            <summary>
            Allocates a range of source text that corresponds to an identifiable entity.
            </summary>
            <param name="derivedSourceDocument">The document containing the source text of which this location is a subrange.</param>
            <param name="startIndex">The character index of the first character of this location, when treating the source document as a single string.</param>
            <param name="length">The number of characters in this source location.</param>
        </member>
        <member name="P:Microsoft.Cci.DerivedSourceLocation.DerivedSourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.DerivedSourceLocation.SourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PrimarySourceLocation">
            <summary>
            A range of source text that corresponds to an identifiable entity.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PrimarySourceLocation.#ctor(Microsoft.Cci.IPrimarySourceDocument,System.Int32,System.Int32)">
            <summary>
            Allocates a range of source text that corresponds to an identifiable entity.
            </summary>
            <param name="primarySourceDocument">The document containing the source text of which this location is a subrange.</param>
            <param name="startIndex">The character index of the first character of this location, when treating the source document as a single string.</param>
            <param name="length">The number of characters in this source location.</param>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.EndColumn">
            <summary>
            The last column in the last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.EndLine">
            <summary>
            The last line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.PrimarySourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.SourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.StartColumn">
            <summary>
            The first column in the first line of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PrimarySourceLocation.StartLine">
            <summary>
            The first line of the range.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceLocationSpanningEntirePrimaryDocument">
            <summary>
            A source location that spans entire primary source document, but that delays computing this.Length until needed so that the document can be streamed.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationSpanningEntirePrimaryDocument.#ctor(Microsoft.Cci.IPrimarySourceDocument)">
            <summary>
            Allocates source location that spans entire primary source document, but that delays computing this.Length until needed so that the document can be streamed.
            </summary>
            <param name="primarySourceDocument">The document that the resulting source location spans.</param>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationSpanningEntirePrimaryDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters to the destination character array, starting at the specified offset from the start if the source location.
            Returns the number of characters actually copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="offset">The starting index to copy from. Must be greater than zero and less than this.Length.</param>
            <param name="destination">The destination array. Must have at least destinationOffset+length elements.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Cannot be more than this.Length-position.</param>
        </member>
        <member name="P:Microsoft.Cci.SourceLocationSpanningEntirePrimaryDocument.Length">
            <summary>
            The number of characters in this source location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceLocationSpanningEntireDerivedSourceDocument">
            <summary>
            A source location that spans entire derived source document, but that delays computing this.Length until needed so that the document can be streamed.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationSpanningEntireDerivedSourceDocument.#ctor(Microsoft.Cci.IDerivedSourceDocument)">
            <summary>
            Allocates a source location that spans entire derived source document, but that delays computing this.Length until needed so that the document can be streamed.
            </summary>
            <param name="derivedSourceDocument"></param>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationSpanningEntireDerivedSourceDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of characters to the destination character array, starting at the specified offset from the start if the source location.
            Returns the number of characters actually copied. This number will be greater than zero as long as position is less than this.Length.
            The number will be precisely the number asked for unless there are not enough characters left in the document.
            </summary>
            <param name="offset">The starting index to copy from. Must be greater than zero and less than this.Length.</param>
            <param name="destination">The destination array. Must have at least destinationOffset+length elements.</param>
            <param name="destinationOffset">The starting index where the characters must be copied to in the destination array.</param>
            <param name="length">The maximum number of characters to copy. Cannot be more than this.Length-position.</param>
        </member>
        <member name="P:Microsoft.Cci.SourceLocationSpanningEntireDerivedSourceDocument.Length">
            <summary>
            The number of characters in this source location.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.EditDescriptor">
            <summary>
            Describes an edit to a compilation as being either the addition, deletion or modification of a definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IEditDescriptor">
            <summary>
            Describes an edit to a compilation as being either the addition, deletion or modification of a definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.AffectedDefinition">
            <summary>
            The definition that has been added, deleted or modified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.Kind">
            <summary>
            The kind of edit that has been performed (addition, deletion or modification).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.ModifiedSourceDocument">
            <summary>
            The source document that is the result of the edit described by this edit instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.ModifiedParent">
            <summary>
            The new version of the parent of the affected definition (see also this.OriginalParent).
            If the edit is an addition or modification, this.ModifiedParent is the actual parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.ModifiedParent is the same as this.AffectedDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.OriginalSourceDocument">
            <summary>
            The source document that has been edited as described by this edit instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IEditDescriptor.OriginalParent">
            <summary>
            The original parent of the affected definition (see also this.ModifiedParent). 
            If the edit is a deletion, this.OriginalParent is the parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.OriginalParent is the same as this.AffectedDefinition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.EditDescriptor.#ctor(Microsoft.Cci.EditEventKind,Microsoft.Cci.IDefinition,Microsoft.Cci.IDefinition,Microsoft.Cci.IDefinition,Microsoft.Cci.ISourceDocument,Microsoft.Cci.ISourceDocument)">
            <summary>
            Allocates an object that describes an edit to a compilation as being either the addition, deletion or modification of a definition.
            </summary>
            <param name="kind">The kind of edit that has been performed (addition, deletion or modification).</param>
            <param name="affectedDefinition">The definition that has been added, deleted or modified.</param>
            <param name="modifiedParent">The new version of the parent of the affected definition (see also this.OriginalParent).
            If the edit is an addition or modification, this.ModifiedParent is the actual parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.ModifiedParent is the same as this.AffectedDefinition.</param>
            <param name="originalParent">The original parent of the affected definition (see also this.ModifiedParent). 
            If the edit is a deletion, this.OriginalParent is the parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.OriginalParent is the same as this.AffectedDefinition.</param>
            <param name="modifiedSourceDocument">The source document that is the result of the edit described by this edit instance.</param>
            <param name="originalSourceDocument">The source document that has been edited as described by this edit instance.</param>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.AffectedDefinition">
            <summary>
            The definition that has been added, deleted or modified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.Kind">
            <summary>
            The kind of edit that has been performed (addition, deletion or modification).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.ModifiedSourceDocument">
            <summary>
            The compilation part that is the result of the edit described by this edit instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.ModifiedParent">
            <summary>
            The new version of the parent of the affected definition (see also this.OriginalParent).
            If the edit is an addition or modification, this.ModifiedParent is the actual parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.ModifiedParent is the same as this.AffectedDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.OriginalSourceDocument">
            <summary>
            The source document that has been edited as described by this edit instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditDescriptor.OriginalParent">
            <summary>
            The original parent of the affected definition (see also this.ModifiedParent). 
            If the edit is a deletion, this.OriginalParent is the parent of this.AffectedDefinition.
            If this.AffectedDefinition does not have a parent then this.OriginalParent is the same as this.AffectedDefinition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceLocationBuilder">
            <summary>
            A mutable class that allows a source location to be built in an incremental fashion.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationBuilder.#ctor(Microsoft.Cci.ISourceLocation)">
            <summary>
            Allocates a mutable class that allows a source location to be built in an incremental fashion.
            </summary>
            <param name="sourceLocation">An initial source location.</param>
        </member>
        <member name="F:Microsoft.Cci.SourceLocationBuilder.length">
            <summary>
            The current length of the source location being built.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.SourceLocationBuilder.startIndex">
            <summary>
            The current startIndex of the source location being built.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationBuilder.UpdateToSpan(Microsoft.Cci.ISourceLocation)">
            <summary>
            Make the smallest update to the current start index and/or length so that the value of this.GetSourceLocation resulting from a subsequent call will span the given source location.
            </summary>
            <param name="sourceLocation"></param>
        </member>
        <member name="M:Microsoft.Cci.SourceLocationBuilder.GetSourceLocation">
            <summary>
            Returns a source location that spans the initial source location and any other source locations subsequently provided via calls to this.UpdateToSpan.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceLocationBuilder.SourceDocument">
            <summary>
            The document containing the source text of which this location is a subrange.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.EditEventArgs">
            <summary>
            Supplies information about an edit that has been performed on a source document that forms part of a compilation that is registered with this environment.
            The information is supplied in the form of a list of namespace or type declaration members that have been modified, added to or deleted from
            their containing namespace or type declarations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.EditEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Cci.IEditDescriptor})">
            <summary>
            Allocates an object that supplies information about an edit that has been performed on a source document that forms part of a compilation that is registered with this environment.
            The information is supplied in the form of a list of namespace or type declaration members that have been modified, added to or deleted from
            their containing namespace or type declarations.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.EditEventArgs.Edits">
            <summary>
            A list of descriptors that collectively describe the edit that has caused this event.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.EditEventKind">
            <summary>
            Describes the kind of edit that has been performed on a unit of metadata (also known as a symbol table).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.EditEventKind.Addition">
            <summary>
            The affected namespace or type member has been added to its parent namespace or type.
            Of necessity, the (immutable) affected member is the result of the edit.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.EditEventKind.Deletion">
            <summary>
            The affected namespace or type member has been deleted from its parent namespace or type.
            Of necessity, the (immutable) affected member is from a model that precedes the edit and will be absent
            from the model that resulted from the edit.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.EditEventKind.Modification">
            <summary>
            The edit has resulted in a change to the affected namespace or type member, such as a change its name or visibility.
            The affeced member of the edit descriptor is the member after the edit has been applied.
            Note: a namespace or type declaration member is not considered to be modified if the change is confined to a child member. 
            In that case, the change event will be generated only for the child member.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISymbolSyntaxErrorsReporter">
            <summary>
            Interface implemented by providers of syntax (parse) errors that occur in the symbol table level constructs
            of a source file. In particular, syntax errors that occur inside method bodies are not reported.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISyntaxErrorsReporter">
            <summary>
            Interface implemented by providers of syntax (parse) errors.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ISourceLocationProvider">
            <summary>
            An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. 
            For example, a PDB reader that maps offsets in an IL stream to source locations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocationProvider.GetPrimarySourceLocationsFor(System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation})">
            <summary>
            Return zero or more locations in primary source documents that correspond to one or more of the given derived (non primary) document locations.
            </summary>
            <param name="locations">Zero or more locations in documents that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocationProvider.GetPrimarySourceLocationsFor(Microsoft.Cci.ILocation)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the given derived (non primary) document location.
            </summary>
            <param name="location">A location in a document that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocationProvider.GetPrimarySourceLocationsForDefinitionOf(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the definition of the given local.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ISourceLocationProvider.GetSourceNameFor(Microsoft.Cci.ILocalDefinition,System.Boolean@)">
            <summary>
            Returns the source name of the given local definition, if this is available. 
            Otherwise returns the value of the Name property and sets isCompilerGenerated to true.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILocalScope">
            <summary>
            A range of CLR IL operations that comprise a lexical scope, specified as an IL offset and a length.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalScope.Offset">
            <summary>
            The offset of the first operation in the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalScope.Length">
            <summary>
            The length of the scope. Offset+Length equals the offset of the first operation outside the scope, or equals the method body length.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILocalScope.MethodDefinition">
            <summary>
            The definition of the method in which this local scope is defined.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILocalScopeProvider">
            <summary>
            An object that can provide information about the local scopes of a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes, each defining an IL range in which an iterator local is defined.
            The scopes are returned by the MoveNext method of the object returned by the iterator method.
            The index of the scope corresponds to the index of the local. Specifically local scope i corresponds
            to the local stored in field &lt;localName&gt;x_i of the class used to store the local values in between
            calls to MoveNext.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes into which the CLR IL operations in the given method body is organized.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local constant definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local variable definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILocalScopeProvider.IsIterator(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns true if the method body is an iterator.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.INamespaceScope">
            <summary>
            A description of the lexical scope in which a namespace type has been nested. This scope is tied to a particular
            method body, so that partial types can be accommodated.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.INamespaceScope.UsedNamespaces">
            <summary>
            Zero or more used namespaces. These correspond to using clauses in C#.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IUsedNamespace">
            <summary>
            A namespace that is used (imported) inside a namespace scope.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUsedNamespace.Alias">
            <summary>
            An alias for a namespace. For example the "x" of "using x = y.z;" in C#. Empty if no alias is present.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.IUsedNamespace.NamespaceName">
            <summary>
            The name of a namepace that has been aliased.  For example the "y.z" of "using x = y.z;" or "using y.z" in C#.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SourceEditEventArgs">
            <summary>
            Supplies information about edits that have been performed on source documents that form part of compilations that are registered with this environment.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SourceEditEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Cci.ISourceDocumentEdit})">
            <summary>
            Allocates an object that supplies information about edits that have been performed on source documents that form part of compilations that are registered with this environment.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SourceEditEventArgs.Edits">
            <summary>
            A list of edits to source documents that have occurred as a single event.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AggregatingSourceLocationProvider">
            <summary>
            A provider that aggregates a set of providers in order to
            map offsets in an IL stream to source locations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.#ctor(System.Collections.Generic.IDictionary{Microsoft.Cci.IUnit,Microsoft.Cci.ISourceLocationProvider})">
            <summary>
            Copies the contents of the table
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.#ctor(System.Collections.Generic.Dictionary{Microsoft.Cci.IUnit,Microsoft.Cci.ISourceLocationProvider})">
            <summary>
            Uses the given dictionary to find the appropriate provider for a query.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.GetPrimarySourceLocationsFor(System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation})">
            <summary>
            Return zero or more locations in primary source documents that correspond to one or more of the given derived (non primary) document locations.
            </summary>
            <param name="locations">Zero or more locations in documents that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.GetPrimarySourceLocationsFor(Microsoft.Cci.ILocation)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the given derived (non primary) document location.
            </summary>
            <param name="location">A location in a document that have been derived from one or more source documents.</param>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.GetPrimarySourceLocationsForDefinitionOf(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Return zero or more locations in primary source documents that correspond to the definition of the given local.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.GetSourceNameFor(Microsoft.Cci.ILocalDefinition,System.Boolean@)">
            <summary>
            Returns the source name of the given local definition, if this is available.
            Otherwise returns the value of the Name property and sets isCompilerGenerated to true.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.Dispose">
            <summary>
            Disposes all aggregated providers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingSourceLocationProvider.Finalize">
            <summary>
            Disposes all aggregated providers that implement the IDisposable interface. 
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AggregatingLocalScopeProvider">
            <summary>
            A provider that aggregates a set of providers in order to
            map offsets in an IL stream to block scopes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.#ctor(System.Collections.Generic.IDictionary{Microsoft.Cci.IUnit,Microsoft.Cci.ILocalScopeProvider})">
            <summary>
            Copies the contents of the table
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.#ctor(System.Collections.Generic.Dictionary{Microsoft.Cci.IUnit,Microsoft.Cci.ILocalScopeProvider})">
            <summary>
            Uses the given dictionary to find the appropriate provider for a query.
            </summary>
            <param name="unit2ProviderMap"></param>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes, each defining an IL range in which an iterator local is defined.
            The scopes are returned by the MoveNext method of the object returned by the iterator method.
            The index of the scope corresponds to the index of the local. Specifically local scope i corresponds
            to the local stored in field &lt;localName&gt;x_i of the class used to store the local values in between
            calls to MoveNext.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes into which the CLR IL operations in the given method body is organized.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local constant definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local variable definitions that are local to the given scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.IsIterator(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns true if the method body is an iterator.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.Dispose">
            <summary>
            Calls Dispose on all aggregated providers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatingLocalScopeProvider.Finalize">
            <summary>
            Finalizer for the aggregrating local scope provider. Calls Dispose on
            all aggregated providers.
            </summary>
        </member>
    </members>
</doc>
