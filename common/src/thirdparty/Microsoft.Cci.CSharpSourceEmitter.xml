<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.CSharpSourceEmitter</name>
    </assembly>
    <members>
        <member name="T:CSharpSourceEmitter.SourceEmitter">
            <summary>
            Prints out C# source corresponding to CCI nodes as they are visited.
            </summary>
            <remarks>
            Extenders can modify the output by overriding Traverse or Print* methods.
            This is a rather ugly and somewhat inflexible model.  A better approach would be to transform
            the CCI object model into a C# AST (parse tree), then let extenders mutate that model before 
            running a very simple visitor that prints it out as text.
            </remarks>
        </member>
        <member name="T:CSharpSourceEmitter.ICSharpSourceEmitter">
            <summary>
            This interface is a placeholder only (for now).
            We would like to derive this interface automatically from an annotated grammar file (X.language).
            This interface will reflect closely the grammar productions so that the code emitter stays
            in sync with the parser. For example, it will define methods signatures like these:
            
                ...
                void PrintMethodDefinitionModifiers(IMethodDefinition methodDefinition);
                void PrintMethodDefinitionVisibility(IMethodDefinition methodDefinition);
                void PrintMethodDefinitionName(IMethodDefinition methodDefinition);
                void PrintMethodDefinitionParameters(IMethodDefinition methodDefinition);
                ...
            
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.SourceEmitter.PrintPseudoCustomAttribute(Microsoft.Cci.IReference,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Prints out a C# attribute which doesn't actually exist as an attribute in the metadata.
            </summary>
            <remarks>
            Perhaps callers should instead construct an ICustomAttribute instance (using some helpers), then they could just
            call PrintAttribute.
            </remarks>
        </member>
        <member name="P:CSharpSourceEmitter.ISourceEmitterOutput.CurrentLineEmpty">
            <summary>
            Indicates whether anything has been written to the current line yet
            </summary>
        </member>
        <member name="E:CSharpSourceEmitter.ISourceEmitterOutput.LineStart">
            <summary>
            Invoked at the start of a new non-empty line, just before writing the indent
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.Utils.IsMscorlibTypeNamed(Microsoft.Cci.ITypeReference,System.String)">
            <summary>
            True if the specified type is defined in mscorlib and has the specified name
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.Utils.GetHiddenBaseClassMethod(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns the method from the closest base class that is hidden by the given method according to C# rules.
            If the method is an interface method definition, then look at it's base interfaces
            If no such method exists, Dummy.MethodDefinition is returned.
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.Utils.GetHiddenField(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns the field from the closest base class that is hidden by the given field according to C# rules.
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.Utils.GetAttributeType(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Determine if the specified attribute is of a special type, and if so return a code representing it.
            This is usefull for types not alread in IPlatformType
            </summary>
        </member>
        <member name="M:CSharpSourceEmitter.Utils.FindAttribute(System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomAttribute},CSharpSourceEmitter.SpecialAttribute)">
            <summary>
            IF an attribute of the specified special type exists in the sequence, return it.  Otherwise return null.
            </summary>
        </member>
        <member name="T:CSharpSourceEmitter.SpecialAttribute">
            <summary>
            Identifiers for some common attribute types
            </summary>
        </member>
    </members>
</doc>
