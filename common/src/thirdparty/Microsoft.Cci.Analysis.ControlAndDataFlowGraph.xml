<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.Analysis.ControlAndDataFlowGraph</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Cci.Analysis.ControlFlowInferencer`2.SetupControlFlow(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.DataFlowInferencer`2.SetupDataFlow(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.Analysis.ControlAndDataFlowGraph{`0,`1})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2">
            <summary>
            A set of basic blocks, each of which has a list of successor blocks and some other information.
            Each block consists of a list of instructions, each of which can point to previous instructions that compute the operands it consumes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.SuccessorsFor(`0)">
            <summary>
            All basic blocks that can be reached via control flow out of the given basic block.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.GetControlAndDataFlowGraphFor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            Constructs a control and data flow graph for the given method body.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.MethodBody">
            <summary>
            The method body for which this instance is a Control and Data Flow Graph.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.RootBlocks">
            <summary>
            The first block in the method as well as the first blocks of any exception handlers, fault handlers and finally clauses.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.AllBlocks">
            <summary>
            A list of all basic blocks in the graph, ordered so that any block that ends on a conditional branch immediately precedes the block
            to which it falls through and so that all blocks that make up a try body or handler are contiguous.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.BlockFor">
            <summary>
            A map from IL offset to corresponding basic block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.ControlAndDataFlowGraph`2.SuccessorEdges">
            <summary>
            The master list of all successor edges. The successor list for each basic block is a sublist of this list.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.BasicBlock`1">
            <summary>
            A block of instructions of which only the first instruction can be reached via explicit control flow.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.firstSuccessorEdge">
            <summary>
            The first edge that leaves this block. The edges are a contiguous sublist of the the SuccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.successorCount">
            <summary>
            The number of edges that leave this block. The edges are a contiguous sublist of the the SuccessorEdges list of the ControlAndDataFlowGraph that contains this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.OperandStack">
            <summary>
            A list of pseudo instructions that initialize the operand stack when the block is entered. No actual code should be generated for these instructions
            as the actual stack will be set up by the code transferring control to this block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.BasicBlock`1.Instructions">
            <summary>
            The instructions making up this block.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.BasicBlock`1.ToString">
            <summary>
            Returns a string describing the basic block.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.Analysis.BasicBlock`1.Offset">
            <summary>
            The IL offset of the first instruction in this basic block. If the block is empty, it is the same as the Offset of the following block. If there is no following block, 
            it is the offset where the next instruction would have appeared.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.Instruction">
            <summary>
            A model of an IL operation, but with the implicit operand stack made explicit via the properties Operand1 and Operand2
            that point to the previous instructions that computed the operands, if any, that the instruction consumes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.Instruction.#ctor">
            <summary>
            A model of an IL operation, but with the implicit operand stack made explicit via the properties Operand1 and Operand2
            that point to the previous instructions that computed the operands, if any, that the instruction consumes.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.Operand1">
            <summary>
            The instruction that results in the first operand of the operation, if an operand is required.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.Analysis.Instruction.Operand2">
            <summary>
            The instruction that results in the second operand of the operation, if a second operand is required.
            Could also be an array of instructions if the instruction is n-ary for n > 2.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.Instruction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.Operation">
            <summary>
            The operation this instruction carries out.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Analysis.Instruction.Type">
            <summary>
            The type of the result this instruction pushes onto the stack. Void if none.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Analysis.TypeInferencer`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Analysis.TypeInferencer`2.FillInTypes(Microsoft.Cci.IMetadataHost,Microsoft.Cci.Analysis.ControlAndDataFlowGraph{`0,`1})">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
