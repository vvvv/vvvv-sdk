<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParallelExtensionsExtras</name>
    </assembly>
    <members>
        <member name="T:System.IO.AbstractStreamBase">
            <summary>Base stream class that implements all of Stream's abstract members.</summary>
        </member>
        <member name="M:System.IO.AbstractStreamBase.Flush">
            <summary>Flushes the contents of the stream to the underlying storage.</summary>
        </member>
        <member name="M:System.IO.AbstractStreamBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current
            stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When Read returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the
            number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:System.IO.AbstractStreamBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type System.IO.SeekOrigin indicating the reference point used
            to obtain the new position.
            </param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:System.IO.AbstractStreamBase.SetLength(System.Int64)">
            <summary>Sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:System.IO.AbstractStreamBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the stream.</summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="P:System.IO.AbstractStreamBase.CanRead">
            <summary>Determines whether data can be read from the stream.</summary>
        </member>
        <member name="P:System.IO.AbstractStreamBase.CanWrite">
            <summary>Determines whether data can be written to the stream.</summary>
        </member>
        <member name="P:System.IO.AbstractStreamBase.CanSeek">
            <summary>Determines whether the stream can be seeked.</summary>
        </member>
        <member name="P:System.IO.AbstractStreamBase.Length">
            <summary>Gets the length of the stream.</summary>
        </member>
        <member name="P:System.IO.AbstractStreamBase.Position">
            <summary>Gets or sets the current position of the stream.</summary>
        </member>
        <member name="T:System.Threading.ActionCountdownEvent">
            <summary>Runs an action when the CountdownEvent reaches zero.</summary>
        </member>
        <member name="M:System.Threading.ActionCountdownEvent.#ctor(System.Int32,System.Action)">
            <summary>Initializes the ActionCountdownEvent.</summary>
            <param name="initialCount">The number of signals required to set the CountdownEvent.</param>
            <param name="action">The delegate to be invoked when the count reaches zero.</param>
        </member>
        <member name="M:System.Threading.ActionCountdownEvent.AddCount">
            <summary>Increments the current count by one.</summary>
        </member>
        <member name="M:System.Threading.ActionCountdownEvent.Signal">
            <summary>Registers a signal with the event, decrementing its count.</summary>
        </member>
        <member name="M:System.Threading.ActionCountdownEvent.Dispose">
            <summary>Releases all resources used by the current instance.</summary>
        </member>
        <member name="M:System.Threading.ActionCountdownEvent.Dispose(System.Boolean)">
            <summary>Releases all resources used by the current instance.</summary>
            <param name="disposing">
            true if called because the object is being disposed; otherwise, false.
            </param>
        </member>
        <member name="T:System.Threading.AsyncCache_DebugView`2">
            <summary>Debugger type proxy for AsyncCache.</summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="T:System.Threading.AsyncCache`2">
            <summary>Caches asynchronously retrieved data.</summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="F:System.Threading.AsyncCache`2._valueFactory">
            <summary>The factory to use to create tasks.</summary>
        </member>
        <member name="F:System.Threading.AsyncCache`2._map">
            <summary>The dictionary to store all of the tasks.</summary>
        </member>
        <member name="M:System.Threading.AsyncCache`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Initializes the cache.</summary>
            <param name="valueFactory">A factory for producing the cache's values.</param>
        </member>
        <member name="M:System.Threading.AsyncCache`2.GetValue(`0)">
            <summary>Gets a Task to retrieve the value for the specified key.</summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="M:System.Threading.AsyncCache`2.SetValue(`0,`1)">
            <summary>Sets the value for the specified key.</summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="M:System.Threading.AsyncCache`2.SetValue(`0,System.Threading.Tasks.Task{`1})">
            <summary>Sets the value for the specified key.</summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="M:System.Threading.AsyncCache`2.Clear">
            <summary>Empties the cache.</summary>
        </member>
        <member name="M:System.Threading.AsyncCache`2.GetEnumerator">
            <summary>Gets an enumerator for the contents of the cache.</summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:System.Threading.AsyncCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator for the contents of the cache.</summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:System.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Threading#Tasks#Task{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Adds or overwrites the specified entry in the cache.</summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:System.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Threading#Tasks#Task{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Determines whether the cache contains the specified key.</summary>
            <param name="item">The item contained the key to be searched for.</param>
            <returns>True if the cache contains the key; otherwise, false.</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:System.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Threading#Tasks#Task{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}}[],System.Int32)" ignoriert -->
        <member name="M:System.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Threading#Tasks#Task{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Removes the specified key from the cache.</summary>
            <param name="item">The item containing the key to be removed.</param>
            <returns>True if the item could be removed; otherwise, false.</returns>
        </member>
        <member name="P:System.Threading.AsyncCache`2.Item(`0)">
            <summary>Gets a Task to retrieve the value for the specified key.</summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="P:System.Threading.AsyncCache`2.Count">
            <summary>Gets the number of items in the cache.</summary>
        </member>
        <member name="P:System.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Threading#Tasks#Task{TValue}}}#IsReadOnly">
            <summary>Gets whether the cache is read-only.</summary>
        </member>
        <member name="T:System.Threading.HtmlAsyncCache">
            <summary>An asynchronous cache for downloaded HTML.</summary>
        </member>
        <member name="M:System.Threading.HtmlAsyncCache.#ctor">
            <summary>Initializes the HtmlCache.</summary>
        </member>
        <member name="T:System.Threading.Tasks.AsyncCall`1">
            <summary>Asynchronously invokes a handler for every posted item.</summary>
            <typeparam name="T">Specifies the type of data processed by the instance.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._queue">
            <summary>
            A queue that stores the posted data.  Also serves as the syncObj for protected instance state.
            A ConcurrentQueue is used to enable lock-free dequeues while running with a single consumer task.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._handler">
            <summary>The delegate to invoke for every element.</summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._maxItemsPerTask">
            <summary>The maximum number of items that should be processed by an individual task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._tf">
            <summary>The TaskFactory to use to launch new tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._parallelOptions">
            <summary>The options to use for parallel processing of data.</summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncCall`1._processingCount">
            <summary>Whether a processing task has been scheduled.</summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.#ctor(System.Action{`0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the AsyncCall with an action to execute for each element.</summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.#ctor(System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>General initialization of the AsyncCall.  Another constructor must initialize the delegate.</summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.Post(`0)">
            <summary>Post an item for processing.</summary>
            <param name="item">The item to be processed.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.GetItemsToProcess">
            <summary>Gets an enumerable that yields the items to be processed at this time.</summary>
            <returns>An enumerable of items.</returns>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.ProcessItemsActionTaskBody">
            <summary>Used as the body of an action task to process items in the queue.</summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall`1.ProcessItemFunctionTaskBody(System.Object)">
            <summary>Used as the body of a function task to process items in the queue.</summary>
        </member>
        <member name="T:System.Threading.Tasks.AsyncCall">
            <summary>Provides static factory methods for creating AsyncCall(Of T) instances.</summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall.Create``1(System.Action{``0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the AsyncCall with an action to execute for each element.</summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Action{``0},System.Int32,System.Int32)">
            <summary>Initializes the AsyncCall in the specified AppDomain with an action to execute for each element.</summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:System.Threading.Tasks.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Initializes the AsyncCall in the specified AppDomain with a function to execute for each element.  
            The function returns an Task that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
        </member>
        <member name="T:System.Threading.Async.AsyncBarrier">
            <summary>Provides an asynchronous barrier.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncBarrier._participantCount">
            <summary>The number of participants in the barrier.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncBarrier._currentSignalTask">
            <summary>The task used to signal completion of the current round.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncBarrier._remainingParticipants">
            <summary>The number of participants remaining to arrive for this round.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncBarrier.#ctor(System.Int32)">
            <summary>Initializes the BarrierAsync with the specified number of participants.</summary>
            <param name="participantCount">The number of participants in the barrier.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncBarrier.SignalAndWait">
            <summary>Signals that a participant has arrived.</summary>
            <returns>A Task that will be signaled when the current round completes.</returns>
        </member>
        <member name="P:System.Threading.Async.AsyncBarrier.ParticipantCount">
            <summary>Gets the participant count.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncBarrier.RemainingCount">
            <summary>Gets the number of participants still not yet arrived in this round.</summary>
        </member>
        <member name="T:System.Threading.Async.AsyncProducerConsumerCollection`1">
            <summary>Provides an asynchronous producer/consumer collection.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncProducerConsumerCollection`1._semaphore">
            <summary>Asynchronous semaphore used to keep track of asynchronous work.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncProducerConsumerCollection`1._collection">
            <summary>The data stored in the collection.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncProducerConsumerCollection`1.#ctor">
            <summary>Initializes the asynchronous producer/consumer collection to store data in a first-in-first-out (FIFO) order.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncProducerConsumerCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>Initializes the asynchronous producer/consumer collection.</summary>
            <param name="collection">The underlying collection to use to store data.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncProducerConsumerCollection`1.Add(`0)">
            <summary>Adds an element to the collection.</summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncProducerConsumerCollection`1.Take">
            <summary>Takes an element from the collection asynchronously.</summary>
            <returns>A Task that represents the element removed from the collection.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncProducerConsumerCollection`1.Dispose">
            <summary>Disposes of the collection.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncProducerConsumerCollection`1.Count">
            <summary>Gets the number of elements in the collection.</summary>
        </member>
        <member name="T:System.Threading.Async.AsyncReaderWriter">
            <summary>Provides for asynchronous exclusive and concurrent execution support.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._lock">
            <summary>The lock that protects all shared state in this instance.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._waitingConcurrent">
            <summary>The queue of concurrent readers waiting to execute.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._waitingExclusive">
            <summary>The queue of exclusive writers waiting to execute.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._currentConcurrent">
            <summary>The number of concurrent readers currently executing.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._currentlyExclusive">
            <summary>The number of exclusive writers currently executing.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncReaderWriter._factory">
            <summary>The non-generic factory to use for task creation.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.#ctor">
            <summary>Initializes the ReaderWriterAsync.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.#ctor(System.Threading.Tasks.TaskFactory)">
            <summary>Initializes the ReaderWriterAsync with the specified TaskFactory for us in creating all tasks.</summary>
            <param name="factory">The TaskFactory to use to create all tasks.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.QueueExclusiveWriter(System.Action)">
            <summary>Queues an exclusive writer action to the ReaderWriterAsync.</summary>
            <param name="action">The action to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.QueueExclusiveWriter``1(System.Func{``0})">
            <summary>Queues an exclusive writer function to the ReaderWriterAsync.</summary>
            <param name="function">The function to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.QueueConcurrentReader(System.Action)">
            <summary>Queues a concurrent reader action to the ReaderWriterAsync.</summary>
            <param name="action">The action to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.QueueConcurrentReader``1(System.Func{``0})">
            <summary>Queues a concurrent reader function to the ReaderWriterAsync.</summary>
            <param name="function">The function to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.RunExclusive_RequiresLock(System.Threading.Tasks.Task)">
            <summary>Starts the specified exclusive task.</summary>
            <param name="exclusive">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.RunConcurrent_RequiresLock(System.Threading.Tasks.Task)">
            <summary>Starts the specified concurrent task.</summary>
            <param name="concurrent">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.RunConcurrent_RequiresLock">
            <summary>Starts all queued concurrent tasks.</summary>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.FinishConcurrentReader">
            <summary>Completes the processing of a concurrent reader.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncReaderWriter.FinishExclusiveWriter">
            <summary>Completes the processing of an exclusive writer.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncReaderWriter.WaitingExclusive">
            <summary>Gets the number of exclusive operations currently queued.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncReaderWriter.WaitingConcurrent">
            <summary>Gets the number of concurrent operations currently queued.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncReaderWriter.CurrentConcurrent">
            <summary>Gets the number of concurrent operations currently executing.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncReaderWriter.CurrentlyExclusive">
            <summary>Gets whether an exclusive operation is currently executing.</summary>
        </member>
        <member name="T:System.Threading.Async.AsyncSemaphore">
            <summary>Provides an asynchronous semaphore.</summary>
        </member>
        <member name="F:System.Threading.Async.AsyncSemaphore._currentCount">
            <summary>The current count.</summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "F:System.Threading.Async.AsyncSemaphore._maxCount" ignoriert -->
        <member name="F:System.Threading.Async.AsyncSemaphore._waitingTasks">
            <summary>Tasks waiting to be completed when the semaphore has count available.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.#ctor">
            <summary>Initializes the SemaphoreAsync with a count of zero and a maximum count of Int32.MaxValue.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.#ctor(System.Int32)">
            <summary>Initializes the SemaphoreAsync with the specified count and a maximum count of Int32.MaxValue.</summary>
            <param name="initialCount">The initial count to use as the current count.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.#ctor(System.Int32,System.Int32)">
            <summary>Initializes the SemaphoreAsync with the specified counts.</summary>
            <param name="initialCount">The initial count to use as the current count.</param>
            <param name="maxCount">The maximum count allowed.</param>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.WaitAsync">
            <summary>Waits for a unit to be available in the semaphore.</summary>
            <returns>A Task that will be completed when a unit is available and this Wait operation succeeds.</returns>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.Queue(System.Action)">
            <summary>
            Queues an action that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>
            A Task that represents the execution of the action.
            </returns>
            <remarks>
            Release does not need to be called for this action, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.Queue``1(System.Func{``0})">
            <summary>
            Queues a function that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>
            A Task that represents the execution of the function.
            </returns>
            <remarks>
            Release does not need to be called for this function, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.Release">
            <summary>Releases a unit of work to the semaphore.</summary>
        </member>
        <member name="M:System.Threading.Async.AsyncSemaphore.Dispose">
            <summary>Releases the resources used by the semaphore.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncSemaphore.CurrentCount">
            <summary>Gets the current count.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncSemaphore.MaximumCount">
            <summary>Gets the maximum count.</summary>
        </member>
        <member name="P:System.Threading.Async.AsyncSemaphore.WaitingCount">
            <summary>Gets the number of operations currently waiting on the semaphore.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentPriorityQueue`2">
            <summary>Provides a thread-safe priority queue data structure.</summary>
            <typeparam name="TKey">Specifies the type of keys used to prioritize values.</typeparam>
            <typeparam name="TValue">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.#ctor">
            <summary>Initializes a new instance of the ConcurrentPriorityQueue class.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Initializes a new instance of the ConcurrentPriorityQueue class that contains elements copied from the specified collection.</summary>
            <param name="collection">The collection whose elements are copied to the new ConcurrentPriorityQueue.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.Enqueue(`0,`1)">
            <summary>Adds the key/value pair to the priority queue.</summary>
            <param name="priority">The priority of the item to be added.</param>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds the key/value pair to the priority queue.</summary>
            <param name="item">The key/value pair to be added to the queue.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.TryDequeue(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>Attempts to remove and return the next prioritized item in the queue.</summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.TryPeek(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>Attempts to return the next prioritized item in the queue.</summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object.
            The queue was not modified by the operation.
            </param>
            <returns>
            true if an element was returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.Clear">
            <summary>Empties the queue.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>The elements will not be copied to the array in any guaranteed order.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.ToArray">
            <summary>Copies the elements stored in the queue to a new array.</summary>
            <returns>A new array containing a snapshot of elements copied from the queue.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#TryAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Attempts to add an item in the queue.</summary>
            <param name="item">The key/value pair to be added.</param>
            <returns>
            true if the pair was added; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#TryTake(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>Attempts to remove and return the next prioritized item in the queue.</summary>
            <param name="item">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator for the contents of the queue.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents of the queue. It does not
            reflect any updates to the collection after GetEnumerator was called. The enumerator is safe to
            use concurrently with reads from and writes to the queue.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentPriorityQueue`2.IsEmpty">
            <summary>Gets whether the queue is empty.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentPriorityQueue`2.Count">
            <summary>Gets the number of elements contained in the queue.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized with the SyncRoot.
            </summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentPriorityQueue`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap">
            <summary>Implements a binary heap that prioritizes smaller values.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.#ctor">
            <summary>Initializes an empty heap.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.#ctor(System.Collections.Concurrent.ConcurrentPriorityQueue{`0,`1}.MinBinaryHeap)">
            <summary>Initializes a heap as a copy of another heap instance.</summary>
            <param name="heapToCopy">The heap to copy.</param>
            <remarks>Key/Value values are not deep cloned.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Clear">
            <summary>Empties the heap.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Insert(`0,`1)">
            <summary>Adds an item to the heap.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Insert(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds an item to the heap.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Peek">
            <summary>Returns the entry at the top of the heap.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Remove">
            <summary>Removes the entry at the top of the heap.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentPriorityQueue`2.MinBinaryHeap.Count">
            <summary>Gets the number of objects stored in the heap.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ObjectPool`1">
            <summary>Provides a thread-safe object pool.</summary>
            <typeparam name="T">Specifies the type of the elements stored in the pool.</typeparam>
        </member>
        <member name="T:System.Collections.Concurrent.ProducerConsumerCollectionBase`1">
            <summary>
            Provides a base implementation for producer-consumer collections that wrap other
            producer-consumer collections.
            </summary>
            <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>Initializes the ProducerConsumerCollectionBase instance.</summary>
            <param name="contained">The collection to be wrapped by this instance.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.TryAdd(`0)">
            <summary>Attempts to add the specified value to the end of the deque.</summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.TryTake(`0@)">
            <summary>Attempts to remove and return an item from the collection.</summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>Attempts to add the specified value to the end of the deque.</summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>Attempts to remove and return an item from the collection.</summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.ToArray">
            <summary>Creates an array containing the contents of the collection.</summary>
            <returns>The array.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the contents of the collection to an array.</summary>
            <param name="array">The array to which the data should be copied.</param>
            <param name="index">The starting index at which data should be copied.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the contents of the collection to an array.</summary>
            <param name="array">The array to which the data should be copied.</param>
            <param name="index">The starting index at which data should be copied.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.GetEnumerator">
            <summary>Gets an enumerator for the collection.</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator for the collection.</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.ContainedCollection">
            <summary>Gets the contained collection.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.Count">
            <summary>Gets the number of elements contained in the collection.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets whether the collection is synchronized.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ProducerConsumerCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>Gets the synchronization root object for the collection.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>Initializes an instance of the ObjectPool class.</summary>
            <param name="generator">The function used to create items when no items exist in the pool.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ObjectPool`1.#ctor(System.Func{`0},System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>Initializes an instance of the ObjectPool class.</summary>
            <param name="generator">The function used to create items when no items exist in the pool.</param>
            <param name="collection">The collection used to store the elements of the pool.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ObjectPool`1.PutObject(`0)">
            <summary>Adds the provided item into the pool.</summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ObjectPool`1.GetObject">
            <summary>Gets an item from the pool.</summary>
            <returns>The removed or created item.</returns>
            <remarks>If the pool is empty, a new item will be created and returned.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ObjectPool`1.ToArrayAndClear">
            <summary>Clears the object pool, returning all of the data that was in the pool.</summary>
            <returns>An array containing all of the elements in the pool.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.ObservableConcurrentCollection`1">
            <summary>
            Provides a thread-safe, concurrent collection for use with data binding.
            </summary>
            <typeparam name="T">Specifies the type of the elements in this collection.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentCollection`1.#ctor">
            <summary>
            Initializes an instance of the ObservableConcurrentCollection class with an underlying
            queue data structure.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Initializes an instance of the ObservableConcurrentCollection class with the specified
            collection as the underlying data structure.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentCollection`1.NotifyObserversOfChange">
            <summary>
            Notifies observers of CollectionChanged or PropertyChanged of an update to the dictionary.
            </summary>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentCollection`1.CollectionChanged">
            <summary>Event raised when the collection changes.</summary>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentCollection`1.PropertyChanged">
            <summary>Event raised when a property on the collection changes.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ObservableConcurrentDictionary`2">
            <summary>
            Provides a thread-safe dictionary for use with data binding.
            </summary>
            <typeparam name="TKey">Specifies the type of the keys in this collection.</typeparam>
            <typeparam name="TValue">Specifies the type of the values in this collection.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.#ctor">
            <summary>
            Initializes an instance of the ObservableConcurrentDictionary class.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.NotifyObserversOfChange">
            <summary>
            Notifies observers of CollectionChanged or PropertyChanged of an update to the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryAddWithNotification(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Attempts to add an item to the dictionary, notifying observers of any changes.</summary>
            <param name="item">The item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryAddWithNotification(`0,`1)">
            <summary>Attempts to add an item to the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be added.</param>
            <param name="value">The value of the item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.TryRemoveWithNotification(`0,`1@)">
            <summary>Attempts to remove an item from the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be removed.</param>
            <param name="value">The value of the item removed.</param>
            <returns>Whether the removal was successful.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ObservableConcurrentDictionary`2.UpdateWithNotification(`0,`1)">
            <summary>Attempts to add or update an item in the dictionary, notifying observers of any changes.</summary>
            <param name="key">The key of the item to be updated.</param>
            <param name="value">The new value to set for the item.</param>
            <returns>Whether the update was successful.</returns>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentDictionary`2.CollectionChanged">
            <summary>Event raised when the collection changes.</summary>
        </member>
        <member name="E:System.Collections.Concurrent.ObservableConcurrentDictionary`2.PropertyChanged">
            <summary>Event raised when a property on the collection changes.</summary>
        </member>
        <member name="T:System.Threading.Pipeline">
            <summary>Provides support for pipelined data processing.</summary>
        </member>
        <member name="M:System.Threading.Pipeline.Create``2(System.Func{``0,``1})">
            <summary>Creates a new pipeline, with the specified function as the sole stage.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="M:System.Threading.Pipeline.Create``2(System.Func{``0,``1},System.Int32)">
            <summary>Creates a new pipeline, with the specified function as the sole stage.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="T:System.Threading.Pipeline`2">
            <summary>Provides support for pipelined data processing.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
        </member>
        <member name="M:System.Threading.Pipeline`2.Next``1(System.Func{`1,``0})">
            <summary>Creates a new pipeline that combines the current pipeline with a new stage.</summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
            <remarks>This overload creates a parallel pipeline stage.</remarks>
        </member>
        <member name="M:System.Threading.Pipeline`2.Next``1(System.Func{`1,``0},System.Int32)">
            <summary>Creates a new pipeline that combines the current pipeline with a new stage.</summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
        </member>
        <member name="M:System.Threading.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0})">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:System.Threading.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:System.Threading.Pipeline`2.ProcessNoArgValidation(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:System.Threading.Pipeline`2.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`1})">
            <summary>Implements the core processing for a pipeline stage.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="T:System.Threading.Pipeline`2.InternalPipeline`1">
            <summary>Helper used to add a new stage to a pipeline.</summary>
            <typeparam name="TNextOutput">Specifies the type of the output for the new pipeline.</typeparam>
        </member>
        <member name="M:System.Threading.Pipeline`2.InternalPipeline`1.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`2})">
            <summary>Implements the core processing for a pipeline stage.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="T:System.Collections.Concurrent.IProducerConsumerCollection_DebugView`1">
            <summary>Debug view for the IProducerConsumerCollection.</summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="T:System.Threading.ReductionVariable`1">
            <summary>Provides a reduction variable for aggregating data across multiple threads involved in a computation.</summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="F:System.Threading.ReductionVariable`1._seedFactory">
            <summary>The factory used to initialize a value on a thread.</summary>
        </member>
        <member name="F:System.Threading.ReductionVariable`1._threadLocal">
            <summary>Thread-local storage for each thread's value.</summary>
        </member>
        <member name="F:System.Threading.ReductionVariable`1._values">
            <summary>The list of all thread-local values for later enumeration.</summary>
        </member>
        <member name="M:System.Threading.ReductionVariable`1.#ctor">
            <summary>Initializes the instances.</summary>
        </member>
        <member name="M:System.Threading.ReductionVariable`1.#ctor(System.Func{`0})">
            <summary>Initializes the instances.</summary>
            <param name="seedFactory">
            The function invoked to provide the initial value for a thread.  
            If null, the default value of T will be used as the seed.
            </param>
        </member>
        <member name="M:System.Threading.ReductionVariable`1.CreateValue">
            <summary>Creates a value for the current thread and stores it in the central list of values.</summary>
            <returns>The boxed value.</returns>
        </member>
        <member name="M:System.Threading.ReductionVariable`1.Reduce(System.Func{`0,`0,`0})">
            <summary>Applies an accumulator function over the values in this variable.</summary>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="M:System.Threading.ReductionVariable`1.Reduce``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Applies an accumulator function over the values in this variable.
            The specified seed is used as the initial accumulator value.
            </summary>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="P:System.Threading.ReductionVariable`1.Value">
            <summary>Gets or sets the value for the current thread.</summary>
        </member>
        <member name="P:System.Threading.ReductionVariable`1.Values">
            <summary>Gets the values for all of the threads that have used this instance.</summary>
        </member>
        <member name="T:System.Threading.ReductionVariable_DebugView`1">
            <summary>Debug view for the reductino variable</summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.SerialTaskQueue">
            <summary>Represents a queue of tasks to be started and executed serially.</summary>
        </member>
        <member name="F:System.Threading.Tasks.SerialTaskQueue._tasks">
            <summary>The ordered queue of tasks to be executed. Also serves as a lock protecting all shared state.</summary>
        </member>
        <member name="F:System.Threading.Tasks.SerialTaskQueue._taskInFlight">
            <summary>The task currently executing, or null if there is none.</summary>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>Enqueues the task to be processed serially and in order.</summary>
            <param name="taskGenerator">The function that generates a non-started task.</param>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.Enqueue(System.Threading.Tasks.Task)">
            <summary>Enqueues the non-started task to be processed serially and in order.</summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.Completed">
            <summary>Gets a Task that represents the completion of all previously queued tasks.</summary>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.EnqueueInternal(System.Object)">
            <summary>Enqueues the task to be processed serially and in order.</summary>
            <param name="taskOrFunction">The task or functino that generates a task.</param>
            <remarks>The task must not be started and must only be started by this instance.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.OnTaskCompletion(System.Threading.Tasks.Task)">
            <summary>Called when a Task completes to potentially start the next in the queue.</summary>
            <param name="ignored">The task that completed.</param>
        </member>
        <member name="M:System.Threading.Tasks.SerialTaskQueue.StartTask_CallUnderLock(System.Object)">
            <summary>Starts the provided task (or function that returns a task).</summary>
            <param name="nextItem">The next task or function that returns a task.</param>
        </member>
        <member name="T:System.Threading.SpinLockClass">
            <summary>Provides a simple, reference type wrapper for SpinLock.</summary>
        </member>
        <member name="M:System.Threading.SpinLockClass.#ctor">
            <summary>Initializes an instance of the SpinLockClass class.</summary>
        </member>
        <member name="M:System.Threading.SpinLockClass.#ctor(System.Boolean)">
            <summary>Initializes an instance of the SpinLockClass class.</summary>
            <param name="enableThreadOwnerTracking">
            Controls whether the SpinLockClass should track
            thread-ownership fo the lock.
            </param>
        </member>
        <member name="M:System.Threading.SpinLockClass.Execute(System.Action)">
            <summary>Runs the specified delegate under the lock.</summary>
            <param name="runUnderLock">The delegate to be executed while holding the lock.</param>
        </member>
        <member name="M:System.Threading.SpinLockClass.Enter(System.Boolean@)">
            <summary>Enters the lock.</summary>
            <param name="lockTaken">
            Upon exit of the Enter method, specifies whether the lock was acquired. 
            The variable passed by reference must be initialized to false.
            </param>
        </member>
        <member name="M:System.Threading.SpinLockClass.Exit">
            <summary>Exits the SpinLock.</summary>
        </member>
        <member name="M:System.Threading.SpinLockClass.Exit(System.Boolean)">
            <summary>Exits the SpinLock.</summary>
            <param name="useMemoryBarrier">
            A Boolean value that indicates whether a memory fence should be issued in
            order to immediately publish the exit operation to other threads.
            </param>
        </member>
        <member name="T:System.Threading.ThreadSafeRandom">
            <summary>
            Represents a thread-safe, pseudo-random number generator.
            </summary>
        </member>
        <member name="F:System.Threading.ThreadSafeRandom._global">
            <summary>Seed provider.</summary>
        </member>
        <member name="F:System.Threading.ThreadSafeRandom._local">
            <summary>The underlyin provider of randomness, one instance per thread, initialized with _global.</summary>
        </member>
        <member name="M:System.Threading.ThreadSafeRandom.Next">
            <summary>Returns a nonnegative random number.</summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than MaxValue.</returns>
        </member>
        <member name="M:System.Threading.ThreadSafeRandom.Next(System.Int32)">
            <summary>Returns a nonnegative random number less than the specified maximum.</summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. However, 
            if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:System.Threading.ThreadSafeRandom.Next(System.Int32,System.Int32)">
            <summary>Returns a random number within a specified range.</summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:System.Threading.ThreadSafeRandom.NextDouble">
            <summary>Returns a random number between 0.0 and 1.0.</summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:System.Threading.ThreadSafeRandom.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:System.Threading.TransferStream">
            <summary>Writeable stream for using a separate thread in a producer/consumer scenario.</summary>
        </member>
        <member name="F:System.Threading.TransferStream._writeableStream">
            <summary>The underlying stream to target.</summary>
        </member>
        <member name="F:System.Threading.TransferStream._chunks">
            <summary>The collection of chunks to be written.</summary>
        </member>
        <member name="F:System.Threading.TransferStream._processingTask">
            <summary>The Task to use for background writing.</summary>
        </member>
        <member name="M:System.Threading.TransferStream.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the TransferStream.</summary>
            <param name="writeableStream">The underlying stream to which to write.</param>
        </member>
        <member name="M:System.Threading.TransferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the stream.</summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:System.Threading.TransferStream.Close">
            <summary>Closes the stream and releases all resources associated with it.</summary>
        </member>
        <member name="P:System.Threading.TransferStream.CanWrite">
            <summary>Determines whether data can be written to the stream.</summary>
        </member>
        <member name="T:System.AggregateExceptionExtensions">
            <summary>Extension methods for AggregateException.</summary>
        </member>
        <member name="M:System.AggregateExceptionExtensions.Handle(System.AggregateException,System.Func{System.Exception,System.Boolean},System.Boolean)">
            <summary>Invokes a handler on each Exception contained by this AggregateException.</summary>
            <param name="aggregateException">The AggregateException.</param>
            <param name="predicate">
            The predicate to execute for each exception. The predicate accepts as an argument the Exception
            to be processed and returns a Boolean to indicate whether the exception was handled.
            </param>
            <param name="leaveStructureIntact">
            Whether the rethrown AggregateException should maintain the same hierarchy as the original.
            </param>
        </member>
        <member name="T:System.IO.FileAsync">
            <summary>Provides asynchronous counterparts to members of the File class.</summary>
        </member>
        <member name="M:System.IO.FileAsync.OpenRead(System.String)">
            <summary>Opens an existing file for asynchronous reading.</summary>
            <param name="path">The path to the file to be opened for reading.</param>
            <returns>A read-only FileStream on the specified path.</returns>
        </member>
        <member name="M:System.IO.FileAsync.OpenWrite(System.String)">
            <summary>Opens an existing file for asynchronous writing.</summary>
            <param name="path">The path to the file to be opened for writing.</param>
            <returns>An unshared FileStream on the specified path with access for writing.</returns>
        </member>
        <member name="M:System.IO.FileAsync.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file for asynchronosu operation, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The path to the file to be read.</param>
            <returns>A task that will contain the contents of the file.</returns>
        </member>
        <member name="M:System.IO.FileAsync.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Opens a binary file for asynchronous operation, writes the contents of the byte array into the file, and then closes the file.
            </summary>
            <param name="path">The path to the file to be written.</param>
            <returns>A task that will signal the completion of the operation.</returns>
        </member>
        <member name="M:System.IO.FileAsync.ReadAllText(System.String)">
            <summary>
            Opens a text file for asynchronosu operation, reads the contents of the file into a string, and then closes the file.
            </summary>
            <param name="path">The path to the file to be read.</param>
            <returns>A task that will contain the contents of the file.</returns>
        </member>
        <member name="M:System.IO.FileAsync.WriteAllText(System.String,System.String)">
            <summary>
            Opens a text file for asynchronosu operation, writes a string into the file, and then closes the file.
            </summary>
            <param name="path">The path to the file to be written.</param>
            <returns>A task that will signal the completion of the operation.</returns>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>Extension methods for asynchronously working with streams.</summary>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Read from a stream asynchronously.</summary>
            <param name="stream">The stream.</param>
            <param name="buffer">An array of bytes to be filled by the read operation.</param>
            <param name="offset">The offset at which data should be stored.</param>
            <param name="count">The number of bytes to be read.</param>
            <returns>A Task containing the number of bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Write to a stream asynchronously.</summary>
            <param name="stream">The stream.</param>
            <param name="buffer">An array of bytes to be written.</param>
            <param name="offset">The offset from which data should be read to be written.</param>
            <param name="count">The number of bytes to be written.</param>
            <returns>A Task representing the completion of the asynchronous operation.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadAllBytesAsync(System.IO.Stream)">
            <summary>Reads the contents of the stream asynchronously.</summary>
            <param name="stream">The stream.</param>
            <returns>A Task representing the contents of the file in bytes.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadBuffersAsync(System.IO.Stream,System.Int32,System.Action{System.Byte[],System.Int32})">
            <summary>Read the content of the stream, yielding its data in buffers to the provided delegate.</summary>
            <param name="stream">The stream.</param>
            <param name="bufferSize">The size of the buffers to use.</param>
            <param name="bufferAvailable">The delegate to be called when a new buffer is available.</param>
            <returns>A Task that represents the completion of the asynchronous operation.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadIterator(System.IO.Stream,System.Int32,System.Action{System.Byte[],System.Int32})">
            <summary>
            Creates an enumerable to be used with TaskFactoryExtensions.Iterate that reads data
            from an input stream and passes it to a user-provided delegate.
            </summary>
            <param name="input">The source stream.</param>
            <param name="bufferSize">The size of the buffers to be used.</param>
            <param name="bufferAvailable">
            A delegate to be invoked when a buffer is available (provided the
            buffer and the number of bytes in the buffer starting at offset 0.
            </param>
            <returns>An enumerable containing yielded tasks from the operation.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyStreamToFileAsync(System.IO.Stream,System.String)">
            <summary>Copies the contents of a stream to a file, asynchronously.</summary>
            <param name="source">The source stream.</param>
            <param name="destinationPath">The path to the destination file.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyStreamToStreamAsync(System.IO.Stream,System.IO.Stream)">
            <summary>Copies the contents of one stream to another, asynchronously.</summary>
            <param name="source">The source stream.</param>
            <param name="destination">The destination stream.</param>
            <returns>A Task that represents the completion of the asynchronous operation.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyStreamIterator(System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates an enumerable to be used with TaskFactoryExtensions.Iterate that copies data from one
            stream to another.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <returns>An enumerable containing yielded tasks from the copy operation.</returns>
        </member>
        <member name="T:System.Net.WebRequestExtensions">
            <summary>Extension methods for working with WebRequest asynchronously.</summary>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetResponseAsync(System.Net.WebRequest)">
            <summary>Creates a Task that represents an asynchronous request to GetResponse.</summary>
            <param name="webRequest">The WebRequest.</param>
            <returns>A Task containing the retrieved WebResponse.</returns>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetRequestStreamAsync(System.Net.WebRequest)">
            <summary>Creates a Task that represents an asynchronous request to GetRequestStream.</summary>
            <param name="webRequest">The WebRequest.</param>
            <returns>A Task containing the retrieved Stream.</returns>
        </member>
        <member name="M:System.Net.WebRequestExtensions.DownloadDataAsync(System.Net.WebRequest)">
            <summary>Creates a Task that respresents downloading all of the data from a WebRequest.</summary>
            <param name="webRequest">The WebRequest.</param>
            <returns>A Task containing the downloaded content.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.BlockingCollectionExtensions">
            <summary>Extension methods for BlockingCollection.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.GetConsumingPartitioner``1(System.Collections.Concurrent.BlockingCollection{``0})">
            <summary>
            Gets a partitioner for a BlockingCollection that consumes and yields the contents of the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of data in the collection.</typeparam>
            <param name="collection">The collection for which to create a partitioner.</param>
            <returns>A partitioner that completely consumes and enumerates the contents of the collection.</returns>
            <remarks>
            Using this partitioner with a Parallel.ForEach loop or with PLINQ eliminates the need for those
            constructs to do any additional locking.  The only synchronization in place is that used by the
            BlockingCollection internally.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.AddFromEnumerable``1(System.Collections.Concurrent.BlockingCollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>Adds the contents of an enumerable to the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target BlockingCollection to be augmented.</param>
            <param name="source">The source enumerable containing the data to be added.</param>
            <param name="completeAddingWhenDone">
            Whether to mark the target BlockingCollection as complete for adding when 
            all elements of the source enumerable have been transfered.
            </param>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.AddFromObservable``1(System.Collections.Concurrent.BlockingCollection{``0},System.IObservable{``0},System.Boolean)">
            <summary>Adds the contents of an observable to the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target BlockingCollection to be augmented.</param>
            <param name="source">The source observable containing the data to be added.</param>
            <param name="completeAddingWhenDone">
            Whether to mark the target BlockingCollection as complete for adding when 
            all elements of the source observable have been transfered.
            </param>
            <returns>An IDisposable that may be used to cancel the transfer.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0})">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <returns>
            An IProducerConsumerCollection that wraps the provided BlockingCollection.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0},System.Int32)">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <param name="millisecondsTimeout">-1 for infinite blocking add and take operations. 0 for non-blocking, 1 or greater for blocking with timeout.</param>
            <returns>An IProducerConsumerCollection that wraps the provided BlockingCollection.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <param name="millisecondsTimeout">-1 for infinite blocking add and take operations. 0 for non-blocking, 1 or greater for blocking with timeout.</param>
            <param name="cancellationToken">The CancellationToken to use for any blocking operations.</param>
            <returns>An IProducerConsumerCollection that wraps the provided BlockingCollection.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1">
            <summary>Provides a partitioner that consumes a blocking collection and yields its contents.</summary>
            <typeparam name="T">Specifies the type of data in the collection.</typeparam>
        </member>
        <member name="F:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1._collection">
            <summary>The target collection.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.#ctor(System.Collections.Concurrent.BlockingCollection{`0})">
            <summary>Initializes the partitioner.</summary>
            <param name="collection">The collection to be enumerated and consumed.</param>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.GetPartitions(System.Int32)">
            <summary>Partitions the underlying collection into the given number of partitions.</summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>A list containing partitionCount enumerators.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.GetDynamicPartitions">
            <summary>
            Creates an object that can partition the underlying collection into a variable number of partitions.
            </summary>
            <returns>An object that can create partitions over the underlying data source.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.SupportsDynamicPartitions">
            <summary>Gets whether additional partitions can be created dynamically.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.BlockingCollectionExtensions.ProducerConsumerWrapper`1">
            <summary>Provides a producer-consumer collection facade for a BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
        </member>
        <member name="T:System.Threading.CancellationTokenExtensions">
            <summary>Extension methods for CancellationToken.</summary>
        </member>
        <member name="M:System.Threading.CancellationTokenExtensions.CancelAndThrow(System.Threading.CancellationTokenSource)">
            <summary>Cancels a CancellationTokenSource and throws a corresponding OperationCanceledException.</summary>
            <param name="source">The source to be canceled.</param>
        </member>
        <member name="M:System.Threading.CancellationTokenExtensions.CreateLinkedSource(System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenSource that will be canceled when the specified token has cancellation requested.
            </summary>
            <param name="token">The token.</param>
            <returns>The created CancellationTokenSource.</returns>
        </member>
        <member name="T:System.Threading.Tasks.CompletedTask">
            <summary>Provides access to an already completed task.</summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.CompletedTask.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:System.Threading.Tasks.CompletedTask`1">
            <summary>Provides access to an already completed task.</summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.CompletedTask`1.#cctor">
            <summary>Initializes a Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.CompletedTask`1.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:System.DelegateExtensions">
            <summary>Parallel extensions for the Delegate class.</summary>
        </member>
        <member name="M:System.DelegateExtensions.ParallelDynamicInvoke(System.Delegate,System.Object[])">
            <summary>Dynamically invokes (late-bound) in parallel the methods represented by the delegate.</summary>
            <param name="multicastDelegate">The delegate to be invoked.</param>
            <param name="args">An array of objects that are the arguments to pass to the delegates.</param>
            <returns>The return value of one of the delegate invocations.</returns>
        </member>
        <member name="M:System.DelegateExtensions.WithFailFast(System.Action)">
            <summary>
            Provides a delegate that runs the specified action and fails fast if the action throws an exception.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="M:System.DelegateExtensions.WithFailFast``1(System.Func{``0})">
            <summary>
            Provides a delegate that runs the specified function and fails fast if the function throws an exception.
            </summary>
            <param name="function">The function to invoke.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="T:System.Net.NetworkInformation.PingExtensions">
            <summary>Extension methods for working with Ping asynchronously.</summary>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.Net.IPAddress,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="address">An IPAddress that identifies the computer that is the destination for the ICMP echo message.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.String,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="hostNameOrAddress">
            A String that identifies the computer that is the destination for the ICMP echo message. 
            The value specified for this parameter can be a host name or a string representation of an IP address.
            </param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="address">An IPAddress that identifies the computer that is the destination for the ICMP echo message.</param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="hostNameOrAddress">
            A String that identifies the computer that is the destination for the ICMP echo message. 
            The value specified for this parameter can be a host name or a string representation of an IP address.
            </param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.Net.IPAddress,System.Int32,System.Byte[],System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="address">An IPAddress that identifies the computer that is the destination for the ICMP echo message.</param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="buffer">
            A Byte array that contains data to be sent with the ICMP echo message and returned 
            in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
            </param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.String,System.Int32,System.Byte[],System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="hostNameOrAddress">
            A String that identifies the computer that is the destination for the ICMP echo message. 
            The value specified for this parameter can be a host name or a string representation of an IP address.
            </param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="buffer">
            A Byte array that contains data to be sent with the ICMP echo message and returned 
            in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
            </param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="address">An IPAddress that identifies the computer that is the destination for the ICMP echo message.</param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="buffer">
            A Byte array that contains data to be sent with the ICMP echo message and returned 
            in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
            </param>
            <param name="options">A PingOptions object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTask(System.Net.NetworkInformation.Ping,System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
            <summary>
            Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message.
            </summary>
            <param name="ping">The Ping.</param>
            <param name="hostNameOrAddress">
            A String that identifies the computer that is the destination for the ICMP echo message. 
            The value specified for this parameter can be a host name or a string representation of an IP address.
            </param>
            <param name="timeout">
            An Int32 value that specifies the maximum number of milliseconds (after sending the echo message) 
            to wait for the ICMP echo reply message.
            </param>
            <param name="buffer">
            A Byte array that contains data to be sent with the ICMP echo message and returned 
            in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
            </param>
            <param name="options">A PingOptions object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.PingExtensions.SendTaskCore(System.Net.NetworkInformation.Ping,System.Object,System.Action{System.Threading.Tasks.TaskCompletionSource{System.Net.NetworkInformation.PingReply}})">
            <summary>The core implementation of SendTask.</summary>
            <param name="ping">The Ping.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <param name="sendAsync">
            A delegate that initiates the asynchronous send.
            The provided TaskCompletionSource must be passed as the user-supplied state to the actual Ping.SendAsync method.
            </param>
            <returns></returns>
        </member>
        <member name="T:System.Net.NetworkInformation.SmtpClientExtensions">
            <summary>Extension methods for working with SmtpClient asynchronously.</summary>
        </member>
        <member name="M:System.Net.NetworkInformation.SmtpClientExtensions.SendTask(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage,System.Object)">
            <summary>Sends an e-mail message asynchronously.</summary>
            <param name="smtpClient">The client.</param>
            <param name="message">A MailMessage that contains the message to send.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A Task that represents the asynchronous send.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.SmtpClientExtensions.SendTask(System.Net.Mail.SmtpClient,System.String,System.String,System.String,System.String,System.Object)">
            <summary>Sends an e-mail message asynchronously.</summary>
            <param name="smtpClient">The client.</param>
            <param name="message">A MailMessage that contains the message to send.</param>
            <param name="from">A String that contains the address information of the message sender.</param>
            <param name="recipients">A String that contains the address that the message is sent to.</param>
            <param name="subject">A String that contains the subject line for the message.</param>
            <param name="body">A String that contains the message body.</param>
            <param name="userToken">A user-defined object stored in the resulting Task.</param>
            <returns>A Task that represents the asynchronous send.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.SmtpClientExtensions.SendTaskCore(System.Net.Mail.SmtpClient,System.Object,System.Action{System.Threading.Tasks.TaskCompletionSource{System.Object}})">
            <summary>The core implementation of SendTask.</summary>
            <param name="smtpClient">The client.</param>
            <param name="userToken">The user-supplied state.</param>
            <param name="sendAsync">
            A delegate that initiates the asynchronous send.
            The provided TaskCompletionSource must be passed as the user-supplied state to the actual SmtpClient.SendAsync method.
            </param>
            <returns></returns>
        </member>
        <member name="T:System.Net.WebClientExtensions">
            <summary>Extension methods for working with WebClient asynchronously.</summary>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadDataTask(System.Net.WebClient,System.String)">
            <summary>Downloads the resource with the specified URI as a byte array, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded data.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadDataTask(System.Net.WebClient,System.Uri)">
            <summary>Downloads the resource with the specified URI as a byte array, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded data.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadFileTask(System.Net.WebClient,System.String,System.String)">
            <summary>Downloads the resource with the specified URI to a local file, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <param name="fileName">The name of the local file that is to receive the data.</param>
            <returns>A Task that contains the downloaded data.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadFileTask(System.Net.WebClient,System.Uri,System.String)">
            <summary>Downloads the resource with the specified URI to a local file, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <param name="fileName">The name of the local file that is to receive the data.</param>
            <returns>A Task that contains the downloaded data.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadStringTask(System.Net.WebClient,System.String)">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.DownloadStringTask(System.Net.WebClient,System.Uri)">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.OpenReadTask(System.Net.WebClient,System.String)">
            <summary>Opens a readable stream for the data downloaded from a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.OpenReadTask(System.Net.WebClient,System.Uri)">
            <summary>Opens a readable stream for the data downloaded from a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.OpenWriteTask(System.Net.WebClient,System.String,System.String)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <param name="method">The HTTP method that should be used to open the stream.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.OpenWriteTask(System.Net.WebClient,System.Uri,System.String)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <param name="method">The HTTP method that should be used to open the stream.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadDataTask(System.Net.WebClient,System.String,System.String,System.Byte[])">
            <summary>Uploads data to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadDataTask(System.Net.WebClient,System.Uri,System.String,System.Byte[])">
            <summary>Uploads data to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadFileTask(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>Uploads a file to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the file should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the file.</param>
            <param name="fileName">A path to the file to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadFileTask(System.Net.WebClient,System.Uri,System.String,System.String)">
            <summary>Uploads a file to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the file should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the file.</param>
            <param name="fileName">A path to the file to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadStringTask(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:System.Net.WebClientExtensions.UploadStringTask(System.Net.WebClient,System.Uri,System.String,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.ProducerConsumerCollectionExtensions">
            <summary>Extension methods for IProducerConsumerCollection.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.Clear``1(System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>Clears the collection by repeatedly taking elements until it's empty.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The collection to be cleared.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.GetConsumingEnumerable``1(System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>Creates an enumerable which will consume and return elements from the collection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The collection to be consumed.</param>
            <returns>An enumerable that consumes elements from the collection and returns them.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.AddFromEnumerable``1(System.Collections.Concurrent.IProducerConsumerCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds the contents of an enumerable to the collection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target collection to be augmented.</param>
            <param name="source">The source enumerable containing the data to be added.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.AddFromObservable``1(System.Collections.Concurrent.IProducerConsumerCollection{``0},System.IObservable{``0})">
            <summary>Adds the contents of an observable to the collection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target collection to be augmented.</param>
            <param name="source">The source observable containing the data to be added.</param>
            <param name="completeAddingWhenDone">
            Whether to mark the target collection as complete for adding when 
            all elements of the source observable have been transfered.
            </param>
            <returns>An IDisposable that may be used to cancel the transfer.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.ToProducerOnlyCollection``1(System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>Creates an add-only facade for the collection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The collection to be wrapped.</param>
            <returns>
            An IProducerConsumerCollection that wraps the target collection and supports only add
            functionality, not take.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ProducerConsumerCollectionExtensions.ToConsumerOnlyCollection``1(System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>Creates a take-only facade for the collection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The collection to be wrapped.</param>
            <returns>
            An IProducerConsumerCollection that wraps the target collection and supports only take
            functionality, not add.
            </returns>
        </member>
        <member name="T:System.LazyExtensions">
            <summary>Extension methods for Lazy.</summary>
        </member>
        <member name="M:System.LazyExtensions.Force``1(System.Lazy{``0})">
            <summary>Forces value creation of a Lazy instance.</summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>The initialized Lazy instance.</returns>
        </member>
        <member name="M:System.LazyExtensions.GetValueAsync``1(System.Lazy{``0})">
            <summary>Retrieves the value of a Lazy asynchronously.</summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>A Task representing the Lazy's value.</returns>
        </member>
        <member name="M:System.LazyExtensions.Create``1(``0)">
            <summary>Creates a Lazy that's already been initialized to a specified value.</summary>
            <typeparam name="T">The type of the data to be initialized.</typeparam>
            <param name="value">The value with which to initialize the Lazy instance.</param>
            <returns>The initialized Lazy.</returns>
        </member>
        <member name="T:System.Linq.LinqToTasks">
            <summary>
            Provides LINQ support for Tasks by implementing the primary standard query operators.
            </summary>
        </member>
        <member name="T:System.Linq.LinqToTasks.OneElementGrouping`2">
            <summary>Represents a grouping of one element.</summary>
            <typeparam name="TKey">The type of the key for the element.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="T:System.Linq.ParallelLinqOptions">
            <summary>Provides a grouping for common Parallel LINQ options.</summary>
        </member>
        <member name="P:System.Linq.ParallelLinqOptions.ExecutionMode">
            <summary>Gets or sets the execution mode.</summary>
        </member>
        <member name="P:System.Linq.ParallelLinqOptions.MergeOptions">
            <summary>Gets or sets the merge options.</summary>
        </member>
        <member name="P:System.Linq.ParallelLinqOptions.Ordered">
            <summary>Gets or sets whether the query should retain ordering.</summary>
        </member>
        <member name="T:System.Threading.Tasks.ParallelOptionsExtensions">
            <summary>Extension methods for ParallelOptions.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ParallelOptionsExtensions.ShallowClone(System.Threading.Tasks.ParallelOptions)">
            <summary>Copies a ParallelOptions instance to a shallow clone.</summary>
            <param name="options">The options to be cloned.</param>
            <returns>The shallow clone.</returns>
        </member>
        <member name="T:System.Linq.ParallelLinqExtensions">
            <summary>Extension methods for Parallel LINQ.</summary>
        </member>
        <member name="M:System.Linq.ParallelLinqExtensions.TakeTop``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Int32)">
            <summary>Takes the top elements as if they were sorted.</summary>
            <typeparam name="TSource">Specifies the type of the elements.</typeparam>
            <typeparam name="TKey">Specifies the type of the keys used to compare elements.</typeparam>
            <param name="source">The source elements.</param>
            <param name="keySelector">A function used to extract a key from each element.</param>
            <param name="count">The number of elements to take.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.ParallelLinqExtensions.MapReduce``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{System.Linq.IGrouping{``2,``1},``3})">
            <summary>Implements a map-reduce operation.</summary>
            <typeparam name="TSource">Specifies the type of the source elements.</typeparam>
            <typeparam name="TMapped">Specifies the type of the mapped elements.</typeparam>
            <typeparam name="TKey">Specifies the type of the element keys.</typeparam>
            <typeparam name="TResult">Specifies the type of the results.</typeparam>
            <param name="source">The source elements.</param>
            <param name="map">A function used to get the target data from a source element.</param>
            <param name="keySelector">A function used to get a key from the target data.</param>
            <param name="reduce">A function used to reduce a group of elements.</param>
            <returns>The result elements of the reductions.</returns>
        </member>
        <member name="M:System.Linq.ParallelLinqExtensions.MapReduce``4(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{System.Linq.IGrouping{``2,``1},System.Collections.Generic.IEnumerable{``3}})">
            <summary>Implements a map-reduce operation.</summary>
            <typeparam name="TSource">Specifies the type of the source elements.</typeparam>
            <typeparam name="TMapped">Specifies the type of the mapped elements.</typeparam>
            <typeparam name="TKey">Specifies the type of the element keys.</typeparam>
            <typeparam name="TResult">Specifies the type of the results.</typeparam>
            <param name="source">The source elements.</param>
            <param name="map">A function used to get an enumerable of target data from a source element.</param>
            <param name="keySelector">A function used to get a key from target data.</param>
            <param name="reduce">A function used to reduce a group of elements to an enumerable of results.</param>
            <returns>The result elements of the reductions.</returns>
        </member>
        <member name="M:System.Linq.ParallelLinqExtensions.OutputToProducerConsumerCollection``1(System.Linq.ParallelQuery{``0},System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>Runs the query and outputs its results into the target collection.</summary>
            <typeparam name="TSource">Specifies the type of elements output from the query.</typeparam>
            <param name="source">The source query.</param>
            <param name="target">The target collection.</param>
        </member>
        <member name="M:System.Linq.ParallelLinqExtensions.AsParallel``1(System.Collections.Generic.IEnumerable{``0},System.Linq.ParallelLinqOptions)">
            <summary>This is the method to opt into Parallel LINQ.</summary>
            <typeparam name="TSource">Specifies the type of elements provided to the query.</typeparam>
            <param name="source">The source query.</param>
            <param name="parallelOptions">The options to use for query processing.</param>
            <returns>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
        </member>
        <member name="T:System.Linq.ParallelLinqExtensions.DescendingDefaultComparer`1">
            <summary>A comparer that comparers using the inverse of the default comparer.</summary>
            <typeparam name="T">Specifies the type being compared.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.TaskCompletionSourceExtensions">
            <summary>Extension methods for TaskCompletionSource.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtrasExtensions">
            <summary>Extensions methods for Task.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ContinueWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskFactory)">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ContinueWith``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskFactory)">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ContinueWith``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ContinueWith``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ToAsync(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Creates a Task that represents the completion of another Task, and 
            that schedules an AsyncCallback to run upon completion.
            </summary>
            <param name="task">The antecedent Task.</param>
            <param name="callback">The AsyncCallback to run.</param>
            <param name="state">The object state to use with the AsyncCallback.</param>
            <returns>The new task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ToAsync``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Creates a Task that represents the completion of another Task, and 
            that schedules an AsyncCallback to run upon completion.
            </summary>
            <param name="task">The antecedent Task.</param>
            <param name="callback">The AsyncCallback to run.</param>
            <param name="state">The object state to use with the AsyncCallback.</param>
            <returns>The new task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.IgnoreExceptions``1(System.Threading.Tasks.Task{``0})">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.FailFastOnException(System.Threading.Tasks.Task)">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.FailFastOnException``1(System.Threading.Tasks.Task{``0})">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.PropagateExceptions(System.Threading.Tasks.Task)">
            <summary>Propagates any exceptions that occurred on the specified task.</summary>
            <param name="task">The Task whose exceptions are to be propagated.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.PropagateExceptions(System.Threading.Tasks.Task[])">
            <summary>Propagates any exceptions that occurred on the specified tasks.</summary>
            <param name="task">The Tassk whose exceptions are to be propagated.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>Creates an IObservable that represents the completion of a Task.</summary>
            <typeparam name="TResult">Specifies the type of data returned by the Task.</typeparam>
            <param name="task">The Task to be represented as an IObservable.</param>
            <returns>An IObservable that represents the completion of the Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.</summary>
            <typeparam name="TResult">Specifies the type of data contained in the task.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.</summary>
            <typeparam name="TResult">Specifies the type of data contained in the task.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.AttachToParent(System.Threading.Tasks.Task)">
            <summary>
            Ensures that a parent task can't transition into a completed state
            until the specified task has also completed, even if it's not
            already a child task.
            </summary>
            <param name="task">The task to attach to the current task as a child.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.WaitWithPumping(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, pumping in the meantime.</summary>
            <param name="task">The task for which to wait.</param>
            <remarks>This method is intended for usage with Windows Presentation Foundation.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.WaitForCompletionStatus(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, returning the task's final status.</summary>
            <param name="task">The task for which to wait.</param>
            <returns>The completion status of the task.</returns>
            <remarks>Unlike Wait, this method will not throw an exception if the task ends in the Faulted or Canceled state.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then(System.Threading.Tasks.Task,System.Action)">
            <summary>Creates a task that represents the completion of a follow-up action when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The action to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the action.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0})">
            <summary>Creates a task that represents the completion of a follow-up function when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The function to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the function.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>Creates a task that represents the completion of a follow-up action when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The action to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the action.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>Creates a task that represents the completion of a follow-up function when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The function to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the function.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task based on the result of the first task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtrasExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task based on the result of the first.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtrasExtensions.TaskObservable`1">
            <summary>An implementation of IObservable that wraps a Task.</summary>
            <typeparam name="TResult">The type of data returned by the task.</typeparam>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtrasExtensions.CancelOnDispose">
            <summary>Translate a call to IDisposable.Dispose to a CancellationTokenSource.Cancel.</summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskFactoryExtensions">
            <summary>Extensions for TaskFactory.</summary>
            <summary>Extensions for TaskFactory.</summary>
            <summary>Extensions for TaskFactory.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.WhenAll(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.WhenAll``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.WhenAny(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.WhenAny``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromException(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory,``0)">
            <summary>Creates a Task that has completed in the RanToCompletion state with the specified result.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromCancellation(System.Threading.Tasks.TaskFactory,System.Threading.CancellationToken)">
            <summary>Creates a Task that has completed in the Canceled state with the specified CancellationToken.</summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromCancellation``1(System.Threading.Tasks.TaskFactory,System.Threading.CancellationToken)">
            <summary>Creates a Task that has completed in the Canceled state with the specified CancellationToken.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory{``0},System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory{``0},``0)">
            <summary>Creates a Task that has completed in the RanToCompletion state with the specified result.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromCancellation``1(System.Threading.Tasks.TaskFactory{``0},System.Threading.CancellationToken)">
            <summary>Creates a Task that has completed in the Canceled state with the specified CancellationToken.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.ToGeneric``1(System.Threading.Tasks.TaskFactory)">
            <summary>Creates a generic TaskFactory from a non-generic one.</summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.ToNonGeneric``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a generic TaskFactory from a non-generic one.</summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.GetTargetScheduler(System.Threading.Tasks.TaskFactory)">
            <summary>Gets the TaskScheduler instance that should be used to schedule tasks.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.GetTargetScheduler``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>Gets the TaskScheduler instance that should be used to schedule tasks.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.ContinuationOptionsFromCreationOptions(System.Threading.Tasks.TaskCreationOptions)">
            <summary>Converts TaskCreationOptions into TaskContinuationOptions.</summary>
            <param name="creationOptions"></param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32)">
            <summary>Creates a Task that will complete after the specified delay.</summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <returns>A Task that will be completed after the specified duration.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Threading.CancellationToken)">
            <summary>Creates a Task that will complete after the specified delay.</summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the timed task.</param>
            <returns>A Task that will be completed after the specified duration and that's cancelable with the specified token.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0})">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.FromAsync(System.Threading.Tasks.TaskFactory,System.Threading.WaitHandle)">
            <summary>Creates a Task that will be completed when the specified WaitHandle is signaled.</summary>
            <param name="factory">The target factory.</param>
            <param name="waitHandle">The WaitHandle.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.TrackedSequence(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task}[])">
            <summary>Asynchronously executes a sequence of tasks, maintaining a list of all tasks processed.</summary>
            <param name="factory">The TaskFactory to use to create the task.</param>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <returns>A Task that will return the list of tracked tasks iterated.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactoryExtensions.TrackedSequenceInternal(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task}},System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{System.Threading.Tasks.Task}})">
            <summary>Creates the enumerable to iterate through with Iterate.</summary>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <param name="tcs">The TaskCompletionSource to resolve with the asynchronous results.</param>
            <returns>The enumerable through which to iterate.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskFactoryExtensions.DelegateCache`1">
            <summary>A cache of delegates.</summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="F:System.Threading.Tasks.TaskFactoryExtensions.DelegateCache`1.DefaultResult">
            <summary>Function that returns default(TResult).</summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskSchedulerExtensions">
            <summary>Extension methods for TaskScheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskSchedulerExtensions.ToSynchronizationContext(System.Threading.Tasks.TaskScheduler)">
            <summary>Gets a SynchronizationContext that targets this TaskScheduler.</summary>
            <param name="scheduler">The target scheduler.</param>
            <returns>A SynchronizationContext that targets this scheduler.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext">
            <summary>Provides a SynchronizationContext wrapper for a TaskScheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the context with the specified scheduler.</summary>
            <param name="scheduler">The scheduler to target.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches a synchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:System.Threading.Algorithms.ParallelAlgorithms">
            <summary>
            Provides parallelized algorithms for common operations.
            </summary>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.For(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Action{System.Numerics.BigInteger})">
            <summary>Executes a for loop in which iterations may run in parallel.</summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.For(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Threading.Tasks.ParallelOptions,System.Action{System.Numerics.BigInteger})">
            <summary>Executes a for loop in which iterations may run in parallel.</summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="options">A System.Threading.Tasks.ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Range(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>Creates an enumerable that iterates the range [fromInclusive, toExclusive).</summary>
            <param name="fromInclusive">The lower bound, inclusive.</param>
            <param name="toExclusive">The upper bound, exclusive.</param>
            <returns>The enumerable of the range.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Filter``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Filters an input list, running a predicate over each element of the input.</summary>
            <typeparam name="T">Specifies the type of data in the list.</typeparam>
            <param name="input">The list to be filtered.</param>
            <param name="predicate">The predicate to use to determine which elements pass.</param>
            <returns>A new list containing all those elements from the input that passed the filter.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Filter``1(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Boolean})">
            <summary>Filters an input list, running a predicate over each element of the input.</summary>
            <typeparam name="T">Specifies the type of data in the list.</typeparam>
            <param name="input">The list to be filtered.</param>
            <param name="parallelOptions">Options to use for the execution of this filter.</param>
            <param name="predicate">The predicate to use to determine which elements pass.</param>
            <returns>A new list containing all those elements from the input that passed the filter.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Action{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Int32})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Int64})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ForRange``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Map``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>Executes a map operation, converting an input list into an output list, in parallel.</summary>
            <typeparam name="TInput">Specifies the type of the input data.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data.</typeparam>
            <param name="input">The input list to be mapped used the transform function.</param>
            <param name="transform">The transform function to use to map the input data to the output data.</param>
            <returns>The output data, transformed using the transform function.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Map``2(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,``1})">
            <summary>Executes a map operation, converting an input list into an output list, in parallel.</summary>
            <typeparam name="TInput">Specifies the type of the input data.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data.</typeparam>
            <param name="input">The input list to be mapped used the transform function.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="transform">The transform function to use to map the input data to the output data.</param>
            <returns>The output data, transformed using the transform function.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Reduce``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input data using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="input">The input data to be reduced.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Reduce``1(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input data using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="input">The input data to be reduced.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Reduce``1(System.Int32,System.Int32,System.Func{System.Int32,``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input range using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="mapOperation">The function used to retrieve the data to be reduced for a given index.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Reduce``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input range using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="mapOperation">The function used to retrieve the data to be reduced for a given index.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>Computes a parallel prefix scan over the source enumerable using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="source">The source data over which a prefix scan should be computed.</param>
            <param name="function">The function to use for the scan.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Boolean)">
            <summary>Computes a parallel prefix scan over the source enumerable using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="source">The source data over which a prefix scan should be computed.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="loadBalance">Whether to load-balance during process.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ScanInPlace``1(``0[],System.Func{``0,``0,``0})">
            <summary>Computes a parallel prefix scan in-place on an array using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="data">The data over which a prefix scan should be computed. Upon exit, stores the results.</param>
            <param name="function">The function to use for the scan.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ScanInPlace``1(``0[],System.Func{``0,``0,``0},System.Boolean)">
            <summary>Computes a parallel prefix scan in-place on an array using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="data">The data over which a prefix scan should be computed. Upon exit, stores the results.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="loadBalance">Whether to load-balance during process.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceSerial``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32,System.Int32)">
            <summary>Computes a sequential prefix scan over the array using the specified function.</summary>
            <typeparam name="T">The type of the data in the array.</typeparam>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="arrStart">The start of the data in arr over which the scan is being computed.</param>
            <param name="arrLength">The length of the data in arr over which the scan is being computed.</param>
            <param name="skip">The inclusive distance between elements over which the scan is being computed.</param>
            <remarks>No parameter validation is performed.</remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ExclusiveScanInPlaceSerial``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32)">
            <summary>Computes a sequential exclusive prefix scan over the array using the specified function.</summary>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="lowerBoundInclusive">The inclusive lower bound of the array at which to start the scan.</param>
            <param name="upperBoundExclusive">The exclusive upper bound of the array at which to end the scan.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceWithLoadBalancingParallel``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32,System.Int32)">
            <summary>Computes a parallel prefix scan over the array using the specified function.</summary>
            <typeparam name="T">The type of the data in the array.</typeparam>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="arrStart">The start of the data in arr over which the scan is being computed.</param>
            <param name="arrLength">The length of the data in arr over which the scan is being computed.</param>
            <param name="skip">The inclusive distance between elements over which the scan is being computed.</param>
            <remarks>No parameter validation is performed.</remarks>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceParallel``1(``0[],System.Func{``0,``0,``0})">
            <summary>Computes a parallel inclusive prefix scan over the array using the specified function.</summary>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``1(``0[])">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[])">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeFor``1(System.Int32,System.Int32,System.Func{System.Int32,``0})">
            <summary>Executes a function for each value in a range, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="fromInclusive">The start of the range, inclusive.</param>
            <param name="toExclusive">The end of the range, exclusive.</param>
            <param name="options">The options to use for processing the loop.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeFor``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,``0})">
            <summary>Executes a function for each value in a range, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="fromInclusive">The start of the range, inclusive.</param>
            <param name="toExclusive">The end of the range, exclusive.</param>
            <param name="options">The options to use for processing the loop.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Executes a function for each element in a source, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="source">The input elements to be processed.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,``1})">
            <summary>Executes a function for each element in a source, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="source">The input elements to be processed.</param>
            <param name="options">The options to use for processing the loop.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeInvoke``1(System.Func{``0}[])">
            <summary>Invokes the specified functions, potentially in parallel, canceling outstanding invocations once one completes.</summary>
            <typeparam name="T">Specifies the type of data returned by the functions.</typeparam>
            <param name="functions">The functions to be executed.</param>
            <returns>A result from executing one of the functions.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.SpeculativeInvoke``1(System.Threading.Tasks.ParallelOptions,System.Func{``0}[])">
            <summary>Invokes the specified functions, potentially in parallel, canceling outstanding invocations once one completes.</summary>
            <typeparam name="T">Specifies the type of data returned by the functions.</typeparam>
            <param name="options">The options to use for the execution.</param>
            <param name="functions">The functions to be executed.</param>
            <returns>A result from executing one of the functions.</returns>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Wavefront(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>Process in parallel a matrix where every cell has a dependency on the cell above it and to its left.</summary>
            <param name="numRows">The number of rows in the matrix.</param>
            <param name="numColumns">The number of columns in the matrix.</param>
            <param name="numBlocksPerRow">Partition the matrix into this number of blocks along the rows.</param>
            <param name="numBlocksPerColumn">Partition the matrix into this number of blocks along the columns.</param>
            <param name="processBlock">The action to invoke for every block, supplied with the start and end indices of the rows and columns.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.Wavefront(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>Process in parallel a matrix where every cell has a dependency on the cell above it and to its left.</summary>
            <param name="numRows">The number of rows in the matrix.</param>
            <param name="numColumns">The number of columns in the matrix.</param>
            <param name="processRowColumnCell">The action to invoke for every cell, supplied with the row and column indices.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ParallelWhile(System.Func{System.Boolean},System.Action)">
            <summary>Repeatedly executes an operation in parallel while the specified condition evaluates to true.</summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="body">The loop body.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.ParallelWhile(System.Threading.Tasks.ParallelOptions,System.Func{System.Boolean},System.Action)">
            <summary>Repeatedly executes an operation in parallel while the specified condition evaluates to true.</summary>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="condition">The condition to evaluate.</param>
            <param name="body">The loop body.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.WhileNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Action{``0}})">
            <summary>Processes data in parallel, allowing the processing function to add more data to be processed.</summary>
            <typeparam name="T">Specifies the type of data being processed.</typeparam>
            <param name="initialValues">The initial set of data to be processed.</param>
            <param name="body">The operation to execute for each value.</param>
        </member>
        <member name="M:System.Threading.Algorithms.ParallelAlgorithms.WhileNotEmpty``1(System.Threading.Tasks.ParallelOptions,System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Action{``0}})">
            <summary>Processes data in parallel, allowing the processing function to add more data to be processed.</summary>
            <typeparam name="T">Specifies the type of data being processed.</typeparam>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="initialValues">The initial set of data to be processed.</param>
            <param name="body">The operation to execute for each value.</param>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.ChunkPartitioner">
            <summary>
            Partitions an enumerable into chunks based on user-supplied criteria.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,System.Int32})">
            <summary>Creates a partitioner that chooses the next chunk size based on a user-supplied function.</summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="nextChunkSizeFunc">A function that determines the next chunk size based on the
            previous chunk size.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Creates a partitioner that always uses a user-specified chunk size.</summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="chunkSize">The chunk size to be used.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>Creates a partitioner that chooses chunk sizes between the user-specified min and max.</summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="minChunkSize">The minimum chunk size to use.</param>
            <param name="maxChunkSize">The maximum chunk size to use.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.ChunkPartitioner`1">
            <summary>
            Partitions an enumerable into chunks based on user-supplied criteria.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.ChunkPartitioner`1.GetOrderablePartitions(System.Int32)">
            <summary>
            Partitions the underlying collection into the specified number of orderable partitions.
            </summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>An object that can create partitions over the underlying data source.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.ChunkPartitioner`1.GetOrderableDynamicPartitions">
            <summary>
            Creates an object that can partition the underlying collection into a variable number of
            partitions.
            </summary>
            <returns>
            An object that can create partitions over the underlying data source.
            </returns>
        </member>
        <member name="P:System.Collections.Concurrent.Partitioners.ChunkPartitioner`1.SupportsDynamicPartitions">
            <summary>Gets whether additional partitions can be created dynamically.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.SingleItemPartitioner">
            <summary>Partitions a data source one item at a time.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a partitioner for an enumerable that partitions it one item at a time.</summary>
            <typeparam name="T">Specifies the type of data contained in the enumerable.</typeparam>
            <param name="source">The source enumerable to be partitioned.</param>
            <returns>The partitioner.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1">
            <summary>Partitions an enumerable one item at a time.</summary>
            <typeparam name="T">Specifies the type of data contained in the list.</typeparam>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1._source">
            <summary>The enumerable to be partitioned.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes the partitioner.</summary>
            <param name="source">The enumerable to be partitioned.</param>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.GetOrderableDynamicPartitions">
            <summary>Gets a list of the specified static number of partitions.</summary>
            <param name="partitionCount">The static number of partitions to create.</param>
            <returns>The list of created partitions ready to be iterated.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.SupportsDynamicPartitions">
            <summary>Gets whether this partitioner supports dynamic partitioning (it does).</summary>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator">
            <summary>Dynamically generates a partitions on a shared enumerator.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._sharedEnumerator">
            <summary>The source enumerator shared amongst all partitions.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._nextAvailablePosition">
            <summary>The next available position to be yielded.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._remainingPartitions">
            <summary>The number of partitions remaining to be disposed, potentially including this dynamic generator.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._disposed">
            <summary>Whether this dynamic partitioner has been disposed.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.#ctor(System.Collections.Generic.IEnumerator{`0},System.Boolean)">
            <summary>Initializes the dynamic generator.</summary>
            <param name="sharedEnumerator">The enumerator shared by all partitions.</param>
            <param name="requiresDisposal">Whether this generator will be disposed.</param>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.System#IDisposable#Dispose">
            <summary>Closes the shared enumerator if all other partitions have completed.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.GetEnumerator">
            <summary>Increments the number of partitions in use and returns a new partition.</summary>
            <returns>The new partition.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.GetEnumeratorCore">
            <summary>Creates a partition.</summary>
            <returns>The new partition.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1">
            <summary>Partitions a list one item at a time.</summary>
            <typeparam name="T">Specifies the type of data contained in the list.</typeparam>
        </member>
        <member name="F:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1._source">
            <summary>The list to be partitioned.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>Initializes the partitioner.</summary>
            <param name="source">The list to be partitioned.</param>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderablePartitions(System.Int32)">
            <summary>Gets a list of the specified static number of partitions.</summary>
            <param name="partitionCount">The static number of partitions to create.</param>
            <returns>The list of created partitions ready to be iterated.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderableDynamicPartitions">
            <summary>Creates a dynamic partitioner for creating a dynamic number of partitions.</summary>
            <returns>The dynamic partitioner.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderableDynamicPartitionsCore(System.Collections.Generic.IList{`0},System.Runtime.CompilerServices.StrongBox{System.Int32})">
            <summary>An enumerable that creates individual enumerators that all work together to partition the list.</summary>
            <param name="source">The list being partitioned.</param>
            <param name="nextIteration">An integer shared between partitions denoting the next available index in the source.</param>
            <returns>An enumerable that generates enumerators which participate in partitioning the list.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.SupportsDynamicPartitions">
            <summary>Gets whether this partitioner supports dynamic partitioning (it does).</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave">
            <summary>Provides concurrent and exclusive task schedulers that coordinate.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._internalLock">
            <summary>Synchronizes all activity in this type and its generated schedulers.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._parallelOptions">
            <summary>The parallel options used by the asynchronous task and parallel loops.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._concurrentTaskScheduler">
            <summary>The scheduler used to queue and execute "reader" tasks that may run concurrently with other readers.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._exclusiveTaskScheduler">
            <summary>The scheduler used to queue and execute "writer" tasks that must run exclusively while no other tasks for this interleave are running.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._taskExecuting">
            <summary>Whether this interleave has queued its processing task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._exclusiveProcessingIncludesChildren">
            <summary>Whether the exclusive processing of a task should include all of its children as well.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Boolean)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler,System.Boolean)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.NotifyOfNewWork">
            <summary>Notifies the interleave that new work has arrived to be processed.</summary>
            <remarks>Must only be called while holding the lock.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveProcessor">
            <summary>The body of the async processor to be run in a Task.  Only one should be running at a time.</summary>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExecuteConcurrentTask(System.Threading.Tasks.Task)">
            <summary>Runs a concurrent task.</summary>
            <param name="task">The task to execute.</param>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.GetConcurrentTasksUntilExclusiveExists">
            <summary>
            Gets an enumerable that yields waiting concurrent tasks one at a time until
            either there are no more concurrent tasks or there are any exclusive tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.GetExclusiveTasks">
            <summary>
            Gets an enumerable that yields all of the exclusive tasks one at a time.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that may run concurrently with other tasks on this interleave.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExclusiveTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that must run exclusively with regards to other tasks on this interleave.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExclusiveTaskCount">
            <summary>Gets the number of tasks waiting to run exclusively.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentTaskCount">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView">
            <summary>Provides a debug view for ConcurrentExclusiveInterleave.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView._interleave">
            <summary>The interleave being debugged.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.#ctor(System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave)">
            <summary>Initializes the debug view.</summary>
            <param name="interleave">The interleave being debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.ConcurrentTasksWaiting">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.InterleaveTask">
            <summary>Gets a description of the processing task for debugging purposes.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler">
            <summary>
            A scheduler shim used to queue tasks to the interleave and execute those tasks on request of the interleave.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._interleave">
            <summary>The parent interleave.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._maximumConcurrencyLevel">
            <summary>The maximum concurrency level for the scheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._processingTaskOnCurrentThread">
            <summary>Whether a Task is currently being processed on this thread.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.#ctor(System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave,System.Collections.Generic.Queue{System.Threading.Tasks.Task},System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="interleave">The parent interleave.</param>
            <param name="tasks">The queue to store queued tasks into.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Executes a task on this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute the task synchronously on this scheduler.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to the scheduler.</param>
            <returns>true if the task could be executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.GetScheduledTasks">
            <summary>Gets for debugging purposes the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of the tasks queued.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level this scheduler is able to support.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Tasks">
            <summary>Gets the queue of tasks for this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler">
            <summary>Provides a task scheduler that runs tasks on the current thread.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the Task was previously queued to the scheduler.</param>
            <returns>True if the Task was successfully executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.GetScheduledTasks">
            <summary>Gets the Tasks currently scheduled to this scheduler.</summary>
            <returns>An empty enumerable, as Tasks are never queued, only executed.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum degree of parallelism for this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler">
            <summary>Provides a TaskScheduler that uses an I/O completion port for concurrency control.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_tasks">
            <summary>The queue of tasks to be scheduled.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_iocp">
            <summary>The I/O completion port to use for concurrency control.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_schedulerThread">
            <summary>Whether the current thread is a scheduler thread.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_remainingThreadsToShutdown">
            <summary>Event used to wait for all threads to shutdown.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.#ctor(System.Int32,System.Int32)">
            <summary>Initializes the IOCompletionPortTaskScheduler.</summary>
            <param name="maxConcurrencyLevel">The maximum number of threads in the scheduler to be executing concurrently.</param>
            <param name="numAvailableThreads">The number of threads to have available in the scheduler for executing tasks.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.Dispose">
            <summary>Dispose of the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.GetScheduledTasks">
            <summary>Gets a list of all tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all scheduled tasks.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to this scheduler for execution.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Try to execute a task on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to this scheduler.</param>
            <returns>Whether the task was executed.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort">
            <summary>Provides a simple managed wrapper for an I/O completion port.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INFINITE_TIMEOUT">
            <summary>Infinite timeout value to use for GetQueuedCompletedStatus.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INVALID_FILE_HANDLE">
            <summary>An invalid file handle value.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INVALID_IOCP_HANDLE">
            <summary>An invalid I/O completion port handle value.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.m_handle">
            <summary>The I/O completion porth handle.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.#ctor(System.Int32)">
            <summary>Initializes the I/O completion port.</summary>
            <param name="maxConcurrencyLevel">The maximum concurrency level allowed by the I/O completion port.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.Dispose">
            <summary>Clean up.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.NotifyOne">
            <summary>Notify that I/O completion port that new work is available.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.WaitOne">
            <summary>Waits for an item on the I/O completion port.</summary>
            <returns>true if an item was available; false if the completion port closed before an item could be retrieved.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.CreateIoCompletionPort(System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32)">
            <summary>
            Creates an input/output (I/O) completion port and associates it with a specified file handle, 
            or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time.
            </summary>
            <param name="fileHandle">An open file handle or INVALID_HANDLE_VALUE.</param>
            <param name="existingCompletionPort">A handle to an existing I/O completion port or NULL.</param>
            <param name="completionKey">The per-handle user-defined completion key that is included in every I/O completion packet for the specified file handle.</param>
            <param name="numberOfConcurrentThreads">The maximum number of threads that the operating system can allow to concurrently process I/O completion packets for the I/O completion port.</param>
            <returns>If the function succeeds, the return value is the handle to an I/O completion port.  If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.GetQueuedCompletionStatus(System.IntPtr,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32)">
            <summary>Attempts to dequeue an I/O completion packet from the specified I/O completion port.</summary>
            <param name="completionPort">A handle to the completion port.</param>
            <param name="lpNumberOfBytes">A pointer to a variable that receives the number of bytes transferred during an I/O operation that has completed.</param>
            <param name="lpCompletionKey">A pointer to a variable that receives the completion key value associated with the file handle whose I/O operation has completed.</param>
            <param name="lpOverlapped">A pointer to a variable that receives the address of the OVERLAPPED structure that was specified when the completed I/O operation was started.</param>
            <param name="dwMilliseconds">The number of milliseconds that the caller is willing to wait for a completion packet to appear at the completion port. </param>
            <returns>Returns nonzero (TRUE) if successful or zero (FALSE) otherwise.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.PostQueuedCompletionStatus(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Posts an I/O completion packet to an I/O completion port.</summary>
            <param name="completionPort">A handle to the completion port.</param>
            <param name="dwNumberOfBytesTransferred">The value to be returned through the lpNumberOfBytesTransferred parameter of the GetQueuedCompletionStatus function.</param>
            <param name="dwCompletionKey">The value to be returned through the lpCompletionKey parameter of the GetQueuedCompletionStatus function.</param>
            <param name="lpOverlapped">The value to be returned through the lpOverlapped parameter of the GetQueuedCompletionStatus function.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.QueuedTaskScheduler">
            <summary>
            Provides a TaskScheduler that provides control over priorities, fairness, and the underlying threads utilized.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._queueGroups">
            <summary>
            A sorted list of round-robin queue lists.  Tasks with the smallest priority value
            are preferred.  Priority groups are round-robin'd through in order of priority.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._disposeCancellation">
            <summary>Cancellation token used for disposal.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._concurrencyLevel">
            <summary>
            The maximum allowed concurrency level of this scheduler.  If custom threads are
            used, this represents the number of created threads.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._taskProcessingThread">
            <summary>Whether we're processing tasks on the current thread.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._targetScheduler">
            <summary>The scheduler onto which actual work is scheduled.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._nonthreadsafeTaskQueue">
            <summary>The queue of tasks to process when using an underlying target scheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._delegatesQueuedOrRunning">
            <summary>The number of Tasks that have been queued or that are running whiel using an underlying scheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._threads">
            <summary>The threads used by the scheduler to process work.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler._blockingTaskQueue">
            <summary>The collection of tasks to be executed on our custom threads.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor">
            <summary>Initializes the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
            <param name="maxConcurrencyLevel">The maximum degree of concurrency allowed for this scheduler's work.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Int32,System.String,System.Boolean,System.Threading.ThreadPriority,System.Threading.ApartmentState,System.Int32,System.Action,System.Action)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
            <param name="threadName">The name to use for each of the created threads.</param>
            <param name="useForegroundThreads">A Boolean value that indicates whether to use foreground threads instead of background.</param>
            <param name="threadPriority">The priority to assign to each thread.</param>
            <param name="threadApartmentState">The apartment state to use for each thread.</param>
            <param name="threadMaxStackSize">The stack size to use for each thread.</param>
            <param name="threadInit">An initialization routine to run on each thread.</param>
            <param name="threadFinally">A finalization routine to run on each thread.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.ThreadBasedDispatchLoop(System.Action,System.Action)">
            <summary>The dispatch loop run by all threads in this scheduler.</summary>
            <param name="threadInit">An initialization routine to run when the thread begins.</param>
            <param name="threadFinally">A finalization routine to run before the thread ends.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.FindNextTask_NeedsLock(System.Threading.Tasks.Task@,System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue@)">
            <summary>Find the next task that should be executed, based on priorities and fairness and the like.</summary>
            <param name="targetTask">The found task, or null if none was found.</param>
            <param name="queueForTargetTask">
            The scheduler associated with the found task.  Due to security checks inside of TPL,  
            this scheduler needs to be used to execute that task.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.ProcessPrioritizedAndBatchedTasks">
            <summary>
            Process tasks one at a time in the best order.  
            This should be run in a Task generated by QueueTask.
            It's been separated out into its own method to show up better in Parallel Tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.NotifyNewWorkItem">
            <summary>Notifies the pool that there's a new item to be executed in one of the round-robin queues.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
            <remarks>This does not include the tasks on sub-schedulers.  Those will be retrieved by the debugger separately.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.Dispose">
            <summary>Initiates shutdown of the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.ActivateNewQueue">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <returns>The newly created and activated queue at priority 0.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.ActivateNewQueue(System.Int32)">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <param name="priority">The priority level for the new queue.</param>
            <returns>The newly created and activated queue at the specified priority.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.RemoveQueue_NeedsLock(System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.DebugQueueCount">
            <summary>Gets the number of queues currently activated.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.DebugTaskCount">
            <summary>Gets the number of tasks currently scheduled.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView">
            <summary>Debug view for the QueuedTaskScheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.#ctor(System.Threading.Tasks.Schedulers.QueuedTaskScheduler)">
            <summary>Initializes the debug view.</summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.ScheduledTasks">
            <summary>Gets all of the Tasks queued to the scheduler directly.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.Queues">
            <summary>Gets the prioritized and fair queues.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup">
            <summary>A group of queues a the same priority level.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup.NextQueueIndex">
            <summary>The starting index for the next round-robin traversal.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup.CreateSearchOrder">
            <summary>Creates a search order through this group.</summary>
            <returns>An enumerable of indices for this group.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue">
            <summary>Provides a scheduling queue associatd with a QueuedTaskScheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._pool">
            <summary>The scheduler with which this pool is associated.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._workItems">
            <summary>The work items stored in this queue.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._disposed">
            <summary>Whether this queue has been disposed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._priority">
            <summary>Gets the priority for this queue.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.#ctor(System.Int32,System.Threading.Tasks.Schedulers.QueuedTaskScheduler)">
            <summary>Initializes the queue.</summary>
            <param name="priority">The priority associated with this queue.</param>
            <param name="pool">The scheduler with which this queue is associated.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Runs the specified ask.</summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Dispose">
            <summary>Signals that the queue should be removed from the scheduler as soon as the queue is empty.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.WaitingTasks">
            <summary>Gets the number of tasks waiting in this scheduler.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView">
            <summary>A debug view for the queue.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView._queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.#ctor(System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Initializes the debug view.</summary>
            <param name="queue">The queue to be debugged.</param>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Priority">
            <summary>Gets the priority of this queue in its associated scheduler.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Id">
            <summary>Gets the ID of this scheduler.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.ScheduledTasks">
            <summary>Gets all of the tasks scheduled to this queue.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.AssociatedScheduler">
            <summary>Gets the QueuedTaskScheduler with which this queue is associated.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.IOTaskScheduler">
            <summary>Provides a task scheduler that targets the I/O ThreadPool.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOTaskScheduler.#ctor">
            <summary>Initializes a new instance of the IOTaskScheduler class.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOTaskScheduler.Dispose">
            <summary>Disposes of resources used by the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.IOTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
            <remarks>This implementation will always return an empty enumerable.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.IOTaskScheduler.WorkItem">
            <summary>Represents a task queued to the I/O pool.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.OrderedTaskScheduler">
            <summary>
            Provides a task scheduler that ensures only one task is executing at a time, and that tasks
            execute in the order that they were queued.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.OrderedTaskScheduler.#ctor">
            <summary>Initializes an instance of the OrderedTaskScheduler class.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler">
            <summary>Provides a task scheduler that supports reprioritizing previously queued tasks.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.Prioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the front of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the front of the queue.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.Deprioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the back of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the back of the queue.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Removes a previously queued item from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be removed from the scheduler.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.ProcessNextQueuedItem(System.Object)">
            <summary>Picks up and executes the next item in the queue.</summary>
            <param name="ignored">Ignored.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes the specified task inline.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>Whether the task could be executed inline.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently queued to the scheduler.</summary>
            <returns>An enumerable of the tasks currently queued to the scheduler.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup">
            <summary>Enables the creation of a group of schedulers that support round-robin scheduling for fairness.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.CreateScheduler">
            <summary>Creates a new scheduler as part of this group.</summary>
            <returns>The new scheduler.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RemoveQueue_NeedsLock(System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.NotifyNewWorkItem">
            <summary>Notifies the ThreadPool that there's a new item to be executed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.Schedulers">
            <summary>Gets a collection of all schedulers in this group.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue">
            <summary>A scheduler that participates in round-robin scheduling.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.StaTaskScheduler">
            <summary>Provides a scheduler that uses STA threads.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.StaTaskScheduler._tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.StaTaskScheduler._threads">
            <summary>The STA threads used by the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.StaTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StaTaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.StaTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.StaTaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.StaTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.StaTaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.StaTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler">
            <summary>Provides a task scheduler that targets a specific SynchronizationContext.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler._tasks">
            <summary>The queue of tasks to execute, maintained for debugging purposes.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler._context">
            <summary>The target context under which to execute the queued tasks.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.#ctor">
            <summary>Initializes an instance of the SynchronizationContextTaskScheduler class.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes an instance of the SynchronizationContextTaskScheduler class
            with the specified SynchronizationContext.
            </summary>
            <param name="context">The SynchronizationContext under which to execute tasks.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.ThreadPerTaskScheduler">
            <summary>Provides a task scheduler that dedicates a thread per task.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks currently scheduled to this scheduler.</summary>
            <remarks>This will always return an empty enumerable, as tasks are launched as soon as they're queued.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Starts a new thread to process the provided task.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler">
            <summary>Provides a work-stealing scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.#ctor">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <remarks>This constructors defaults to using twice as many threads as there are processors.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <param name="concurrencyLevel">The number of threads to use in the scheduler.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be scheduled.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently scheduled to this scheduler.</summary>
            <returns>An enumerable containing all of the scheduled tasks.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.AddWsq(System.Threading.Tasks.Schedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Adds a work-stealing queue to the set of queues.</summary>
            <param name="wsq">The queue to be added.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.RemoveWsq(System.Threading.Tasks.Schedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Remove a work-stealing queue from the set of queues.</summary>
            <param name="wsq">The work-stealing queue to remove.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.DispatchLoop">
            <summary>
            The dispatch loop run by each thread in the scheduler.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.Dispose">
            <summary>Signal the scheduler to shutdown and wait for all threads to finish.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.WorkStealingQueue`1">
            <summary>A work-stealing queue.</summary>
            <typeparam name="T">Specifies the type of data stored in the queue.</typeparam>
        </member>
    </members>
</doc>
