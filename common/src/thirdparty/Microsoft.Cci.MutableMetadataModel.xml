<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.MutableMetadataModel</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            
            </summary>
            <param name="targetHost">An object representing the application that will host the copies made by this copier.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IUnit)">
            <summary>
            
            </summary>
            <param name="targetHost">An object representing the application that will host the copies made by this copier.</param>
            <param name="targetUnit">The unit of metadata into which copies made by this copier will be inserted.</param>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.targetHost">
            <summary>
            An object representing the application that will host the copies made by this copier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IAliasForType)">
            <summary>
            Returns a shallow copy of the specified alias for type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Returns a shallow copy of the given array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IAssembly)">
            <summary>
            Returns a shallow copy of the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Returns a shallow copy of the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Returns a shallow copy of the given custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ICustomModifier)">
            <summary>
            Returns a shallow copy of the given custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IEventDefinition)">
            <summary>
            Returns a shallow copy of the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IEventDefinition)">
            <summary>
            Returns a shallow copy of the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns a shallow copy of the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns a shallow copy of the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a shallow copy of the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a shallow copy of the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IFileReference)">
            <summary>
            Returns a shallow copy of the given file reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Returns a shallow copy of the given function pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Returns a shallow copy of the given generic method instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Returns a shallow copy of the given generic method parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Returns a shallow copy of the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Returns a shallow copy of the given generic type instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Returns a shallow copy of the given generic type parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Returns a shallow copy of the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Returns a shallow copy of the given global field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Returns a shallow copy of the given global method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Returns a shallow copy of the specified local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Returns a shallow copy of the given managed pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Returns a shallow copy of the given marshalling information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Returns a shallow copy of the given metadata constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Returns a shallow copy of the given metadata array creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Returns a shallow copy of the given metadata expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Returns a shallow copy of the given metadata named argument expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Returns a shallow copy of the given metadata typeof expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns a shallow copy of the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns a shallow copy of the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns a shallow copy of the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Returns a shallow copy of the given method implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a shallow copy of the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a shallow copy of the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Returns a shallow copy of the given modified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.MutableCodeModel.Module)">
            <summary>
            Returns a shallow copy of the given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IModuleReference)">
            <summary>
            Returns a shallow copy of the given module reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Returns a shallow copy of the specified named type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Returns a shallow copy of the given alias for a namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IUnitNamespace)">
            <summary>
            Returns a shallow copy of the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Returns a shallow copy of the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Returns a shallow copy of the given namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Returns a shallow copy of the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Returns a shallow copy of the given nested type alias.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Returns a shallow copy of the given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Returns a shallow copy of the given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Returns a shallow copy of the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Returns a shallow copy of the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Returns a shallow copy of the given nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Returns a shallow copy of the given nested unit namespace reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IOperation)">
            <summary>
            Returns a shallow copy of the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            Returns a shallow copy of the specified operation exception information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Returns a shallow copy of the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Returns a shallow copy of the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IPESection)">
            <summary>
            Returns a shallow copy of the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            Returns a shallow copy of the specified platform invoke information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Returns a shallow copy of the given pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Returns a shallow copy of the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.CopyUnspecialized(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Returns a shallow copy of the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Returns a shallow copy of the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Returns a shallow copy of the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IResourceReference)">
            <summary>
            Returns a shallow copy of the given reference to a manifest resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Returns a shallow copy of the given security attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Returns a shallow copy of the given specialized field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Returns a shallow copy of the given specialized method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ISpecializedNestedTypeDefinition)">
            <summary>
            Returns a shallow copy of the given specialized nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Returns a shallow copy of the given specialized nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns a shallow copy of the specified type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Returns a shallow copy of the specified type member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a shallow copy of the specified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IUnitReference)">
            <summary>
            Returns a shallow copy of the specified unit reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataShallowCopier.Copy(Microsoft.Cci.IWin32Resource)">
            <summary>
            Returns a shallow copy of the given Win32 resource.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            </summary>
            <param name="targetHost">An object representing the application that will host the copies made by this copier.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IUnit)">
            <summary>
            </summary>
            <param name="targetHost">An object representing the application that will host the copies made by this copier.</param>
            <param name="targetUnit">The unit of metadata into which copies made by this copier will be inserted.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.MutableCodeModel.MetadataShallowCopier)">
            <summary>
            
            </summary>
            <param name="targetHost"></param>
            <param name="shallowCopier"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IAliasForType)">
            <summary>
            Returns a deep copy of the specified alias for type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Returns a shallow copy of the given array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IAssembly)">
            <summary>
            Returns a deep copy of the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Returns a deep copy of the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Returns a deep copy of the given custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ICustomModifier)">
            <summary>
            Returns a deep copy of the given custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IEventDefinition)">
            <summary>
            Returns a deep copy of the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.CopyMethodBody(Microsoft.Cci.IMethodBody,Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns a deep copy of the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns a deep copy of the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a deep copy of the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.CopyUnspecialized(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a deep copy of the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IFileReference)">
            <summary>
            Returns a deep copy of the given file reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Returns a deep copy of the given function pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Returns a deep copy of the given generic method instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Returns a deep copy of the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Returns a deep copy of the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Returns a deep copy of the given generic type parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Returns a deep copy of the given generic type instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Returns a deep copy of the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Returns a deep copy of the given global field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Returns a deep copy of the given global method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Returns a deep copy of the specified local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Returns a deep copy of the given managed pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Returns a deep copy of the given marshalling information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Returns a deep copy of the given metadata constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Returns a deep copy of the given metadata array creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Returns a deep copy of the given metadata expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Returns a deep copy of the given metadata named argument expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Returns a deep copy of the given metadata typeof expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns a deep copy of the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns a deep copy of the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Returns a deep copy of the given method implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a deep copy of the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.CopyUnspecialized(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a deep copy of the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Returns a deep copy of the given modified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IModule)">
            <summary>
            Returns a deep copy of the given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IModuleReference)">
            <summary>
            Returns a deep copy of the given module reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Returns a deep copy of the specified named type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Returns a deep copy of the given alias for a namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Returns a deep copy of the given namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Returns a deep copy of the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Returns a deep copy of the given nested type alias.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Returns a deep copy of the given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Returns a deep copy of the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.CopyUnspecialized(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Returns a deep copy of the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Returns a deep copy of the given nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Returns a deep copy of the given nested unit namespace reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IOperation)">
            <summary>
            Returns a deep copy of the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            Returns a deep copy of the specified operation exception information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Returns a deep copy of the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Returns a deep copy of the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IPESection)">
            <summary>
            Returns a deep copy of the given PE section.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            Returns a deep copy of the specified platform invoke information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Returns a deep copy of the given pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Returns a deep copy of the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IResourceReference)">
            <summary>
            Returns a deep copy of the given reference to a manifest resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Returns a deep copy of the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Returns a deep copy of the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Returns a deep copy of the given security attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Returns a deep copy of the given specialized field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Returns a deep copy of the given specialized method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Returns a deep copy of the given specialized nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns a deep copy of the specified type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Returns a deep copy of the specified type member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a deep copy of the specified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IUnitNamespace)">
            <summary>
            Returns a deep copy of the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Returns a deep copy of the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(Microsoft.Cci.IWin32Resource)">
            <summary>
            Returns a deep copy of the given Win32 resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Copy(System.Collections.Generic.List{Microsoft.Cci.IDefinition})">
            <summary>
            Replaces each element of the given list with a deep copy of itself.
            </summary>
            <param name="definitions"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.GetExistingCopyIfInsideCone(Microsoft.Cci.IParameterDefinition)">
            <summary>
            If the parameter has already been copied, return the copy. If not, assume that it is outside the cone and return this original.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.GetExistingCopyIfInsideCone(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            If the property has already been copied, return the copy. If not, assume that it is outside the cone and return this original.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Populator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Substitutor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Substitutor.host">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Substitutor.DefinitionCache">
            <summary>
            Unless a definition is outside the cone to be copied, it must have an entry in this table.
            Consult this to find containing definitions.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataDeepCopier.Substitutor.ReferenceCache">
            <summary>
            A cache of references that have already been encountered and copied. Once in the cache, the cached value is just returned unchanged.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataCopier">
             <summary>
             A class that produces a mutable deep copy a given metadata model node. 
             
             </summary>
             <remarks>
             The copy provided by this class is achieved in two phases. First, we define a mapping of cones by calling AddDefinition(A)
             for def-node(s) A(s) that is the root(s) of the cone. Then we call Substitute(A) for an A that is in the cone to get a copy of A. 
             
             The mapping is reflected in the cache, which is a mapping from object to objects. It has dual roles. The first is to define the new
             copies of the def-nodes in the cone. The second, which is to ensure isomorphism of the two graphs, will be discussed later. 
            
             The is populated for definitions in the setup phase either by the contructor or by a sequence of calls to AddDefinition(). After 
             the return from the constructor (with a list of IDefinitions), or after the first Substitute method, the cone has been fixed. 
             Further calls to addDefinitions will result in an ApplicationException. 
             
             [Substitute method]
             Given a cache c and a definition A, Substitute(c, A) returns a deep copy of A in which any node B is replaced by c(B). An exception 
             is thrown if c(B) is not already defined. 
             
             If A is a reference, Substitute(c, A) return a copy of A in which all the references to a node B in the domain of c now point to
             c(B). 
             
             [Internal Working and Auxiliary Copy Functions]
             When AddDefinition(A) is called, a traverser is created to populate c with pairs (B, B') for sub def nodes of A, causing c changed to c1.
             
             In the substitution phase, DeepCopy methods are used. For a def-node B, DeepCopy(c1, B) first tries to look up in the cache for B, then
             it calls GetMutableShallowCopy(B) on a cache miss. Either way, we get a mutable B', DeepCopy is performed recursively on the sub nodes
             of B' (which, should be B's subnodes at the moment). The fact that we are seeing B as a definition normally means that B must be in someone's cone. 
             If B is not in c1's domain, an error must have been committed. A few exceptions are when a subnode contains a pointer to a parent def-node (but not
             a ref node), in which case GetMutableShallowCopyIfExists are used, because the parent is allowed to be outside the cone. Examples include
             a method body points to its method definition.
             
             To deep copy a ref-node C, unless it is a short cut, a copy is made and its subnodes recursively deep copied.
             
             </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            Create a copier with an empty mapping. The copier will maintain the isomorphism between the original and the copy. 
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IDefinition,System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition}@)">
            <summary>
            Create a copier with a mapping betweem subdefinitions of rootOfCone and their new copy.   
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="rootOfCone">An definition that defines one (of the possibly many) root of the cone.</param>
            <param name="newTypes">Copies of the the type definitions in the cone under rootOfCone. This collection of type defs will be useful
            for the computation of all the types in the module. </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.AddDefinition(Microsoft.Cci.IDefinition,System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition}@)">
            <summary>
            Given a root of cone as an IDefinition, call the right AddDefinition method according to the type of the root. 
            </summary>
            <param name="rootOfCone">The root node of a cone, which we will copy later on.</param>
            <param name="newTypes">Copies of the the old type definitions in the cone. This collection of type defs will be useful
            for the computation of all the types in the module. </param>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataCopier.cache">
            <summary>
            Maintains the mapping between nodes and their copies. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataCopier.flatListOfTypes">
            <summary>
            All the types created during copying. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataCopier.host">
            <summary>
            A metadata host.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IAliasForType)">
            <summary>
            Create a mutable shallow copy according to the type of aliasForType.
            </summary>
            <param name="aliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IAssemblyReference)">
            <summary>
            
            </summary>
            <param name="assemblyReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ICustomAttribute)">
            <summary>
            
            </summary>
            <param name="customAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ICustomModifier)">
            <summary>
            
            </summary>
            <param name="customModifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IEventDefinition)">
            <summary>
            
            </summary>
            <param name="eventDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IFieldDefinition)">
            <summary>
            
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IFieldReference)">
            <summary>
            
            </summary>
            <param name="fieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IFileReference)">
            <summary>
            
            </summary>
            <param name="fileReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="functionPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            
            </summary>
            <param name="genericMethodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            
            </summary>
            <param name="genericMethodParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            
            </summary>
            <param name="genericTypeInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            
            </summary>
            <param name="genericTypeParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            
            </summary>
            <param name="genericTypeParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            
            </summary>
            <param name="globalFieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            
            </summary>
            <param name="globalMethodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ILocalDefinition)">
            <summary>
            
            </summary>
            <param name="localDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="managedPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            
            </summary>
            <param name="marshallingInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMetadataConstant)">
            <summary>
            
            </summary>
            <param name="metadataConstant"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            
            </summary>
            <param name="metadataCreateArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            
            </summary>
            <param name="metadataNamedArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            
            </summary>
            <param name="metadataTypeOf"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMethodDefinition)">
            <summary>
            
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMethodBody)">
            <summary>
            
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMethodImplementation)">
            <summary>
            
            </summary>
            <param name="methodImplementation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            
            </summary>
            <param name="modifiedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IModule)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IModuleReference)">
            <summary>
            
            </summary>
            <param name="moduleReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            
            </summary>
            <param name="namespaceAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            
            </summary>
            <param name="namespaceTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            
            </summary>
            <param name="namespaceTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INestedAliasForType)">
            <summary>
            
            </summary>
            <param name="nestedAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            
            </summary>
            <param name="nestedTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INestedTypeReference)">
            <summary>
            
            </summary>
            <param name="nestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IOperation)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            
            </summary>
            <param name="operationExceptionInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IParameterDefinition)">
            <summary>
            
            </summary>
            <param name="parameterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            
            </summary>
            <param name="parameterTypeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IPESection)">
            <summary>
            
            </summary>
            <param name="peSection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            
            </summary>
            <param name="platformInvokeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="pointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            
            </summary>
            <param name="propertyDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IResourceReference)">
            <summary>
            
            </summary>
            <param name="resourceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ISectionBlock)">
            <summary>
            
            </summary>
            <param name="sectionBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            
            </summary>
            <param name="securityAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            
            </summary>
            <param name="specializedFieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            
            </summary>
            <param name="specializedMethodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            
            </summary>
            <param name="specializedNestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableShallowCopy(Microsoft.Cci.IWin32Resource)">
            <summary>
            
            </summary>
            <param name="win32Resource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableMatrixShallowCopy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            
            </summary>
            <param name="matrixTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableVectorShallowCopy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            
            </summary>
            <param name="vectorTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetTypeSpecificMutableShallowCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            Get a mutable copy of the given method reference. 
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.AliasForType)">
            <summary>
            Visit alias for type.
            </summary>
            <param name="aliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.Assembly)">
            <summary>
            Visits the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.AssemblyReference)">
            <summary>
            Visits the specified assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.CustomAttribute)">
            <summary>
            Visits the specified custom attribute.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.CustomModifier)">
            <summary>
            Visits the specified custom modifier.
            </summary>
            <param name="customModifier">The custom modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.EventDefinition)">
            <summary>
            Visits the specified event definition.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.FieldDefinition)">
            <summary>
            Visits the specified field definition.
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.FieldReference)">
            <summary>
            Visits the specified field reference.
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.FileReference)">
            <summary>
            Visits the specified file reference.
            </summary>
            <param name="fileReference">The file reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference)">
            <summary>
            Visits the specified function pointer type reference.
            </summary>
            <param name="functionPointerTypeReference">The function pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference)">
            <summary>
            Visits the specified generic method instance reference.
            </summary>
            <param name="genericMethodInstanceReference">The generic method instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IGenericMethodParameter},Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visits the specified generic method parameters.
            </summary>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <param name="declaringMethod">The declaring method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericMethodParameter)">
            <summary>
            Visits the specified generic method parameter.
            </summary>
            <param name="genericMethodParameter">The generic method parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference)">
            <summary>
            Visits the specified generic method parameter reference.
            
            </summary>
            <remarks>
            Avoid circular copy. 
            </remarks>
            <param name="genericMethodParameterReference">The generic method parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference)">
            <summary>
            Visits the specified generic type parameter reference.
            </summary>
            <param name="genericTypeParameterReference">The generic type parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition)">
            <summary>
            Visits the specified global field definition.
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition)">
            <summary>
            Visits the specified global method definition.
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference)">
            <summary>
            Visits the specified generic type instance reference.
            </summary>
            <param name="genericTypeInstanceReference">The generic type instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericParameter)">
            <summary>
            Visits the specified generic parameter.
            </summary>
            <param name="genericParameter">The generic parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.GenericTypeParameter)">
            <summary>
            Visits the specified generic type parameter.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IAliasForType)">
            <summary>
            Deep copy an alias for type.
            </summary>
            <param name="aliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IAliasMember)">
            <summary>
            Deep copy an alias member. 
            </summary>
            <param name="aliasMember"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Visits the specified assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Visits the specified array type reference.
            </summary>
            <param name="arrayTypeReference">The array type reference.</param>
            <returns></returns>
            <remarks>Array types are not nominal types, so always visit the reference, even if it is a definition.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IEventDefinition)">
            <summary>
            Deep copy an event definition. 
            </summary>
            <param name="eventDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Deep copy a field definition. 
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IFieldReference)">
            <summary>
            Visits the specified field reference.
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Visit the generic method instance reference. 
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Visits the specified generic method parameter reference.
            </summary>
            <param name="genericMethodParameterReference">The generic method parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Visits the specified generic type parameter reference.
            </summary>
            <param name="genericTypeParameterReference">The generic type parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Visits the specified generic type instance reference.
            </summary>
            <param name="genericTypeInstanceReference">The generic type instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Visits the specified global field definition.
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Visits the specified global method definition.
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.ILocation)">
            <summary>
            Visits the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visits the specified method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            Visits the specified method reference.
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Makes a deep copy of the specified namespace type alias.
            </summary>
            <param name="namespaceAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INamespaceMember)">
            <summary>
            Visits the specified namespace member.
            </summary>
            <param name="namespaceMember">The namespace member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Visits the specified namespace type reference.
            </summary>
            <param name="namespaceTypeReference">The namespace type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Visits the specified nested type reference.
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IAliasForType})">
            <summary>
            Visits the specified aliases for types.
            </summary>
            <param name="aliasesForTypes">The aliases for types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IAliasMember})">
            <summary>
            Deep copy a list of alias member without copying the list. 
            </summary>
            <param name="aliasMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IAssemblyReference})">
            <summary>
            Visits the specified assembly references.
            </summary>
            <param name="assemblyReferences">The assembly references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the specified custom attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the specified custom modifiers.
            </summary>
            <param name="customModifiers">The custom modifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IEventDefinition})">
            <summary>
            Visits the specified event definitions.
            </summary>
            <param name="eventDefinitions">The event definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IFieldDefinition})">
            <summary>
            Visits the specified field definitions.
            </summary>
            <param name="fieldDefinitions">The field definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IFileReference})">
            <summary>
            Visits the specified file references.
            </summary>
            <param name="fileReferences">The file references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IGenericTypeParameter})">
            <summary>
            Visits the specified generic type parameters.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IModuleReference})">
            <summary>
            Visits the specified module references.
            </summary>
            <param name="moduleReferences">The module references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ILocation})">
            <summary>
            Visits the specified locations.
            </summary>
            <param name="locations">The locations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ILocalDefinition})">
            <summary>
            Visits the specified locals.
            </summary>
            <param name="locals">The locals.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IMetadataExpression})">
            <summary>
            Visits the specified metadata expressions.
            </summary>
            <param name="metadataExpressions">The metadata expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IMetadataNamedArgument})">
            <summary>
            Visits the specified named arguments.
            </summary>
            <param name="namedArguments">The named arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IMethodDefinition})">
            <summary>
            Visits the specified method definitions.
            </summary>
            <param name="methodDefinitions">The method definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IMethodImplementation})">
            <summary>
            Visits the specified method implementations.
            </summary>
            <param name="methodImplementations">The method implementations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IMethodReference})">
            <summary>
            Visits the specified method references.
            </summary>
            <param name="methodReferences">The method references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IModule})">
            <summary>
            Visits the specified modules.
            </summary>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.VisitPrivateHelperMembers(System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            Visits the private helper members.
            </summary>
            <param name="typeDefinitions">The type definitions.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.INamespaceMember})">
            <summary>
            Visits the specified namespace members.
            </summary>
            <param name="namespaceMembers">The namespace members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.INestedTypeDefinition})">
            <summary>
            Visits the specified nested type definitions.
            </summary>
            <param name="nestedTypeDefinitions">The nested type definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IOperation})">
            <summary>
            Visits the specified operations.
            </summary>
            <param name="operations">The operations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IOperationExceptionInformation})">
            <summary>
            Visits the specified exception informations.
            </summary>
            <param name="exceptionInformations">The exception informations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ITypeDefinitionMember})">
            <summary>
            Visits the specified type definition members.
            </summary>
            <param name="typeDefinitionMembers">The type definition members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IWin32Resource})">
            <summary>
            Visits the specified win32 resources.
            </summary>
            <param name="win32Resources">The win32 resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.LocalDefinition)">
            <summary>
            Visits the specified local definition.
            </summary>
            <param name="localDefinition">The local definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference)">
            <summary>
            Visits the specified managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference">The pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits the specified marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MetadataConstant)">
            <summary>
            Visits the specified constant.
            </summary>
            <param name="constant">The constant.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MetadataCreateArray)">
            <summary>
            Visits the specified create array.
            </summary>
            <param name="createArray">The create array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MethodDefinition)">
            <summary>
            Visits the specified method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MetadataNamedArgument)">
            <summary>
            Visits the specified named argument.
            </summary>
            <param name="namedArgument">The named argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MetadataTypeOf)">
            <summary>
            Visits the specified type of.
            </summary>
            <param name="typeOf">The type of.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MatrixTypeReference)">
            <summary>
            Visits the specified matrix type reference.
            </summary>
            <param name="matrixTypeReference">The matrix type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MethodBody)">
            <summary>
            Visits the specified method body.
            </summary>
            <param name="methodBody">The method body.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MethodImplementation)">
            <summary>
            Visits the specified method implementation.
            </summary>
            <param name="methodImplementation">The method implementation.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataCopier.currentMethodReference">
            <summary>
            Current method reference being visited. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.MethodReference)">
            <summary>
            Visits the specified method reference.
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ModifiedTypeReference)">
            <summary>
            Visits the specified modified type reference.
            </summary>
            <param name="modifiedTypeReference">The modified type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.Module)">
            <summary>
            Visits the specified module.
            </summary>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ModuleReference)">
            <summary>
            Visits the specified module reference.
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NamespaceAliasForType)">
            <summary>
            Visits the specified namespace alias for type.
            </summary>
            <param name="namespaceAliasForType">Type of the namespace alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition)">
            <summary>
            Visits the specified namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NamespaceTypeReference)">
            <summary>
            Visits the specified namespace type reference.
            </summary>
            <param name="namespaceTypeReference">The namespace type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NestedAliasForType)">
            <summary>
            Visits the specified nested alias for type.
            </summary>
            <param name="nestedAliasForType">Type of the nested alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.OperationExceptionInformation)">
            <summary>
            Visits the specified operation exception information.
            </summary>
            <param name="operationExceptionInformation">The operation exception information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.Operation)">
            <summary>
            Visits the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NestedTypeDefinition)">
            <summary>
            Visits the specified nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NestedTypeReference)">
            <summary>
            Visits the specified nested type reference.
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.SpecializedFieldReference)">
            <summary>
            Visits the specified specialized field reference.
            </summary>
            <param name="specializedFieldReference">The specialized field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.SpecializedMethodReference)">
            <summary>
            Visits the specified specialized method reference.
            </summary>
            <param name="specializedMethodReference">The specialized method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference)">
            <summary>
            Visits the specified specialized nested type reference.
            </summary>
            <param name="specializedNestedTypeReference">The specialized nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NamedTypeDefinition)">
            <summary>
            Replaces the child nodes of the given mutable type definition with the results of running the mutator over them. 
            Note that when overriding this method, care must be taken to add the given mutable type definition to this.flatListOfTypes.
            </summary>
            <param name="typeDefinition">A mutable type definition.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ITypeReference})">
            <summary>
            Visits the specified type references.
            </summary>
            <param name="typeReferences">The type references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Visits the specified pointer type reference.
            </summary>
            <param name="pointerTypeReference">The pointer type reference.</param>
            <returns></returns>
            <remarks>
            Pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Visits the specified function pointer type reference.
            </summary>
            <param name="functionPointerTypeReference">The function pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Visits the specified managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference">The managed pointer type reference.</param>
            <returns></returns>
            <remarks>
            Managed pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Visits the specified modified type reference.
            </summary>
            <param name="modifiedTypeReference">The modified type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IModuleReference)">
            <summary>
            Visits the specified module reference.
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Visits the specified namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Visits the specified nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.ITypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference.
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Visits the specified nested unit namespace reference.
            </summary>
            <param name="nestedUnitNamespaceReference">The nested unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference)">
            <summary>
            Visits the specified nested unit namespace reference.
            </summary>
            <param name="nestedUnitNamespaceReference">The nested unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IUnitReference)">
            <summary>
            Visits the specified unit reference.
            </summary>
            <param name="unitReference">The unit reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Visits the specified parameter definitions.
            </summary>
            <param name="parameterDefinitions">The parameter definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ParameterDefinition)">
            <summary>
            Visits the specified parameter definition.
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Visits the specified parameter type information list.
            </summary>
            <param name="parameterTypeInformationList">The parameter type information list.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ParameterTypeInformation)">
            <summary>
            Visits the specified parameter type information.
            </summary>
            <param name="parameterTypeInformation">The parameter type information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation)">
            <summary>
            Visits the specified platform invoke information.
            </summary>
            <param name="platformInvokeInformation">The platform invoke information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IPropertyDefinition})">
            <summary>
            Visits the specified property definitions.
            </summary>
            <param name="propertyDefinitions">The property definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Visits the specified property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.PropertyDefinition)">
            <summary>
            Visits the specified property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.PointerTypeReference)">
            <summary>
            Visits the specified pointer type reference.
            </summary>
            <param name="pointerTypeReference">The pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.IResourceReference})">
            <summary>
            Visits the specified resource references.
            </summary>
            <param name="resourceReferences">The resource references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.ResourceReference)">
            <summary>
            Visits the specified resource reference.
            </summary>
            <param name="resourceReference">The resource reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(System.Collections.Generic.List{Microsoft.Cci.ISecurityAttribute})">
            <summary>
            Visits the specified security attributes.
            </summary>
            <param name="securityAttributes">The security attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Visits the specified root unit namespace reference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.RootUnitNamespace)">
            <summary>
            Visits the specified root unit namespace.
            </summary>
            <param name="rootUnitNamespace">The root unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference)">
            <summary>
            Visits the specified root unit namespace reference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.SecurityAttribute)">
            <summary>
            Visits the specified security customAttribute.
            </summary>
            <param name="securityAttribute">The security customAttribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.SectionBlock)">
            <summary>
            Visits the specified section block.
            </summary>
            <param name="sectionBlock">The section block.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.TypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.TypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.Unit)">
            <summary>
            Visits the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.UnitNamespace)">
            <summary>
            Visits the specified unit namespace.
            </summary>
            <param name="unitNamespace">The unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.UnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference.
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.VectorTypeReference)">
            <summary>
            Visits the specified vector type reference.
            </summary>
            <param name="vectorTypeReference">The vector type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.MutableCodeModel.Win32Resource)">
            <summary>
            Visits the specified win32 resource.
            </summary>
            <param name="win32Resource">The win32 resource.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Gets the mutable copy if it exists. Use the ifItExists method a subnode contains (points to) a parent node that 
            is a definition, or a local or a property definition is used in the code. 
            </summary>
            <param name="localDefinition">The local definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Get a mutable copy of a method definition if it exists. Use the ifItExists method a subnode contains (points to) a parent node that 
            is a definition, or a local or a property definition is used in the code. 
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.INamespaceDefinition)">
            <summary>
            Get a mutable copy of a namespace definition. Use the ifItExists method a subnode contains (points to) a parent node that 
            is a definition, or a local or a property definition is used in the code. 
            </summary>
            <param name="namespaceDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Gets the mutable copy of a parameter definition if it exists. Use the ifItExists method a subnode contains (points to) a parent node that 
            is a definition, or a local or a property definition is used in the code. 
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.ISignature)">
             <summary>
             Gets the mutable copy  of a signature. if it exists. Use the ifItExists method a subnode contains (points to) a parent node that 
             is a definition, or a local or a property definition is used in the code. 
             </summary>
            <param name="signature"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.ITypeDefinition)">
            <summary>
            
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.IUnit)">
            <summary>
            Gets the mutable copy of a type definition. if it exists. Use the ifItExists method a subnode contains (points to) a parent node that 
            is a definition, or a local or a property definition is used in the code. 
            </summary>
            <param name="unitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.GetMutableCopyIfItExists(Microsoft.Cci.IUnitNamespace)">
            <summary>
            
            </summary>
            <param name="unitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopyMethodReturnValueAttributes(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the method return value attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopyMethodReturnValueCustomModifiers(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the method return value custom modifiers.
            </summary>
            <param name="customModifers">The custom modifers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopyMethodReturnValueMarshallingInformation(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits the method return value marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IAssembly)">
            <summary>
            Returns a mutable deep copy of the given assembly.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references. For the purposes of this call, the
            table for interning is what is needed.</param>
            <param name="assembly">The assembly to copied.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a mutable deep copy of the given method reference.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references. For the purposes of this call, the
            table for interning is what is needed.</param>
            <param name="methodReference">The method reference to copied.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IModule)">
            <summary>
            Returns a mutable deep copy of the given module.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references. For the purposes of this call, the
            table for interning is what is needed.</param>
            <param name="module">The module to copied.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.DeepCopy(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a mutable deep copy of the given type reference.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references. For the purposes of this call, the
            table for interning is what is needed.</param>
            <param name="typeReference">The type reference to copied.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IAliasForType)">
            <summary>
            Makes a deep copy of the specified alias for type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Makes a deep copy of the specified array type reference.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataCopier.coneAlreadyFixed">
            <summary>
            True iff all the def nodes in the cone have been collected. After this flag is set to 
            true, future call to AddDefinition will raise an ApplicationException. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.AddDefinition(Microsoft.Cci.IAssembly)">
            <summary>
            Assembly is the root of the cone. collect all sub def-nodes. 
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IAssembly)">
            <summary>
            Makes a deep copy of the specified assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Makes a deep copy of the specified assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Makes a deep copy of the specified custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.ICustomModifier)">
            <summary>
            Makes a deep copy of the specified custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IEventDefinition)">
            <summary>
            Makes a deep copy of the specified event.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Substitute a definition inside the cone. 
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IFieldReference)">
            <summary>
            Substitute a field reference according to its kind. 
            </summary>
            <param name="fieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IFileReference)">
            <summary>
            Substitute a file reference.
            </summary>
            <param name="fileReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Substitute a function pointer type reference. 
            </summary>
            <param name="functionPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Substitute a generic method instance reference. 
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Substitute a generic method parameter. 
            </summary>
            <param name="genericMethodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Substitute a generic method parameter reference. 
            </summary>
            <param name="genericMethodParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Substitute a global field defintion. 
            </summary>
            <param name="globalFieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Substitute a global method definition. 
            </summary>
            <param name="globalMethodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Substitute a generic type instance reference. 
            </summary>
            <param name="genericTypeInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Substitute a generic type parameter. 
            </summary>
            <param name="genericTypeParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Substitute a generic type parameter reference. 
            </summary>
            <param name="genericTypeParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Substitute a managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Substitute a marshalling information object. 
            </summary>
            <param name="marshallingInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Substitute a metadata constant. 
            </summary>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Substitute a metadata create array. 
            </summary>
            <param name="createArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Substitute a named argument. 
            </summary>
            <param name="namedArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Substitute a meta data type of node. 
            </summary>
            <param name="typeOf"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMethodBody)">
            <summary>
            Substitute a method body.
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Substitute a method definition. 
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Substitute a method implementation. 
            </summary>
            <param name="methodImplementation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IMethodReference)">
            <summary>
            Substitute a method reference. 
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Substitute a modified type reference. 
            </summary>
            <param name="modifiedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.AddDefinition(Microsoft.Cci.IModule)">
            <summary>
            Add sub def-nodes of module to the cone. 
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IModule)">
            <summary>
            Substitution over a module. 
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IModuleReference)">
            <summary>
            Substitute a module reference. 
            </summary>
            <param name="moduleReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Subsitute a namesapce alias for type. 
            </summary>
            <param name="namespaceAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Substitute a namespace type definition. 
            </summary>
            <param name="namespaceTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Substitute a namespace type reference. 
            </summary>
            <param name="namespaceTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Substitute a nested alias for type. 
            </summary>
            <param name="nestedAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Subsitute a nested type definition. 
            </summary>
            <param name="nestedTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Substitute a nested type reference. 
            </summary>
            <param name="nestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Substitute a nested unit namespace. 
            </summary>
            <param name="nestedUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Substitute a nested unit namespace reference. 
            </summary>
            <param name="nestedUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.INestedUnitSetNamespace)">
            <summary>
            Substitute a nested unit set namespace. Not implemented. 
            </summary>
            <param name="nestedUnitSetNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Substitute a parameter definition.
            </summary>
            <param name="parameterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Substitute a parameter type information object. 
            </summary>
            <param name="parameterTypeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Substitute a pointer type reference. 
            </summary>
            <param name="pointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Substitute a property definition. 
            </summary>
            <param name="propertyDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IResourceReference)">
            <summary>
            Substitute a resource reference. 
            </summary>
            <param name="resourceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Substitute a root unit namespace. 
            </summary>
            <param name="rootUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Substitute a root unit namespace reference. 
            </summary>
            <param name="rootUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IRootUnitSetNamespace)">
            <summary>
            Substitute a root unit set namespace. Not implemented. 
            </summary>
            <param name="rootUnitSetNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Substitute a security attribute. 
            </summary>
            <param name="securityAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.ITypeReference)">
            <summary>
            Substitute a type reference according to its kind. 
            </summary>
            <param name="typeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IUnitSet)">
            <summary>
            Substitute a unit set. Not implemented. 
            </summary>
            <param name="unitSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.Substitute(Microsoft.Cci.IWin32Resource)">
            <summary>
            Substitute a Win32 resource.
            </summary>
            <param name="win32Resource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCopier.TypeOrderPreserver.Compare(Microsoft.Cci.INamedTypeDefinition,Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions">
            <summary>
            A helper class that makes copies of every definition that may be referenced
            before it will be encountered during a standard traversal. This excludes structural
            definitions that exist only as the result of resolving references to structural types.
            In other words, this makes early (and shallow) copies of fields, methods and types
            so that they can be referenced before being deep copied.
            </summary>
            <remarks>
            CollectAndShallowCopyDefinitions visits namespace and below. Assembly and module 
            should be cached by the caller to make sure the right kind (assembly or module) is copied. 
            
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.#ctor(Microsoft.Cci.MutableCodeModel.MetadataCopier,System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            A helper class that makes copies of every definition that may be referenced
            before it will be encountered during a standard traversal. This excludes structural
            definitions that exist only as the result of resolving references to structural types.
            In other words, this makes early (and shallow) copies of fields, methods and types
            so that they can be referenced before being deep copied.
            </summary>
            <param name="copier"></param>
            <param name="newTypes"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Visit a field definition. 
            </summary>
            <param name="fieldDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Visit a global field definition. 
            </summary>
            <param name="globalFieldDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Visit a global method definition. 
            </summary>
            <param name="globalMethodDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visit a method definition.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Visit a namespace type definition. 
            </summary>
            <param name="namespaceTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Visit a nested type definition.
            </summary>
            <param name="nestedTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Visit an generic method parameter. 
            </summary>
            <param name="genericMethodParameter"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Visit a generic type parameter.
            </summary>
            <param name="genericTypeParameter"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IEventDefinition)">
            <summary>
            Visit an event definition. 
            </summary>
            <param name="eventDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Visit a local definition. 
            </summary>
            <param name="localDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Visit a root unit namespace.
            </summary>
            <param name="rootUnitNamespace"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Visit an INestedUnitNamespace
            </summary>
            <param name="nestedUnitNamespace"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Visit an IParameterDefinition. Create a mutable parameter definition if one is not already created. 
            </summary>
            <param name="parameterDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CollectAndShallowCopyDefinitions.Visit(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Visit an IPropertyDefinition. Create a mutable PropertyDefinition if one is not already created. 
            </summary>
            <param name="propertyDefinition"></param>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataConstant">
            <summary>
            An expression that does not change its value at runtime and can be evaluated at compile time.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataExpression">
            <summary>
            An expression that can be represented directly in metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ICopyFrom`1">
            <summary>
            Implemented by mutable objects that provide a method that makes the mutable object a copy of a given immutable object.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ICopyFrom`1.Copy(`0,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this mutable object a copy of the given immutable object.
            </summary>
            <param name="objectToCopy">An immutable object that implements the same object model interface as this mutable object.</param>
            <param name="internFactory">The intern factory to use for computing the interned identity (if applicable) of this mutable object.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataExpression.#ctor">
            <summary>
            An expression that can be represented directly in metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataExpression.Copy(Microsoft.Cci.IMetadataExpression,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of an expression that can be represented directly in metadata.
            </summary>
            <param name="metadataExpression"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataExpression.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IStatement. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataExpression.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataExpression.Type">
            <summary>
            The type of value the expression represents.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataConstant.#ctor">
            <summary>
            An expression that does not change its value at runtime and can be evaluated at compile time.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataConstant.Copy(Microsoft.Cci.IMetadataConstant,Microsoft.Cci.IInternFactory)">
            <summary>
            An expression that does not change its value at runtime and can be evaluated at compile time.
            </summary>
            <param name="metadataConstant">A template from which to construct a shallow copy.</param>
            <param name="internFactory">The intern factory to use for computing the interned identity (if applicable) of this mutable object.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataConstant.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor(IMetadataConstant).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataConstant.Value">
            <summary>
            The compile time value of the expression. Can be null.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataCreateArray">
            <summary>
            An expression that creates an array instance in metadata. Only for use in custom attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.#ctor">
            <summary>
            An expression that creates an array instance in metadata. Only for use in custom attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.Copy(Microsoft.Cci.IMetadataCreateArray,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of an expression that creates an array instance in metadata. Only for use in custom attributes.
            </summary>
            <param name="createArray"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMetadataCreateArray).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.ElementType">
            <summary>
            The element type of the array.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.Initializers">
            <summary>
            The initial values of the array elements. May be empty.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.LowerBounds">
            <summary>
            The index value of the first element in each dimension.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.Rank">
            <summary>
            The number of dimensions of the array.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataCreateArray.Sizes">
            <summary>
            The number of elements allowed in each dimension.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument">
            <summary>
            An expression that represents a (name, value) pair and that is typically used in method calls, custom attributes and object initializers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.#ctor">
            <summary>
            An expression that represents a (name, value) pair and that is typically used in method calls, custom attributes and object initializers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.Copy(Microsoft.Cci.IMetadataNamedArgument,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of an expression that represents a (name, value) pair and that is typically used in method calls, custom attributes and object initializers.
            </summary>
            <param name="namedArgument"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMetadataNamedArgument).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.ArgumentName">
            <summary>
            The name of the parameter or property or field that corresponds to the argument.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.ArgumentValue">
            <summary>
            The value of the argument.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.IsField">
            <summary>
            True if the named argument provides the value of a field.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataNamedArgument.ResolvedDefinition">
            <summary>
            Returns either null or the parameter or property or field that corresponds to this argument.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataTypeOf">
            <summary>
            An expression that results in a System.Type instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataTypeOf.#ctor">
            <summary>
            An expression that results in a System.Type instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataTypeOf.Copy(Microsoft.Cci.IMetadataTypeOf,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of an expression that results in a System.Type instance.
            </summary>
            <param name="typeOf"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataTypeOf.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMetadataTypeOf).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MetadataTypeOf.TypeToGet">
            <summary>
            The type that will be represented by the System.Type instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.EventDefinition">
            <summary>
            An event is a member that enables an object or class to provide notifications. Clients can attach executable code for events by supplying event handlers.
            This interface models the metadata representation of an event.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Copy(Microsoft.Cci.ITypeDefinitionMember,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="typeDefinitionMember"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.ContainingTypeDefinition">
            <summary>
            A reference to the containing type of the referenced type member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Visibility">
            <summary>
            Indicates if the member is public or confined to its containing type, derived types and/or declaring assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.Microsoft#Cci#ITypeMemberReference#ContainingType">
            <summary>
            The type definition that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeDefinitionMember.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.EventDefinition.#ctor">
            <summary>
            An event is a member that enables an object or class to provide notifications. Clients can attach executable code for events by supplying event handlers.
            This interface models the metadata representation of an event.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.EventDefinition.Copy(Microsoft.Cci.IEventDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of an event. An event is a member that enables an object or class to provide notifications.
            Clients can attach executable code for events by supplying event handlers.
            This interface models the metadata representation of an event.
            </summary>
            <param name="eventDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.EventDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IEventDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.EventDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Throws an InvalidOperation exception since valid Metadata never refers directly to an event.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.Accessors">
            <summary>
            A list of methods that are associated with the event.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.Adder">
            <summary>
            The method used to add a handler to the event.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.Caller">
            <summary>
            The method used to call the event handlers when the event occurs. May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.IsRuntimeSpecial">
            <summary>
            True if the event gets special treatment from the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.IsSpecialName">
            <summary>
            This event is special in some way, as specified by the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.Remover">
            <summary>
            The method used to add a handler to the event.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.EventDefinition.Type">
            <summary>
            The (delegate) type of the handlers that will handle the event.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.FieldDefinition">
            <summary>
            A field is a member that represents a variable associated with an object or class.
            This interface models the metadata representation of a field.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldDefinition.#ctor">
            <summary>
            A field is a member that represents a variable associated with an object or class.
            This interface models the metadata representation of a field.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldDefinition.Copy(Microsoft.Cci.IFieldDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of a field.
            A field is a member that represents a variable associated with an object or class.
            This interface models the metadata representation of a field.
            </summary>
            <param name="fieldDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IFieldDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IFieldReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.BitLength">
            <summary>
            The number of bits that form part of the value of the field.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.CompileTimeValue">
            <summary>
            The compile time value of the field. This value should be used directly in IL, rather than a reference to the field.
            If the field does not have a valid compile time value, Dummy.Constant is returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.CustomModifiers">
            <summary>
            Custom modifiers associated with the referenced field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.FieldMapping">
            <summary>
            Information of the location where this field is mapped to
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedField from all other fields obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsBitField">
            <summary>
            The field is aligned on a bit boundary and uses only the BitLength number of least significant bits of the representation of a Type value.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsCompileTimeConstant">
            <summary>
            This field is a compile-time constant. The field has no runtime location and cannot be directly addressed from IL.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsMapped">
            <summary>
            This field is mapped to an explicitly initialized (static) memory location.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsMarshalledExplicitly">
            <summary>
            This field has associated field marshalling information.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsModified">
            <summary>
            The referenced field has custom modifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsNotSerialized">
            <summary>
            The field does not have to be serialized when its containing instance is serialized.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsReadOnly">
            <summary>
            This field can only be read. Initialization takes place in a constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsRuntimeSpecial">
            <summary>
            True if the field gets special treatment from the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsSpecialName">
            <summary>
            This field is special in some way, as specified by the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.IsStatic">
            <summary>
            This field is static (shared by all instances of its declaring type).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.MarshallingInformation">
            <summary>
            Specifies how this field is marshalled when it is accessed from unmanaged code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.Offset">
            <summary>
            Offset of the field.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.SequenceNumber">
            <summary>
            The position of the field starting from 0 within the class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.Type">
            <summary>
            The type of value that is stored in this field.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldDefinition.ResolvedField">
            <summary>
            The Field being referred to.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.FieldReference">
            <summary>
            A reference to a field.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldReference.#ctor">
            <summary>
            A reference to a field.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldReference.Copy(Microsoft.Cci.IFieldReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of a reference to a field.
            </summary>
            <param name="fieldReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IFieldReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IFieldReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FieldReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.ContainingType">
            <summary>
            A reference to the containing type of the referenced type member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.CustomModifiers">
            <summary>
            Custom modifiers associated with the referenced field.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedField from all other fields obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.IsFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.IsModified">
            <summary>
            The referenced field has custom modifiers.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.IsStatic">
            <summary>
            This field is static (shared by all instances of its declaring type).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.ResolvedField">
            <summary>
            The Field being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FieldReference.Type">
            <summary>
            The type of value that is stored in this field.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition.Copy(Microsoft.Cci.IGlobalFieldDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="globalFieldDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition.ContainingNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MethodDefinition">
            <summary>
            The metadata representation of a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodDefinition.#ctor">
            <summary>
            The metadata representation of a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodDefinition.Copy(Microsoft.Cci.IMethodDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of the metadata representation of a method.
            </summary>
            <param name="methodDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.AcceptsExtraArguments">
            <summary>
            True if the call sites that references the method with this object supply extra arguments.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.Body">
            <summary>
            A container for a list of IL instructions providing the implementation (if any) of this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.GenericParameters">
            <summary>
            If the method is generic then this list contains the type parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters of the method. Zero if the referenced method is not generic.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.HasDeclarativeSecurity">
            <summary>
            True if this method has a non empty collection of SecurityAttributes or the System.Security.SuppressUnmanagedCodeSecurityAttribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.HasExplicitThisParameter">
            <summary>
            True if this an instance method that explicitly declares the type and name of its first parameter (the instance).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedMethod from all other methods obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsAbstract">
            <summary>
            True if the method does not provide an implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsAccessCheckedOnOverride">
            <summary>
            True if the method can only be overridden when it is also accessible.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsAggressivelyInlined">
            <summary>
            True if the the runtime is asked to inline this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsCil">
            <summary>
            True if the method is implemented in the CLI Common Intermediate Language.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsConstructor">
            <summary>
            True if the method is a constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsExternal">
            <summary>
            True if the method has an external implementation (i.e. not supplied by this definition).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsForwardReference">
            <summary>
            True if the method implementation is defined by another method definition (to be supplied at a later time).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsGeneric">
            <summary>
            True if the method has generic parameters;
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsHiddenBySignature">
            <summary>
            True if this method is hidden if a derived type declares a method with the same name and signature.
            If false, any method with the same name hides this method. This flag is ignored by the runtime and is only used by compilers.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsNativeCode">
            <summary>
            True if the method is implemented in native (platform-specific) code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsNewSlot">
            <summary>
            The method always gets a new slot in the virtual method table.
            This means the method will hide (not override) a base type method with the same name and signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsNeverInlined">
            <summary>
            True if the the runtime is not allowed to inline this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsNeverOptimized">
            <summary>
            True if the runtime is not allowed to optimize this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsPlatformInvoke">
            <summary>
            True if the method is implemented via the invocation of an underlying platform method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsRuntimeImplemented">
            <summary>
            True if the implementation of this method is supplied by the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsRuntimeInternal">
            <summary>
            True if the method is an internal part of the runtime and must be called in a special way.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsRuntimeSpecial">
            <summary>
            True if the method gets special treatment from the runtime. For example, it might be a constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsSealed">
            <summary>
            True if the method may not be overridden.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsSpecialName">
            <summary>
            True if the method is special in some way for tools. For example, it might be a property getter or setter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsStatic">
            <summary>
            True if the method does not require an instance of its declaring type as its first argument.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsStaticConstructor">
            <summary>
            True if the method is a static constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsSynchronized">
            <summary>
            True if only one thread at a time may execute this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsUnmanaged">
            <summary>
            True if the implementation of this method is not managed by the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.IsVirtual">
            <summary>
            True if the method may be overridden (or if it is an override).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ParameterCount">
            <summary>
            The number of required parameters of the method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.PlatformInvokeData">
            <summary>
            Detailed information about the PInvoke stub. Identifies which method to call, which module has the method and the calling convention among other things.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.PreserveSignature">
            <summary>
            True if the method signature must not be mangled during the interoperation with COM code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.RequiresSecurityObject">
            <summary>
            True if the method calls another method containing security code. If this flag is set, the method
            should have System.Security.DynamicSecurityMethodAttribute present in its list of custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueAttributes">
            <summary>
            Custom attributes associated with the method's return value.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueIsMarshalledExplicitly">
            <summary>
            The return value has associated marshalling information.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueMarshallingInformation">
            <summary>
            Specifies how the return value is marshalled when the method is called from unmanaged code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ReturnValueName">
            <summary>
            Specifies the name of the return value parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.SecurityAttributes">
            <summary>
            Declarative security actions for this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ResolvedMethod">
            <summary>
            The method being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodDefinition.ExtraParameters">
            <summary>
            Information about this types of the extra arguments supplied at the call sites that references the method with this object.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition.Copy(Microsoft.Cci.IGlobalMethodDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="globalMethodDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition.ContainingNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MethodReference">
            <summary>
            A reference to a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.#ctor">
            <summary>
            A reference to a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.Copy(Microsoft.Cci.IMethodReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of a reference to a method.
            </summary>
            <param name="methodReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.Resolve">
            <summary>
            Resolves the reference to find the method being referred to.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.AcceptsExtraArguments">
            <summary>
            True if the call sites that references the method with this object supply extra arguments.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ContainingType">
            <summary>
            A reference to the containing type of the referenced type member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ExtraParameters">
            <summary>
            Information about this types of the extra arguments supplied at the call sites that references the method with this object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.GenericParameterCount">
            <summary>
            The number of generic parameters of the method. Zero if the referenced method is not generic.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.InternedKey">
            <summary>
            Returns a key that is computed from the information in this reference and that distinguishes
            this.ResolvedMethod from all other methods obtained from the same metadata host.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.IsFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.IsGeneric">
            <summary>
            True if the method has generic parameters;
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.IsStatic">
            <summary>
            True if the referenced method does not require an instance of its declaring type as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ParameterCount">
            <summary>
            The number of required parameters of the method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ResolvedMethod">
            <summary>
            The method being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodReference.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.Copy(Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.Resolve">
            <summary>
            Resolves the reference to find the method being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.GenericArguments">
            <summary>
            The type arguments that were used to instantiate this.GenericMethod in order to create this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference.GenericMethod">
            <summary>
            Returns the generic method of which this method is an instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericMethodParameter">
            <summary>
            The definition of a type parameter of a generic method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericParameter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Copy(Microsoft.Cci.INamedTypeDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this type be a shallow copy of the given type.
            </summary>
            <param name="typeDefinition">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Contains(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Return true if the given member instance is a member of this scope.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.SelfInstance(Microsoft.Cci.INamedTypeDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Get the reference to fully specialized/instantiated version of typeDefinition. 
            </summary>
            <param name="typeDefinition">Unspecialized type definition to be specialized/instantiated.</param>
            <param name="internFactory">An internfactory. </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GetMatchingMembersNamed(Microsoft.Cci.IName,System.Boolean,Microsoft.Cci.Function{Microsoft.Cci.ITypeDefinitionMember,System.Boolean})">
            <summary>
            Returns the list of members with the given name that also satisfy the given predicate.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GetMatchingMembers(Microsoft.Cci.Function{Microsoft.Cci.ITypeDefinitionMember,System.Boolean})">
            <summary>
            Returns the list of members that satisfy the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GetMembersNamed(Microsoft.Cci.IName,System.Boolean)">
            <summary>
            Returns the list of members with the given name.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GetSpecializedType(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Return a specialized nested type obtained from the specialized instance of its containing type if this type is a nested type, or this otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Alignment">
            <summary>
            The byte alignment that values of the given type ought to have. Must be a power of 2. If zero, the alignment is decided at runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.BaseClasses">
            <summary>
            Zero or more classes from which this type is derived.
            For CLR types this collection is empty for interfaces and System.Object and populated with exactly one base type for all other types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Events">
            <summary>
            Zero or more events defined by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.ExplicitImplementationOverrides">
            <summary>
            Zero or more implementation overrides provided by the class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Fields">
            <summary>
            Zero or more fields defined by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GenericParameters">
            <summary>
            Zero or more parameters that can be used as type annotations.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.HasDeclarativeSecurity">
            <summary>
            True if this type has a non empty collection of SecurityAttributes or the System.Security.SuppressUnmanagedCodeSecurityAttribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.InstanceType">
            <summary>
            An instance of this generic type that has been obtained by using the generic parameters as the arguments.
            Use this instance to look up members
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Interfaces">
            <summary>
            Zero or more interfaces implemented by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsAbstract">
            <summary>
            True if the type may not be instantiated.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsClass">
            <summary>
            True if the type is a class (it is not an interface or type parameter and does not extend a special base class).
            Corresponds to C# class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsDelegate">
            <summary>
            True if the type is a delegate (it extends System.MultiCastDelegate). Corresponds to C# delegate
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsEnum">
            <summary>
            True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsGeneric">
            <summary>
            True if this type is parameterized (this.GenericParameters is a non empty collection).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsInterface">
            <summary>
            True if the type is an interface.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsReferenceType">
            <summary>
            True if the type is a reference type. A reference type is non static class or interface or a suitably constrained type parameter.
            A type parameter for which MustBeReferenceType (the class constraint in C#) is true returns true for this property
            as does a type parameter with a constraint that is a class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsSealed">
            <summary>
            True if the type may not be subtyped.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsStatic">
            <summary>
            True if the type is an abstract sealed class that directly extends System.Object and declares no constructors.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsValueType">
            <summary>
            True if the type is a value type.
            Value types are sealed and extend System.ValueType or System.Enum.
            A type parameter for which MustBeValueType (the struct constraint in C#) is true also returns true for this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsRuntimeSpecial">
            <summary>
            True if this type gets special treatment from the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsStruct">
            <summary>
            True if the type is a struct (its not Primitive, is sealed and base is System.ValueType).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsSpecialName">
            <summary>
            True if the type has special name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsComObject">
            <summary>
            Is this imported from COM type library
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsSerializable">
            <summary>
            True if this type is serializable.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsBeforeFieldInit">
            <summary>
            Is type initialized anytime before first access to static field
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Layout">
            <summary>
            Layout of the type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.MangleName">
            <summary>
            If true, the persisted type name is mangled by appending "`n" where n is the number of type parameters, if the number of type parameters is greater than 0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Members">
            <summary>
            The collection of member instances that are members of this scope.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Methods">
            <summary>
            Zero or more methods defined by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.NestedTypes">
            <summary>
            Zero or more nested types defined by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.PlatformType">
            <summary>
            A way to get to platform types such as System.Object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.PrivateHelperMembers">
            <summary>
            Zero or more private type members generated by the compiler for implementation purposes. These members
            are only available after a complete visit of all of the other members of the type, including the bodies of methods.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.Properties">
            <summary>
            Zero or more properties defined by this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.SecurityAttributes">
            <summary>
            Declarative security actions for this type. Will be empty if this.HasSecurity is false.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.SizeOf">
            <summary>
            Size of an object of this type. In bytes. If zero, the size is unspecified and will be determined at runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.StringFormat">
            <summary>
            Default marshalling of the Strings in this class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.TypeCode">
            <summary>
            Unless the value of TypeCode is PrimitiveTypeCode.NotPrimitive, the type corresponds to a "primitive" CLR type (such as System.Int32) and
            the type code identifies which of the primitive types it corresponds to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.UnderlyingType">
            <summary>
            Returns a reference to the underlying (integral) type on which this (enum) type is based.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.IsAlias">
            <summary>
            Indicates if this type reference resolved to an alias rather than a type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.AliasForType">
            <summary>
            Gives the alias for the type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.InternedKey">
            <summary>
            Returns the unique interned key associated with the type. This takes unification/aliases/custom modifiers into account.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamedTypeDefinition.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericParameter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericParameter.Copy(Microsoft.Cci.IGenericParameter,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this type be a shallow copy of the given type.
            </summary>
            <param name="genericParameter">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.Constraints">
            <summary>
            A list of classes or interfaces. All type arguments matching this parameter must be derived from all of the classes and implement all of the interfaces.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.IsReferenceType">
            <summary>
            True if the type is a reference type. A reference type is non static class or interface or a suitably constrained type parameter.
            A type parameter for which MustBeReferenceType (the class constraint in C#) is true returns true for this property
            as does a type parameter with a constraint that is a class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.IsValueType">
            <summary>
            True if the type is a value type.
            Value types are sealed and extend System.ValueType or System.Enum.
            A type parameter for which MustBeValueType (the struct constraint in C#) is true also returns true for this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.MustBeReferenceType">
            <summary>
            True if all type arguments matching this parameter are constrained to be reference types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.MustBeValueType">
            <summary>
            True if all type arguments matching this parameter are constrained to be value types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.MustHaveDefaultConstructor">
            <summary>
            True if all type arguments matching this parameter are constrained to be value types or concrete classes with visible default constructors.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericParameter.Variance">
            <summary>
            Indicates if the generic type or method with this type parameter is co-, contra-, or non variant with respect to this type parameter.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameter.#ctor">
            <summary>
            The definition of a type parameter of a generic method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameter.Copy(Microsoft.Cci.IGenericMethodParameter,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of the definition of a type parameter of a generic method.
            </summary>
            <param name="genericMehodParameter"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameter.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericMethodParameter).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameter.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericMethodParameterReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodParameter.DefiningMethod">
            <summary>
            The generic method that defines this type parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.LocalDefinition">
            <summary>
            A mutable object that represents a local variable or constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.LocalDefinition.#ctor">
            <summary>
            Allocates a mutable object that represents a local variable or constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.LocalDefinition.Copy(Microsoft.Cci.ILocalDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this mutable local definition a copy of the given immutable local definition.
            </summary>
            <param name="localVariableDefinition">An immutable local definition.</param>
            <param name="internFactory">The intern factory to use for computing the interned identity (if applicable) of this mutable object.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.LocalDefinition.ToString">
            <summary>
            Returns the Name property of the LocalDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.CompileTimeValue">
            <summary>
            The compile time value of the definition, if it is a local constant.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.CustomModifiers">
            <summary>
            Custom modifiers associated with local variable definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.IsConstant">
            <summary>
            True if this local definition is readonly and initialized with a compile time constant value.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.IsModified">
            <summary>
            The local variable has custom modifiers.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.IsPinned">
            <summary>
            True if the value referenced by the local must not be moved by the actions of the garbage collector.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.IsReference">
            <summary>
            True if the local contains a managed pointer (for example a reference to a local variable or a reference to a field of an object).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.MethodDefinition">
            <summary>
            The definition of the method in which this local is defined.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.LocalDefinition.Type">
            <summary>
            The type of the local.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MethodBody">
            <summary>
            A metadata (IL) level represetation of the body of a method or of a property/event accessor.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodBody.#ctor">
            <summary>
            A metadata (IL) level represetation of the body of a method or of a property/event accessor.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodBody.Copy(Microsoft.Cci.IMethodBody,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of a metadata (IL) level represetation of the body of a method or of a property/event accessor.
            </summary>
            <param name="methodBody"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodBody.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodBody).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.LocalsAreZeroed">
            <summary>
            True if the locals are initialized by zeroeing the stack upon method entry.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.LocalVariables">
            <summary>
            The local variables of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.MaxStack">
            <summary>
            The maximum number of elements on the evaluation stack during the execution of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.MethodDefinition">
            <summary>
            The definition of the method whose body this is.
            If this is the body of an event or property accessor, this will hold the corresponding adder/remover/setter or getter method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.Operations">
            <summary>
            A list CLR IL operations that implement this method body.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.OperationExceptionInformation">
            <summary>
            A list exception data within the method body IL.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.PrivateHelperTypes">
            <summary>
            Any types that are implicitly defined in order to implement the body semantics.
            In case of AST to instructions conversion this lists the types produced.
            In case of instructions to AST decompilation this should ideally be list of all types
            which are local to method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodBody.Size">
            <summary>
            The size in bytes of the method body when serialized.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ParameterDefinition">
            <summary>
            The metadata representation of a method or property parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterDefinition.#ctor">
            <summary>
            The metadata representation of a method or property parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Copy(Microsoft.Cci.IParameterDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of the metadata representation of a method or property parameter.
            </summary>
            <param name="parameterDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IParameterDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.VisitReference(IParameterDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterDefinition.ToString">
            <summary>
            Returns the Name property of the ParameterDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.ContainingSignature">
            <summary>
            The method or property that defines this parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.CustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the parameter. Evaluate this property only if IsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.DefaultValue">
            <summary>
            A compile time constant value that should be supplied as the corresponding argument value by callers that do not explicitly specify an argument value for this parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.HasDefaultValue">
            <summary>
            True if the parameter has a default value that should be supplied as the argument value by a caller for which the argument value has not been explicitly specified.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsByReference">
            <summary>
            True if the parameter is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsIn">
            <summary>
            True if the argument value must be included in the marshalled arguments passed to a remote callee.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsMarshalledExplicitly">
            <summary>
            This parameter has associated marshalling information.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsModified">
            <summary>
            This parameter has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsOptional">
            <summary>
            True if the argument value must be included in the marshalled arguments passed to a remote callee only if it is different from the default value (if there is one).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsOut">
            <summary>
            True if the final value assigned to the parameter will be marshalled with the return values passed back from a remote callee.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.IsParameterArray">
            <summary>
            True if the parameter has the ParamArrayAttribute custom attribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.MarshallingInformation">
            <summary>
            Specifies how this parameter is marshalled when it is accessed from unmanaged code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.ParamArrayElementType">
            <summary>
            The element type of the parameter array.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterDefinition.Type">
            <summary>
            The type of argument value that corresponds to this parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.Copy(Microsoft.Cci.IParameterTypeInformation,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="parameterTypeInformation"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.ContainingSignature">
            <summary>
            The method or property that defines this parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.CustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the parameter. Evaluate this property only if IsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.IsByReference">
            <summary>
            True if the parameter is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.IsModified">
            <summary>
            This parameter has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ParameterTypeInformation.Type">
            <summary>
            The type of argument value that corresponds to this parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.PropertyDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PropertyDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Copy(Microsoft.Cci.IPropertyDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="propertyDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IPropertyDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PropertyDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Throw an InvalidOperation exception since valid Metadata never references a property.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Accessors">
            <summary>
            A list of methods that are associated with the property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.DefaultValue">
            <summary>
            A compile time constant value that provides the default value for the property. (Who uses this and why?)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Getter">
            <summary>
            The method used to get the value of this property. May be absent (null).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.HasDefaultValue">
            <summary>
            True if this property has a compile time constant associated with that serves as a default value for the property. (Who uses this and why?)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.IsRuntimeSpecial">
            <summary>
            True if this property gets special treatment from the runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.IsSpecialName">
            <summary>
            True if this property is special in some way, as specified by the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.IsStatic">
            <summary>
            True if the referenced property does not require an instance of its declaring type as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Setter">
            <summary>
            The method used to set the value of this property. May be absent (null).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PropertyDefinition.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SignatureDefinition">
            <summary>
            The parameters and return type that makes up a method or property signature.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SignatureDefinition.#ctor">
            <summary>
            The parameters and return type that makes up a method or property signature.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SignatureDefinition.Copy(Microsoft.Cci.ISignature,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes a shallow copy of the parameters and return type that makes up a method or property signature.
            </summary>
            <param name="signatureDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.IsStatic">
            <summary>
            True if the referenced method or property does not require an instance of its declaring type as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SignatureDefinition.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SpecializedFieldReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedFieldReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedFieldReference.Copy(Microsoft.Cci.ISpecializedFieldReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="specializedFieldReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedFieldReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(ISpecializedFieldReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SpecializedFieldReference.UnspecializedVersion">
            <summary>
            A reference to the field definition that has been specialized to obtain the field definition referred to by this field reference.
            When the containing type of the referenced specialized field definition is itself a specialized nested type of a generic type instance,
            then the unspecialized field reference refers to the corresponding field definition from the unspecialized containing type definition.
            (I.e. the unspecialized field reference always refers to a field definition that is not obtained via specialization.)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SpecializedMethodReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedMethodReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedMethodReference.Copy(Microsoft.Cci.ISpecializedMethodReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="specializedMethodReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedMethodReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(ISpecializedMethodReference).
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SpecializedMethodReference.UnspecializedVersion">
            <summary>
            A reference to the method definition that has been specialized to obtain the method definition referred to by this method reference.
            When the containing type of the referenced specialized method definition is itself a specialized nested type of a generic type instance,
            then the unspecialized method reference refers to the corresponding method definition from the unspecialized containing type definition.
            (I.e. the unspecialized method reference always refers to a method definition that is not obtained via specialization.)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.CustomAttribute">
            <summary>
            A metadata custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CustomAttribute.#ctor">
            <summary>
            Allocates a metadata custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CustomAttribute.Copy(Microsoft.Cci.ICustomAttribute,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="customAttribute"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomAttribute.Arguments">
            <summary>
            Zero or more positional arguments for the attribute constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomAttribute.Constructor">
            <summary>
            A reference to the constructor that will be used to instantiate this custom attribute during execution (if the attribute is inspected via Reflection).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomAttribute.NamedArguments">
            <summary>
            Zero or more named arguments that specify values for fields and properties of the attribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomAttribute.NumberOfNamedArguments">
            <summary>
            The number of named arguments.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomAttribute.Type">
            <summary>
            The type of the attribute. For example System.AttributeUsageAttribute.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.FileReference">
            <summary>
            Represents a file referenced by an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FileReference.#ctor">
            <summary>
            Allocates an object that represents a file referenced by an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FileReference.Copy(Microsoft.Cci.IFileReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="fileReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FileReference.ContainingAssembly">
            <summary>
            The assembly that references this file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FileReference.FileName">
            <summary>
            Name of the file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FileReference.HashValue">
            <summary>
            A hash of the file contents.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FileReference.HasMetadata">
            <summary>
            True if the file has metadata.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MarshallingInformation">
            <summary>
            Information about how values of managed types should be marshalled to and from unmanaged types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MarshallingInformation.#ctor">
            <summary>
            Allocates an object containig information about how values of managed types should be marshalled to and from unmanaged types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MarshallingInformation.Copy(Microsoft.Cci.IMarshallingInformation,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="marshallingInformation"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.CustomMarshaller">
            <summary>
            A reference to the type implementing the custom marshaller.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.CustomMarshallerRuntimeArgument">
            <summary>
            An argument string (cookie) passed to the custom marshaller at run time.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.ElementType">
            <summary>
            The unmanged element type of the unmanaged array.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.IidParameterIndex">
            <summary>
            Specifies the index of the parameter that contains the value of the Inteface Identifier (IID) of the marshalled object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.UnmanagedType">
            <summary>
            The unmanaged type to which the managed type will be marshalled. This can be be UnmanagedType.CustomMarshaler, in which case the unmanaged type
            is decided at runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.NumberOfElements">
            <summary>
            The number of elements in the fixed size portion of the unmanaged array.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.ParamIndex">
            <summary>
            The zero based index of the parameter in the unmanaged method that contains the number of elements in the variable portion of unmanaged array.
            If the index is null, the variable portion is of size zero, or the caller conveys the size of the variable portion of the array to the unmanaged method in some other way.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.SafeArrayElementSubtype">
            <summary>
            The type to which the variant values of all elements of the safe array must belong. See also SafeArrayElementUserDefinedSubtype.
            (The element type of a safe array is VARIANT. The "sub type" specifies the value of all of the tag fields (vt) of the element values. )
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MarshallingInformation.SafeArrayElementUserDefinedSubtype">
            <summary>
            A reference to the user defined type to which the variant values of all elements of the safe array must belong.
            (The element type of a safe array is VARIANT. The tag fields will all be either VT_DISPATCH or VT_UNKNOWN or VT_RECORD.
            The "user defined sub type" specifies the type of value the ppdispVal/ppunkVal/pvRecord fields of the element values may point to.)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Operation">
            <summary>
            A single CLR IL operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Operation.#ctor">
            <summary>
            Allocates a single CLR IL operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Operation.Copy(Microsoft.Cci.IOperation,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Operation.Location">
            <summary>
            The location that corresponds to this instruction.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Operation.Offset">
            <summary>
            The offset from the start of the operation stream of a method
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Operation.OperationCode">
            <summary>
            The actual value of the operation code
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Operation.Value">
            <summary>
            Immediate data such as a string, the address of a branch target, or a metadata reference, such as a Field
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation">
            <summary>
            Exception information of the method body expressed in terms of offsets in CLR IL.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.#ctor">
            <summary>
            Allocates an object that provides exception information of the method body expressed in terms of offsets in CLR IL.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.Copy(Microsoft.Cci.IOperationExceptionInformation,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="operationExceptionInformation"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.ExceptionType">
            <summary>
            If HandlerKind == HandlerKind.Catch, this is the type of expection to catch. If HandlerKind == HandlerKind.Filter, this is System.Object.
            Otherwise this is a Dummy.TypeReference.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.FilterDecisionStartOffset">
            <summary>
            Label instruction corresponding to the start of filter decision block
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.HandlerEndOffset">
            <summary>
            Label instruction corresponding to the end of handler block
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.HandlerKind">
            <summary>
            Handler kind for this SEH info
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.HandlerStartOffset">
            <summary>
            Label instruction corresponding to the start of handler block
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.TryEndOffset">
            <summary>
            Label instruction corresponding to the end of try block
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.OperationExceptionInformation.TryStartOffset">
            <summary>
            Label instruction corresponding to the start of try block
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation">
            <summary>
            Information that describes how a method from the underlying Platform is to be invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.#ctor">
            <summary>
            Allocates an object that provides information that describes how a method from the underlying Platform is to be invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.Copy(Microsoft.Cci.IPlatformInvokeInformation,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="platformInvokeInformation"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.ImportModule">
            <summary>
            Module providing the method/field.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.ImportName">
            <summary>
            Name of the method/field providing the implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.NoMangle">
            <summary>
            If the PInvoke should use the name specified as is.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.PInvokeCallingConvention">
            <summary>
            The calling convention of the PInvoke call.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.StringFormat">
            <summary>
            Marshalling of the Strings for this method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.SupportsLastError">
            <summary>
            If the target function supports getting last error.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.UseBestFit">
            <summary>
            Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation.ThrowExceptionForUnmappableChar">
            <summary>
            Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.PESection">
            <summary>
            A section of the PE file that does not contain any objects that can be referenced in another way
            using this object model. The data of such a section is not decompiled by metadata reader and 
            is written out unchanged by metadata writers. Presumably it is meaningful in some way and is 
            thus exposed for use by other tools.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PESection.#ctor">
            <summary>
            A section of the PE file that does not contain any objects that can be referenced in another way
            using this object model. The data of such a section is not decompiled by metadata reader and 
            is written out unchanged by metadata writers. Presumably it is meaningful in some way and is 
            thus exposed for use by other tools.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PESection.Copy(Microsoft.Cci.IPESection,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="peSection"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.SectionName">
            <summary>
            The name of the section. Should be exactly eight characters long.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.Characteristics">
            <summary>
            A set of bits that describes the purpose of a section and how it behaves when loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.VirtualAddress">
            <summary>
            For executable images this is the address of the first byte of the section, when loaded into memory, relative to the image base.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.VirtualSize">
            <summary>
            Total size of the section in bytes. If this value is greater than SizeOfRawData, the section is zero-padded.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.SizeOfRawData">
            <summary>
            Size of the initialized data on disk in bytes, shall be a multiple of FileAlignment from the PE header.
            If this is less than VirtualSize the remainder of the section is zero filled.
            Because this field is rounded while the VirtualSize field is not, it is possible for this to be greater than VirtualSize.
            When a section contains only uninitialized data, this field should be 0.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PESection.Rawdata">
            <summary>
            The data, if any, with which the section will be initialized when loaded. May be null.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Resource">
            <summary>
            A named data resource that is stored as part of CLR metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Resource.#ctor">
            <summary>
            Allocates a named data resource that is stored as part of CLR metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Resource.Copy(Microsoft.Cci.IResource,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.Data">
            <summary>
            The resource data.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.DefiningAssembly">
            <summary>
            A symbolic reference to the IAssembly that defines the resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.ExternalFile">
            <summary>
            The external file that contains the resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.IsInExternalFile">
            <summary>
            The resource is in external file
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.IsPublic">
            <summary>
            Specifies whether other code from other assemblies may access this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Resource.Name">
            <summary>
            The name of the resource.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ResourceReference">
            <summary>
            A reference to an IResource instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ResourceReference.#ctor">
            <summary>
            Allocates a reference to an IResource instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ResourceReference.Copy(Microsoft.Cci.IResourceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="resourceReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ResourceReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ResourceReference.DefiningAssembly">
            <summary>
            A symbolic reference to the IAssembly that defines the resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ResourceReference.IsPublic">
            <summary>
            Specifies whether other code from other assemblies may access this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ResourceReference.Name">
            <summary>
            The name of the resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ResourceReference.Resource">
            <summary>
            The referenced resource.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SectionBlock">
            <summary>
            Represents a block of data stored at a given offset within a specified section of the PE file.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SectionBlock.#ctor">
            <summary>
            Allocates an object that represents a block of 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SectionBlock.Copy(Microsoft.Cci.ISectionBlock,Microsoft.Cci.IInternFactory)">
            <summary>
            </summary>
            <param name="sectionBlock"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SectionBlock.Data">
            <summary>
            Byte information stored in the block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SectionBlock.Offset">
            <summary>
            Offset into section where the block resides.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SectionBlock.PESectionKind">
            <summary>
            Section where the block resides.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SectionBlock.Size">
            <summary>
            Size of the block.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SecurityAttribute">
            <summary>
            A declarative specification of a security action applied to a set of permissions. Used by the CLR loader to enforce security restrictions.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SecurityAttribute.#ctor">
            <summary>
            Allocates a declarative specification of a security action applied to a set of permissions. Used by the CLR loader to enforce security restrictions.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SecurityAttribute.Copy(Microsoft.Cci.ISecurityAttribute,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="securityAttribute"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SecurityAttribute.Action">
            <summary>
            Specifies the security action that can be performed using declarative security. For example the action could be Deny.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SecurityAttribute.Attributes">
            <summary>
            Custom attributes that collectively define the permission set to which the action is applied. Each attribute represents a serialized permission
            or permission set. The union of the sets, together with the individual permissions, define the set to which the action applies.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Win32Resource">
            <summary>
            A resource file formatted according to Win32 API conventions and typically obtained from a Portable Executable (PE) file.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Win32Resource.#ctor">
            <summary>
            Allocates a resource file formatted according to Win32 API conventions and typically obtained from a Portable Executable (PE) file.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Win32Resource.Copy(Microsoft.Cci.IWin32Resource,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="win32Resource"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.CodePage">
            <summary>
            The code page for which this resource is appropriate.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.Data">
            <summary>
            The data of the resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.Id">
            <summary>
            An integer tag that identifies this resource. If the value is less than 0, this.Name should be used instead.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.LanguageId">
            <summary>
            The language for which this resource is appropriate.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.Name">
            <summary>
            The name of the resource. Only valid if this.Id &lt; 0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.TypeId">
            <summary>
            An integer tag that identifies what type of resource this is. If the value is less than 0, this.TypeName should be used instead.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Win32Resource.TypeName">
            <summary>
            A string that identifies what type of resource this is. Only valid if this.TypeId &lt; 0.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataRewriter">
            <summary>
            A class that traverses a metadata model in depth first, left to right order,
            rewriting each mutable node it visits by updating the node's children with recursivly rewritten nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.#ctor(Microsoft.Cci.IMetadataHost,System.Boolean)">
            <summary>
            A class that traverses a metadata model in depth first, left to right order,
            rewriting each mutable node it visits by updating the node's children with recursivly rewritten nodes.
            </summary>
            <param name="host">An object representing the application that is hosting this rewriter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="copyAndRewriteImmutableReferences">If true, the rewriter replace frozen or immutable references with shallow copies.</param>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataRewriter.host">
            <summary>
            An object representing the application that is hosting this rewriter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataRewriter.referenceRewrites">
            <summary>
            A map from reference to rewritten reference. Can be used to avoid rewriting the same reference more than once.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IAliasForType)">
            <summary>
            Rewrites the alias for type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IAliasMember)">
            <summary>
            Rewrites the alias for type member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Rewrites the array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IAssembly)">
            <summary>
            Rewrites the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Rewrites the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Rewrites the given custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ICustomModifier)">
            <summary>
            Rewrites the given custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IEventDefinition)">
            <summary>
            Rewrites the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Rewrites the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IFieldReference)">
            <summary>
            Rewrites the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteReference(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Rewrites the reference to a local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteReference(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Rewrites the reference to a parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteUnspecialized(Microsoft.Cci.IFieldReference)">
            <summary>
            Rewrites the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IFileReference)">
            <summary>
            Rewrites the given file reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Rewrites the given function pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Rewrites the given generic method instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Rewrites the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Rewrites the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Rewrites the given generic type instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Rewrites the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Rewrites the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Rewrites the specified global field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Rewrites the specified global method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Rewrites the specified local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Rewrites the given managed pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Rewrites the given marshalling information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Rewrites the given metadata constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Rewrites the given metadata array creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Rewrites the given metadata expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Rewrites the given metadata named argument expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Rewrites the given metadata typeof expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodBody)">
            <summary>
            Rewrites the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Rewrites the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Rewrites the given method implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IMethodReference)">
            <summary>
            Rewrites the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteUnspecialized(Microsoft.Cci.IMethodReference)">
            <summary>
            Rewrites the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Rewrites the given modified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IModule)">
            <summary>
            Rewrites the given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IModuleReference)">
            <summary>
            Rewrites the given module reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Rewrites the named specified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamedTypeReference)">
            <summary>
            Rewrites the named specified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Rewrites the namespace alias for type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamespaceDefinition)">
            <summary>
            Rewrites the namespace definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamespaceMember)">
            <summary>
            Rewrites the specified namespace member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Rewrites the given namespace type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Rewrites the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Rewrites the nested alias for type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Rewrites the given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Rewrites the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteUnspecialized(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Rewrites the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Rewrites the specified nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Rewrites the specified reference to a nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IOperation)">
            <summary>
            Rewrites the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            Rewrites the specified operation exception information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Rewrites the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Rewrites the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IPESection)">
            <summary>
            Rewrites the given PE section.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            Rewrites the specified platform invoke information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Rewrites the given pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Rewrites the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IResourceReference)">
            <summary>
            Rewrites the given reference to a manifest resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Rewrites the given root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Rewrites the given reference to a root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Rewrites the given security attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Rewrites the given specialized field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Rewrites the given specialized method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Rewrites the given specialized nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Rewrites the given type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Rewrites the specified type member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.ITypeReference)">
            <summary>
            Rewrites the specified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IUnit)">
            <summary>
            Rewrites the specified unit.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IUnitNamespace)">
            <summary>
            Rewrites the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Rewrites the specified reference to a unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IUnitReference)">
            <summary>
            Rewrites the specified unit reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(Microsoft.Cci.IWin32Resource)">
            <summary>
            Rewrites the given Win32 resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IAliasForType})">
            <summary>
            Rewrites the list of aliases for types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IAliasMember})">
            <summary>
            Rewrites the list of members of a type alias.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IAssemblyReference})">
            <summary>
            Rewrites the specified assembly references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Rewrites the specified custom attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Rewrites the specified custom modifiers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IEventDefinition})">
            <summary>
            Rewrites the specified events.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IFieldDefinition})">
            <summary>
            Rewrites the specified fields.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IFileReference})">
            <summary>
            Rewrites the specified file references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IGenericMethodParameter})">
            <summary>
            Rewrites the specified generic parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IGenericTypeParameter})">
            <summary>
            Rewrites the specified generic parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ILocalDefinition})">
            <summary>
            Rewrites the specified local definitions.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IMetadataExpression})">
            <summary>
            Rewrites the specified expressions.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IMetadataNamedArgument})">
            <summary>
            Rewrites the specified named arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IMethodDefinition})">
            <summary>
            Rewrites the specified methods.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IMethodImplementation})">
            <summary>
            Rewrites the specified method implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IMethodReference})">
            <summary>
            Rewrites the specified method references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IModule})">
            <summary>
            Rewrites the specified modules.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IModuleReference})">
            <summary>
            Rewrites the specified module references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            Rewrites the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.INamespaceMember})">
            <summary>
            Rewrites the specified namespace members.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.INestedTypeDefinition})">
            <summary>
            Rewrites the specified nested types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IOperation})">
            <summary>
            Rewrites the specified operations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IOperationExceptionInformation})">
            <summary>
            Rewrites the specified operation exception informations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Rewrites the specified parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Rewrites the specified parameter type informations.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IPESection})">
            <summary>
            Rewrites the specified PE sections.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IPropertyDefinition})">
            <summary>
            Rewrites the specified properties.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IResourceReference})">
            <summary>
            Rewrites the specified resource references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ISecurityAttribute})">
            <summary>
            Rewrites the specified security attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ITypeDefinitionMember})">
            <summary>
            Rewrites the specified type members.
            </summary>
            <remarks>Not used by the rewriter itself.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.ITypeReference})">
            <summary>
            Rewrites the specified type references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(System.Collections.Generic.List{Microsoft.Cci.IWin32Resource})">
            <summary>
            Rewrites the specified type references.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.AliasForType)">
            <summary>
            Rewrites the children of the alias for type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ArrayTypeReference)">
            <summary>
            Rewrites the children of the array type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Assembly)">
            <summary>
            Rewrites the children of the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.AssemblyReference)">
            <summary>
            Rewrites the children of the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.CustomAttribute)">
            <summary>
            Rewrites the children of the given custom attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.CustomModifier)">
            <summary>
            Rewrites the children of the given custom modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.EventDefinition)">
            <summary>
            Rewrites the children of the given event definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.FieldDefinition)">
            <summary>
            Rewrites the children of the given field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.FieldReference)">
            <summary>
            Rewrites the chidren of the given field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.FileReference)">
            <summary>
            Rewrites the children the given file reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference)">
            <summary>
            Rewrites the children the given function pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference)">
            <summary>
            Rewrites the children of the given generic method instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericMethodParameter)">
            <summary>
            Rewrites the children of the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference)">
            <summary>
            Rewrites the children the given generic method parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericParameter)">
            <summary>
            Rewrites the children of the given generic parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference)">
            <summary>
            Rewrites the children of the given generic type instance reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericTypeParameter)">
            <summary>
            Rewrites the children of the given generic type parameter .
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference)">
            <summary>
            Rewrites the children of the given generic type parameter reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition)">
            <summary>
            Rewrites the children of the given global field definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition)">
            <summary>
            Rewrites the children of the given global method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.LocalDefinition)">
            <summary>
            Rewrites the children of the specified local definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference)">
            <summary>
            Rewrites the children of the given managed pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Rewrites the children of the given marshalling information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MetadataConstant)">
            <summary>
            Rewrites the children of the given metadata constant.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MetadataCreateArray)">
            <summary>
            Rewrites the children of the given metadata array creation expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MetadataExpression)">
            <summary>
            Rewrites the children the given metadata expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MetadataNamedArgument)">
            <summary>
            Rewrites the children of the given metadata named argument expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MetadataTypeOf)">
            <summary>
            Rewrites the given metadata typeof expression.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MethodBody)">
            <summary>
            Rewrites the children of the given method body.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MethodDefinition)">
            <summary>
            Rewrites the children of the given method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MethodImplementation)">
            <summary>
            Rewrites the children of the given method implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.MethodReference)">
            <summary>
            Rewrites the children of the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ModifiedTypeReference)">
            <summary>
            Rewrites the children of the given modified type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Module)">
            <summary>
            Rewrites the children of the given module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ModuleReference)">
            <summary>
            Rewrites the children the given module reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NamespaceAliasForType)">
            <summary>
            Rewrites the namespace alias for type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition)">
            <summary>
            Rewrites the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NamespaceTypeReference)">
            <summary>
            Rewrites the given namespace type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NestedAliasForType)">
            <summary>
            Rewrites the nested alias for type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NestedTypeDefinition)">
            <summary>
            Rewrites the children of given nested type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NestedTypeReference)">
            <summary>
            Rewrites the given nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NestedUnitNamespace)">
            <summary>
            Rewrites the given nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference)">
            <summary>
            Rewrites the given nested unit namespace reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Operation)">
            <summary>
            Rewrites the children the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.OperationExceptionInformation)">
            <summary>
            Rewrites the children of the specified operation exception information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ParameterDefinition)">
            <summary>
            Rewrites the children of the given parameter definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ParameterTypeInformation)">
            <summary>
            Rewrites the given parameter type information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.PESection)">
            <summary>
            Rewrites the given PE section.
            </summary>
            <param name="peSection"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation)">
            <summary>
            Rewrites the children of the specified platform invoke information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.PointerTypeReference)">
            <summary>
            Rewrites the given pointer type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.PropertyDefinition)">
            <summary>
            Rewrites the given property definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.ResourceReference)">
            <summary>
            Rewrites the children of the given reference to a manifest resource.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.RootUnitNamespace)">
            <summary>
            Rewrites the children of the specified root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference)">
            <summary>
            Rewrites the given reference to a root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.SecurityAttribute)">
            <summary>
            Rewrites the given security attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.SpecializedFieldReference)">
            <summary>
            Rewrites the given specialized field reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.SpecializedMethodReference)">
            <summary>
            Rewrites the given specialized method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference)">
            <summary>
            Rewrites the given specialized nested type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.NamedTypeDefinition)">
            <summary>
            Rewrites the children of the specified named type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.TypeDefinitionMember)">
            <summary>
            Rewrites the children of the given type definition member.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.TypeReference)">
            <summary>
            Rewrites the children of the given type reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Unit)">
            <summary>
            Rewrites the children of the specified unit.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.UnitReference)">
            <summary>
            Rewrites the specified unit.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.UnitNamespace)">
            <summary>
            Rewrites the children of the specified unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.UnitNamespaceReference)">
            <summary>
            Rewrites the children of the specified reference to a unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Microsoft.Cci.MutableCodeModel.Win32Resource)">
            <summary>
            Rewrites the children of the given Win32 resource.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataMutator">
            <summary>
            This class is obsolete because it is too hard to use correctly. Please use MutatingVisitor and MetadataCopier instead.
            A visitor that produces a mutable copy a given metadata model. Derived classes can override the visit methods
            to intervene in the copying process, usually resulting in a copy that is not equivalent to the original model.
            For instance, the new copy might have additional types and methods, or additional calls to instrumentation routines.
            </summary>
            <remarks>While the model is being copied, the resulting model is incomplete and or inconsistent. It should not be traversed
            independently nor should any of its computed properties, such as ResolvedType be evaluated. Scenarios that need such functionality
            should be implemented by first making a mutable copy of the entire assembly and then running a second pass over the mutable result.
            The new classes MetadataDeepCopier and MetadataRewriter are meant to facilitate such scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            Allocates a visitor that produces a mutable copy a given metadata model. Derived classes can override the visit methods
            to intervene in the copying process, usually resulting in a copy that is not equivalent to the original model.
            For instance, the new copy might have additional types and methods, or additional calls to instrumentation routines.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.#ctor(Microsoft.Cci.IMetadataHost,System.Boolean)">
            <summary>
            Allocates a visitor that produces a mutable copy a given metadata model. Derived classes can override the visit methods
            to intervene in the copying process, usually resulting in a copy that is not equivalent to the original model.
            For instance, the new copy might have additional types and methods, or additional calls to instrumentation routines.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="copyOnlyIfNotAlreadyMutable">True if the mutator should try and perform mutations in place, rather than mutating new copies.</param>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.cache">
            <summary>
            Duplicates are cached, both to save space and to detect when the traversal of a cycle should stop.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.copyOnlyIfNotAlreadyMutable">
            <summary>
            True if the mutator should try and perform mutations in place, rather than mutating new copies.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.referenceCache">
             <summary>
            Since definitions are also references, it can happen that a definition is visited as both a definition and as a reference.
            If so, the cache may contain a duplicated definition when a reference is expected, or vice versa.
            To prevent this, reference duplicates are always cached separately.
             </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.flatListOfTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.host">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.path">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MetadataMutator.stopTraversal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetCurrentMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetCurrentNamespace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetCurrentSignature">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetCurrentType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetCurrentUnit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IAssembly)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IAssemblyReference)">
            <summary>
            
            </summary>
            <param name="assemblyReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ICustomAttribute)">
            <summary>
            
            </summary>
            <param name="customAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ICustomModifier)">
            <summary>
            
            </summary>
            <param name="customModifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IEventDefinition)">
            <summary>
            
            </summary>
            <param name="eventDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Get a mutable copy of the given field definition. 
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ISectionBlock)">
            <summary>
            
            </summary>
            <param name="sectionBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IFieldReference)">
            <summary>
            Get a mutable copy of the given field reference. 
            </summary>
            <param name="fieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IFileReference)">
            <summary>
            
            </summary>
            <param name="fileReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="functionPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            
            </summary>
            <param name="genericMethodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            
            </summary>
            <param name="genericMethodParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            
            </summary>
            <param name="genericTypeInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            
            </summary>
            <param name="genericTypeParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            
            </summary>
            <param name="genericTypeParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Get a mutable copy of the given global method definition. 
            </summary>
            <param name="globalFieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            
            </summary>
            <param name="globalMethodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ILocalDefinition)">
            <summary>
            
            </summary>
            <param name="localDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="managedPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            
            </summary>
            <param name="marshallingInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMetadataConstant)">
            <summary>
            
            </summary>
            <param name="metadataConstant"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            
            </summary>
            <param name="metadataCreateArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            
            </summary>
            <param name="metadataNamedArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            
            </summary>
            <param name="metadataTypeOf"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMethodDefinition)">
            <summary>
            
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMethodBody)">
            <summary>
            
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMethodImplementation)">
            <summary>
            
            </summary>
            <param name="methodImplementation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            Get a mutable copy of the given method reference. 
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            
            </summary>
            <param name="modifiedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IModule)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IModuleReference)">
            <summary>
            
            </summary>
            <param name="moduleReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            
            </summary>
            <param name="namespaceAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            
            </summary>
            <param name="namespaceTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            
            </summary>
            <param name="namespaceTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INestedAliasForType)">
            <summary>
            
            </summary>
            <param name="nestedAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            
            </summary>
            <param name="nestedTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INestedTypeReference)">
            <summary>
            
            </summary>
            <param name="nestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IOperation)">
            <summary>
            
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            
            </summary>
            <param name="operationExceptionInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IParameterDefinition)">
            <summary>
            
            </summary>
            <param name="parameterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            
            </summary>
            <param name="parameterTypeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IPESection)">
            <summary>
            
            </summary>
            <param name="peSection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            
            </summary>
            <param name="platformInvokeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            
            </summary>
            <param name="pointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            
            </summary>
            <param name="propertyDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IResourceReference)">
            <summary>
            
            </summary>
            <param name="resourceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            
            </summary>
            <param name="securityAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            
            </summary>
            <param name="specializedFieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            
            </summary>
            <param name="specializedMethodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            
            </summary>
            <param name="specializedNestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableCopy(Microsoft.Cci.IWin32Resource)">
            <summary>
            
            </summary>
            <param name="win32Resource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableMatrixCopy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            
            </summary>
            <param name="matrixTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetMutableVectorCopy(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            
            </summary>
            <param name="vectorTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.GetTypeSpecificMutableCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IAliasForType})">
            <summary>
            Visits the specified aliases for types.
            </summary>
            <param name="aliasesForTypes">The aliases for types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IAliasForType)">
            <summary>
            Visits the specified alias for type.
            </summary>
            <param name="aliasForType">Type of the alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IAssembly)">
            <summary>
            Makes a (shallow) mutable copy of the given assembly and then visits the copy, which generally
            results in a deep mutable copy, depending on how subclasses override the behavior of the methods
            of this base class.
            </summary>
            <param name="assembly">The assembly to copy.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.Assembly)">
            <summary>
            Visits the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IAssemblyReference})">
            <summary>
            Visits the specified assembly references.
            </summary>
            <param name="assemblyReferences">The assembly references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Visits the specified assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.AssemblyReference)">
            <summary>
            Visits the specified assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the specified custom attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.CustomAttribute)">
            <summary>
            Visits the specified custom attribute.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the specified custom modifiers.
            </summary>
            <param name="customModifiers">The custom modifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.CustomModifier)">
            <summary>
            Visits the specified custom modifier.
            </summary>
            <param name="customModifier">The custom modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IEventDefinition})">
            <summary>
            Visits the specified event definitions.
            </summary>
            <param name="eventDefinitions">The event definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IEventDefinition)">
            <summary>
            Visits the specified event definition.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.EventDefinition)">
            <summary>
            Visits the specified event definition.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IFieldDefinition})">
            <summary>
            Visits the specified field definitions.
            </summary>
            <param name="fieldDefinitions">The field definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.FieldDefinition)">
            <summary>
            Visits the specified field definition.
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Visits the specified field definition.
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IFieldReference)">
            <summary>
            Visits the specified field reference.
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.FieldReference)">
            <summary>
            Visits the specified field reference.
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IFileReference})">
            <summary>
            Visits the specified file references.
            </summary>
            <param name="fileReferences">The file references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.FileReference)">
            <summary>
            Visits the specified file reference.
            </summary>
            <param name="fileReference">The file reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference)">
            <summary>
            Visits the specified function pointer type reference.
            </summary>
            <param name="functionPointerTypeReference">The function pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference)">
            <summary>
            Visits the specified generic method instance reference.
            </summary>
            <param name="genericMethodInstanceReference">The generic method instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IGenericMethodParameter},Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visits the specified generic method parameters.
            </summary>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <param name="declaringMethod">The declaring method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericMethodParameter)">
            <summary>
            Visits the specified generic method parameter.
            </summary>
            <param name="genericMethodParameter">The generic method parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference)">
            <summary>
            Visits the specified generic method parameter reference.
            </summary>
            <param name="genericMethodParameterReference">The generic method parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference)">
            <summary>
            Visits the specified generic type parameter reference.
            </summary>
            <param name="genericTypeParameterReference">The generic type parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition)">
            <summary>
            Visits the specified global field definition.
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition)">
            <summary>
            Visits the specified global method definition.
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference)">
            <summary>
            Visits the specified generic type instance reference.
            </summary>
            <param name="genericTypeInstanceReference">The generic type instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericParameter)">
            <summary>
            Visits the specified generic parameter.
            </summary>
            <param name="genericParameter">The generic parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IGenericTypeParameter})">
            <summary>
            Visits the specified generic type parameters.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.GenericTypeParameter)">
            <summary>
            Visits the specified generic type parameter.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ILocation})">
            <summary>
            Visits the specified locations.
            </summary>
            <param name="locations">The locations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Visits the specified local definition.
            </summary>
            <param name="localDefinition">The local definition to visit.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitReferenceTo(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Visits a reference to the specified local definition.
            </summary>
            <param name="localDefinition">The referenced local definition to visit.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.ILocation)">
            <summary>
            Visits the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.LocalDefinition)">
            <summary>
            Visits the specified local definition.
            </summary>
            <param name="localDefinition">The local definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference)">
            <summary>
            Visits the specified managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference">The pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits the specified marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MetadataConstant)">
            <summary>
            Visits the specified constant.
            </summary>
            <param name="constant">The constant.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MetadataCreateArray)">
            <summary>
            Visits the specified create array.
            </summary>
            <param name="createArray">The create array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IMetadataExpression})">
            <summary>
            Visits the specified metadata expressions.
            </summary>
            <param name="metadataExpressions">The metadata expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IMetadataNamedArgument})">
            <summary>
            Visits the specified named arguments.
            </summary>
            <param name="namedArguments">The named arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MetadataNamedArgument)">
            <summary>
            Visits the specified named argument.
            </summary>
            <param name="namedArgument">The named argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MetadataTypeOf)">
            <summary>
            Visits the specified type of.
            </summary>
            <param name="typeOf">The type of.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MatrixTypeReference)">
            <summary>
            Visits the specified matrix type reference.
            </summary>
            <param name="matrixTypeReference">The matrix type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MethodBody)">
            <summary>
            Visits the specified method body.
            </summary>
            <param name="methodBody">The method body.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IOperationExceptionInformation})">
            <summary>
            Visits the specified exception informations.
            </summary>
            <param name="exceptionInformations">The exception informations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.OperationExceptionInformation)">
            <summary>
            Visits the specified operation exception information.
            </summary>
            <param name="operationExceptionInformation">The operation exception information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IOperation})">
            <summary>
            Visits the specified operations.
            </summary>
            <param name="operations">The operations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.Operation)">
            <summary>
            Visits the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ILocalDefinition})">
            <summary>
            Visits the specified locals.
            </summary>
            <param name="locals">The locals.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IMethodDefinition})">
            <summary>
            Visits the specified method definitions.
            </summary>
            <param name="methodDefinitions">The method definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Visits the specified global field definition.
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Visits the specified global method definition.
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visits the specified method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MethodDefinition)">
            <summary>
            Visits the specified method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IMethodImplementation})">
            <summary>
            Visits the specified method implementations.
            </summary>
            <param name="methodImplementations">The method implementations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MethodImplementation)">
            <summary>
            Visits the specified method implementation.
            </summary>
            <param name="methodImplementation">The method implementation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IMethodReference})">
            <summary>
            Visits the specified method references.
            </summary>
            <param name="methodReferences">The method references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IMethodBody)">
            <summary>
            Visits the specified method body.
            </summary>
            <param name="methodBody">The method body.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IMethodReference)">
            <summary>
            Visits the specified method reference.
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.MethodReference)">
            <summary>
            Visits the specified method reference.
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IModule})">
            <summary>
            Visits the specified modules.
            </summary>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ModifiedTypeReference)">
            <summary>
            Visits the specified modified type reference.
            </summary>
            <param name="modifiedTypeReference">The modified type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IModule)">
            <summary>
            Makes a (shallow) mutable copy of the given module and then visits the copy, which generally
            results in a deep mutable copy, depending on how subclasses override the behavior of the methods
            of this base class.
            </summary>
            <param name="module">The module to copy.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.Module)">
            <summary>
            Visits the specified module.
            </summary>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IModuleReference})">
            <summary>
            Visits the specified module references.
            </summary>
            <param name="moduleReferences">The module references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ModuleReference)">
            <summary>
            Visits the specified module reference.
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.INamespaceMember})">
            <summary>
            Visits the specified namespace members.
            </summary>
            <param name="namespaceMembers">The namespace members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INamespaceMember)">
            <summary>
            Visits the specified namespace member.
            </summary>
            <param name="namespaceMember">The namespace member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NamespaceAliasForType)">
            <summary>
            Visits the specified namespace alias for type.
            </summary>
            <param name="namespaceAliasForType">Type of the namespace alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition)">
            <summary>
            Visits the specified namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NamespaceTypeReference)">
            <summary>
            Visits the specified namespace type reference.
            </summary>
            <param name="namespaceTypeReference">The namespace type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NestedAliasForType)">
            <summary>
            Visits the specified nested alias for type.
            </summary>
            <param name="nestedAliasForType">Type of the nested alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.INestedTypeDefinition})">
            <summary>
            Visits the specified nested type definitions.
            </summary>
            <param name="nestedTypeDefinitions">The nested type definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NestedTypeDefinition)">
            <summary>
            Visits the specified nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NestedTypeReference)">
            <summary>
            Visits the specified nested type reference.
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.SpecializedFieldReference)">
            <summary>
            Visits the specified specialized field reference.
            </summary>
            <param name="specializedFieldReference">The specialized field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.SpecializedMethodReference)">
            <summary>
            Visits the specified specialized method reference.
            </summary>
            <param name="specializedMethodReference">The specialized method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference)">
            <summary>
            Visits the specified specialized nested type reference.
            </summary>
            <param name="specializedNestedTypeReference">The specialized nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NamedTypeDefinition)">
            <summary>
            Replaces the child nodes of the given mutable type definition with the results of running the mutator over them. 
            Note that when overriding this method, care must be taken to add the given mutable type definition to this.flatListOfTypes.
            </summary>
            <param name="typeDefinition">A mutable type definition.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitPrivateHelperMembers(System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            Visits the private helper members.
            </summary>
            <param name="typeDefinitions">The type definitions.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ITypeDefinitionMember})">
            <summary>
            Visits the specified type definition members.
            </summary>
            <param name="typeDefinitionMembers">The type definition members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ITypeReference})">
            <summary>
            Visits the specified type references.
            </summary>
            <param name="typeReferences">The type references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Visits the specified namespace type reference.
            </summary>
            <param name="namespaceTypeReference">The namespace type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Visits the specified nested type reference.
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Visits the specified generic method parameter reference.
            </summary>
            <param name="genericMethodParameterReference">The generic method parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Visits the specified array type reference.
            </summary>
            <param name="arrayTypeReference">The array type reference.</param>
            <returns></returns>
            <remarks>Array types are not nominal types, so always visit the reference, even if it is a definition.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Visits the specified generic type parameter reference.
            </summary>
            <param name="genericTypeParameterReference">The generic type parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Visits the specified generic type instance reference.
            </summary>
            <param name="genericTypeInstanceReference">The generic type instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Visits the specified parameter definition.
            </summary>
            <param name="parameterDefinition">The parameter definition to visit.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitReferenceTo(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Visits a parameter definition that is being referenced.
            </summary>
            <param name="parameterDefinition">The referenced parameter definition.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Visits the specified pointer type reference.
            </summary>
            <param name="pointerTypeReference">The pointer type reference.</param>
            <returns></returns>
            <remarks>
            Pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Visits the specified function pointer type reference.
            </summary>
            <param name="functionPointerTypeReference">The function pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Visits the specified managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference">The managed pointer type reference.</param>
            <returns></returns>
            <remarks>
            Managed pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Visits the specified modified type reference.
            </summary>
            <param name="modifiedTypeReference">The modified type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IModuleReference)">
            <summary>
            Visits the specified module reference.
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Visits the specified namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Visits the specified nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.ITypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference.
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Visits the specified nested unit namespace reference.
            </summary>
            <param name="nestedUnitNamespaceReference">The nested unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference)">
            <summary>
            Visits the specified nested unit namespace reference.
            </summary>
            <param name="nestedUnitNamespaceReference">The nested unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IUnitReference)">
            <summary>
            Visits the specified unit reference.
            </summary>
            <param name="unitReference">The unit reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Visits the specified parameter definitions.
            </summary>
            <param name="parameterDefinitions">The parameter definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ParameterDefinition)">
            <summary>
            Visits the specified parameter definition.
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Visits the specified parameter type information list.
            </summary>
            <param name="parameterTypeInformationList">The parameter type information list.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ParameterTypeInformation)">
            <summary>
            Visits the specified parameter type information.
            </summary>
            <param name="parameterTypeInformation">The parameter type information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation)">
            <summary>
            Visits the specified platform invoke information.
            </summary>
            <param name="platformInvokeInformation">The platform invoke information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IPropertyDefinition})">
            <summary>
            Visits the specified property definitions.
            </summary>
            <param name="propertyDefinitions">The property definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Visits the specified property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.PropertyDefinition)">
            <summary>
            Visits the specified property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.PointerTypeReference)">
            <summary>
            Visits the specified pointer type reference.
            </summary>
            <param name="pointerTypeReference">The pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IResourceReference})">
            <summary>
            Visits the specified resource references.
            </summary>
            <param name="resourceReferences">The resource references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.ResourceReference)">
            <summary>
            Visits the specified resource reference.
            </summary>
            <param name="resourceReference">The resource reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.ISecurityAttribute})">
            <summary>
            Visits the specified security attributes.
            </summary>
            <param name="securityAttributes">The security attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Visits the specified root unit namespace reference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.RootUnitNamespace)">
            <summary>
            Visits the specified root unit namespace.
            </summary>
            <param name="rootUnitNamespace">The root unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference)">
            <summary>
            Visits the specified root unit namespace reference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.SecurityAttribute)">
            <summary>
            Visits the specified security attribute.
            </summary>
            <param name="securityAttribute">The security attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.SectionBlock)">
            <summary>
            Visits the specified section block.
            </summary>
            <param name="sectionBlock">The section block.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.TypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.TypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IPESection})">
            <summary>
            Visits the specified PE sections.
            </summary>
            <param name="peSections">The PE section.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.PESection)">
            <summary>
            Visits the specifed PE section.
            </summary>
            <param name="peSection">The PE section</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.Unit)">
            <summary>
            Visits the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.UnitNamespace)">
            <summary>
            Visits the specified unit namespace.
            </summary>
            <param name="unitNamespace">The unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.UnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference.
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.VectorTypeReference)">
            <summary>
            Visits the specified vector type reference.
            </summary>
            <param name="vectorTypeReference">The vector type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(System.Collections.Generic.List{Microsoft.Cci.IWin32Resource})">
            <summary>
            Visits the specified win32 resources.
            </summary>
            <param name="win32Resources">The win32 resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.Visit(Microsoft.Cci.MutableCodeModel.Win32Resource)">
            <summary>
            Visits the specified win32 resource.
            </summary>
            <param name="win32Resource">The win32 resource.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitMethodReturnValueAttributes(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the method return value attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitMethodReturnValueCustomModifiers(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the method return value custom modifiers.
            </summary>
            <param name="customModifers">The custom modifers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.VisitMethodReturnValueMarshallingInformation(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits the method return value marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MetadataMutator.TypeOrderPreserver">
            <summary>
            A callback object provided to the sort routine to allow it to compare INamedTypeDefinition objects.
            The criteria used for the comparison is that if type x was before type y in the assembly of which a mutated copy is being constructed, then type x 
            should remain before type y in the mutated copy.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.TypeOrderPreserver.#ctor(System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            A callback object provided to the sort routine to allow it to compare INamedTypeDefinition objects.
            The criteria used for the comparison is that if type x was before type y in the assembly of which a mutated copy is being constructed, then type x 
            should remain before type y in the mutated copy.
            </summary>
            <param name="oldTypeList">The list of types in assembly of which a mutated copy is being constructed. This implicitly specifies an ordering
            for the (preserved) types in the mutated copy.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MetadataMutator.TypeOrderPreserver.Compare(Microsoft.Cci.INamedTypeDefinition,Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Performs a comparison of two INamedTypeDefinition instances and returns a value indicating whether one object is less than, equal to, or greater than the other.
            The criteria used for the comparison is that if type x was before type y in the assembly of which a mutated copy is being constructed, then type x 
            should remain before type y in the mutated copy.
            </summary>
            <param name="x">The first INamedTypeDefinition instance to compare.</param>
            <param name="y">The second INamedTypeDefinition instance to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>.Zero <paramref name="x"/> equals <paramref name="y"/>.Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MutatingVisitor">
            <summary>
            A visitor that visits a mutable metadata model. Derived classes can override the Mutate() methods
            to intervene in the visiting process, usually changes subnodes in place. Definitions that are used as refereces are 
            visited as references. Because references may be shared between parts that are visited and parts that are not, 
            this visitor may make a copy of a reference. The same references will be replaced by this copy
            whenever seen by the visitor.
            
            </summary>
            <remarks>
            1) When making copies, for type references, copies are made only when any of the subnodes changed. This optimization
            is not available for method, fields, namespace and other references. 
            2) Subclasses, if want to change a node, override the Mutate method. For ITypeReference, IAssemblyReference and their
            subclasses, Mutate takes an interface value as argument. Otherwise, Mutate method mutates a mutable model object. 
            3) References are identified by their object ID in this class. A better alternative could use interned ID.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            A visitor that visits a mutable metadata model. Derived classes can override the visit methods
            to intervene in the visiting process, usually changes subnodes in place. By default this visitor
            will not visit non-mutable model nodes. This behavior can be changed by setting the visitImmutableNodes
            flag to be true.
            
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.#ctor(Microsoft.Cci.IMetadataHost,System.Boolean)">
            <summary>
            A visitor that visits a mutable metadata model. Derived classes can override the visit methods
            to intervene in the visiting process, usually changes subnodes in place. By default this visitor
            will not visit non-mutable model nodes. This behavior can be changed by setting the visitImmutableNodes
            flag to be true;
            
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="visitImmutableNodes">
            When we see an immutable node, whether we descend to visit its children. 
            </param>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MutatingVisitor.visitImmutableNodes">
            <summary>
            True if the mutator should try and perform mutations in place, rather than mutating new copies.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MutatingVisitor.host">
            <summary>
            The metadata host.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MutatingVisitor.path">
            <summary>
            The path that starts from the root of the cone, containing every container node that enclosing the node
            that is currently visited. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MutatingVisitor.stopTraversal">
            <summary>
            Set this flag to stop further traversing. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.MutatingVisitor.referenceCache">
            <summary>
            A cache for references, which may be copied. There is one copy for an original reference ref; the cache always contains
            (ref, copy) and (copy, copy) for every reference that has been copied. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetCurrentMethod">
            <summary>
            If we haven't finished visiting a method definition, returns that method. Otherwise, returns dummy. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetCurrentNamespace">
            <summary>
            If we havent finished visiting a namespace, returns the most recent such a namespace. Otherwise, returns dummy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetCurrentSignature">
            <summary>
            If we havent finished visiting a signature, returns that signature. Otherwise, returns dummy. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetCurrentType">
            <summary>
            If we havent finished visiting a type, returns the most recent such a type. Otherwise, returns dummy. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetCurrentUnit">
            <summary>
            If we havent finished visiting a unit, returns that unit. Otherwise, returns dummy. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits an immutable collection of attributes
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.ILocation})">
            <summary>
            Visits an immutable collection of locations.
            </summary>
            <param name="locations"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IMetadataExpression})">
            <summary>
            Visits an immutable collection of metadata expressions. 
            </summary>
            <param name="metadataExpressions"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IMetadataNamedArgument})">
            <summary>
            Visits an immutable collection of (metadata) named arguments. 
            </summary>
            <param name="namedArguments"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IAliasForType})">
            <summary>
            Visits an immutable collection of aliasForTypes. 
            </summary>
            <param name="aliasForTypes"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits an immutable collection of custom modifiers.
            </summary>
            <param name="modifiers"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IEventDefinition})">
            <summary>
            Visits an immutable collection of events.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IFieldDefinition})">
            <summary>
            Visits an immutable collection of fields. 
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IGenericTypeParameter})">
            <summary>
            Visits an immutable collection of generic type parameters. 
            </summary>
            <param name="genericTypeParameters"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IFileReference})">
            <summary>
            Visits an immutable collection of files. 
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IMethodDefinition})">
            <summary>
            Visits an immutable collection of methods. 
            </summary>
            <param name="methods"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IMethodImplementation})">
            <summary>
            Visits an immutable collection of method implementation relations. 
            </summary>
            <param name="methodImpls"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IMethodReference})">
            <summary>
            Visits an immutable collection of method references. 
            </summary>
            <param name="methods"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IModule})">
            <summary>
            Visits an immutable collection of modules. 
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.INamespaceMember})">
            <summary>
            Visits an immutable collection of namespace members, i.e., types, global fields, global methods, etc. 
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.INestedTypeDefinition})">
            <summary>
            Visits an immutable collection of nested type definitions. 
            </summary>
            <param name="nestedTypes"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Visits an immutable collection of parameter definitions. 
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Visits an immutable collection of parameter type information objects.
            </summary>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IPropertyDefinition})">
            <summary>
            Visits an immutable collection of properties. 
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.IResourceReference})">
            <summary>
            Visits an immutable collection of resource references. 
            </summary>
            <param name="resources"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.ISecurityAttribute})">
            <summary>
            Visits an immutable collection of security attributes.
            </summary>
            <param name="securityAttributes"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
            <summary>
            Visits an immutable collection of type references.
            </summary>
            <param name="typeReferences"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Visits an ICustomAttribute. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ICustomModifier)">
            <summary>
            Visits an ICustomModifier. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="customModifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IAliasForType})">
            <summary>
            Visits the specified aliases for types.
            </summary>
            <param name="aliasesForTypes">The aliases for types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INamespaceAliasForType)">
            <summary>
            Visit an INamespaceAliasForType. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="namespaceAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INestedAliasForType)">
            <summary>
            Visit an INestedAliasForType. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="nestedAliasForType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IAliasForType)">
            <summary>
            Visits the specified alias for type. This is a dispatcher. Concrete subclass object is visited.
            </summary>
            <param name="aliasForType">Type of the alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IAssembly)">
            <summary>
            Visits an IAssembly. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="assembly">The assembly to copy.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.Assembly)">
            <summary>
            Visits a mutable assembly. 
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IAssemblyReference})">
            <summary>
            Visits the specified assembly references.
            </summary>
            <param name="assemblyReferences">The assembly references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Visits an IAssemblyReference. We first check in the cache and return the cached value if there is one. Then we 
            call the Mutate method where a copy may be produced if anything changes. 
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Visits the specified assembly reference. May make a copy if this.copyReferences is true and this reference has 
            not been copied. 
            
            Override this method instead of the corresponding Visit method if a subclass expects to change the node. 
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns>Simply returns the assembly reference unchanged.</returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the specified custom attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.CustomAttribute)">
            <summary>
            Visits the mutable custom attribute.
            </summary>
            <param name="customAttribute">The custom customAttribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the specified custom modifiers.
            </summary>
            <param name="customModifiers">The custom modifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.CustomModifier)">
            <summary>
            Visits a mutable custom modifier.
            </summary>
            <param name="customModifier">The custom modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IEventDefinition})">
            <summary>
            Visits the specified event definitions.
            </summary>
            <param name="eventDefinitions">The event definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IEventDefinition)">
            <summary>
            Visits an IEventDefinition. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.EventDefinition)">
            <summary>
            Visits a mutable event definition.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IFieldDefinition})">
            <summary>
            Visits the specified field definitions.
            </summary>
            <param name="fieldDefinitions">The field definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.FieldDefinition)">
            <summary>
            Visits a mutable field definition.
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Visits (interface)IFieldDefinition. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IFieldReference)">
            <summary>
            Visits an (interface) field reference. We first see the reference has been cached. If so we return the 
            cached value. Then we mutate a copy of the input as a reference, if the input is a definition or already
            a mutable reference. If the copy is an immutable, non short-cut reference, we may choose to visit its subnodes
            according to the flag this.visitImmutableNodes. 
            
            Note that mutable nodes that implement the IFieldReference include those implement ISpecializedFieldReference (
            that is SpecializedFieldReference and SpecializedFieldDefinition), IGlobalFieldDefinition(GlobalFieldDefinition)
            and IFieldDefinition(excluding IGlobalFieldDefinitions, that is, only FieldDefinition). 
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.FieldReference)">
            <summary>
            Visits the specified field reference. 
            </summary>
            <param name="fieldReference">The field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IFileReference})">
            <summary>
            Visits the specified file references.
            </summary>
            <param name="fileReferences">The file references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IFileReference)">
            <summary>
            Visits the specified file reference. This method simply returns the file reference. 
            </summary>
            <param name="fileReference">The file reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Visit a generic method instance reference. Note that IGenericMethodInstanceReference may be implemented by
            mutable node GenericMethodInstance or GenericMethodInstanceReference. 
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GenericMethodInstanceReference)">
            <summary>
            Visits the mutable generic method instance reference.
            </summary>
            <param name="genericMethodInstanceReference">The generic method instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IGenericMethodParameter})">
            <summary>
            Visits the specified generic method parameters.
            </summary>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericMethodParameter)">
            <summary>
            Visits the (interface) IGenericMethodParameter Node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes).  
            </summary>
            <param name="genericMethodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GenericMethodParameter)">
            <summary>
            Visits the mutable generic method parameter.
            </summary>
            <param name="genericMethodParameter">The generic method parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GlobalFieldDefinition)">
            <summary>
            Visits the mutable global field definition.
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GlobalMethodDefinition)">
            <summary>
            Visits the mutable global method definition.
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitGenericParameter(Microsoft.Cci.MutableCodeModel.GenericParameter)">
            <summary>
            Visits the mutable generic parameter node. 
            </summary>
            <param name="genericParameter">The generic parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IGenericTypeParameter})">
            <summary>
            Visits the specified generic type parameters.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericTypeParameter)">
            <summary>
            Visits the interface IGenericTypeParameter. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="genericTypeParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GenericTypeParameter)">
            <summary>
            Visits the mutable generic type parameter.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ILocation})">
            <summary>
            Visits the specified locations.
            </summary>
            <param name="locations">The locations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ILocation)">
            <summary>
            Visits the specified location. Simply return the location. 
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Visits the (interface) ILocalDefinition. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="localDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.LocalDefinition)">
            <summary>
            Visits a mutable local definition.
            </summary>
            <param name="localDefinition">The local definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitReferenceTo(Microsoft.Cci.ILocalDefinition)">
            <summary>
            Visits a reference to the specified local definition.
            </summary>
            <param name="localDefinition">The referenced local definition to visit.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMarshallingInformation)">
            <summary>
            Visits the (interface) IMarshallingInformation. We first see if it is a mutable model node, if so, we 
            visit the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="marshallingInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits a mutable marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MetadataConstant)">
            <summary>
            Visits a mutable constant node.
            </summary>
            <param name="constant">The constant.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MetadataCreateArray)">
            <summary>
            Visits the mutable create array.
            </summary>
            <param name="createArray">The create array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IMetadataExpression})">
            <summary>
            Visits the specified metadata expressions.
            </summary>
            <param name="metadataExpressions">The metadata expressions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Visits the (interface) IMetadataConstant node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Visits the (interface) IMetadataCreateArray node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="createArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Visits the (interface) IMetadataTypeOf node. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="typeOf"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMetadataNamedArgument)">
            <summary>
            Visit a metadata named argument.
            </summary>
            <param name="namedArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Dispatch(Microsoft.Cci.IMetadataExpression)">
            <summary>
            Visits the specified expression. 
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IMetadataNamedArgument})">
            <summary>
            Visits the specified named arguments.
            </summary>
            <param name="namedArguments">The named arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MetadataNamedArgument)">
            <summary>
            Visits the specified named argument.
            </summary>
            <param name="namedArgument">The named argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MetadataTypeOf)">
            <summary>
            Visits the mutable metadata type-of node.
            </summary>
            <param name="typeOf">The type of.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MethodBody)">
            <summary>
            Visits a mutable method body.
            </summary>
            <param name="methodBody">The method body.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IOperationExceptionInformation})">
            <summary>
            Visits the specified exception informations.
            </summary>
            <param name="exceptionInformations">The exception informations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IOperationExceptionInformation)">
            <summary>
            Visit an (interface) IOperationExceptionInformation node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="operationExceptionInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.OperationExceptionInformation)">
            <summary>
            Visits an mutable operation exception information node. 
            </summary>
            <param name="operationExceptionInformation">The operation exception information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IOperation})">
            <summary>
            Visits the specified operations.
            </summary>
            <param name="operations">The operations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IOperation)">
            <summary>
            Visit an interface IOperation node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.Operation)">
            <summary>
            Visits the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ILocalDefinition})">
            <summary>
            Visits the specified locals.
            </summary>
            <param name="locals">The locals.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IMethodDefinition})">
            <summary>
            Visits the specified method definitions.
            </summary>
            <param name="methodDefinitions">The method definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGlobalFieldDefinition)">
            <summary>
            Visits an (interface) global field definition node. We first see if it is a mutable model node, if so, we visit
            the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="globalFieldDefinition">The global field definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGlobalMethodDefinition)">
            <summary>
            Visits an (interface) global method definition. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="globalMethodDefinition">The global method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Visits interface method definition node. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MethodDefinition)">
            <summary>
            Visits the mutable method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IMethodImplementation})">
            <summary>
            Visits the specified method implementations.
            </summary>
            <param name="methodImplementations">The method implementations.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMethodImplementation)">
            <summary>
            Visit an (interface) IMethodImplementation. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="methodImplementation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MethodImplementation)">
            <summary>
            Visits a mutable method implementation node.
            </summary>
            <param name="methodImplementation">The method implementation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IMethodReference})">
            <summary>
            Visits the specified method references.
            </summary>
            <param name="methodReferences">The method references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMethodBody)">
            <summary>
            Visits an (interface) method body. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="methodBody">The method body.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IMethodReference)">
            <summary>
            Visits an (interface) method reference. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            
            Note that mutable nodes that implement IMethodReference include those who implement ISpecializedMethodReference (SpecializedMethodDefinition
            and SpecializedMethodReference), who implements IGenericMethodInstanceReference(GenericMethodInstance and GenericMethodInstanceReference), 
            who implements IGlobalMethodDefinition (GlobalMethodDefinition), who implements IMethodDefinition otherwise( MethodDefinition) and
            MethodReference. For definition nodes, we have to visit them as reference nodes. 
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MethodReference)">
            <summary>
            Visits a mutable method reference.
            </summary>
            <param name="methodReference">The method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IModule})">
            <summary>
            Visits the specified modules.
            </summary>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IModule)">
            <summary>
            Visit an interface module. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.Module)">
            <summary>
            Visits a mutable module.
            </summary>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IModuleReference})">
            <summary>
            Visits the specified module references.
            </summary>
            <param name="moduleReferences">The module references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.ModuleReference)">
            <summary>
            Visits the specified module reference. Will not make a copy. 
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.INamespaceMember})">
            <summary>
            Visits the specified namespace members.
            </summary>
            <param name="namespaceMembers">The namespace members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Dispatch(Microsoft.Cci.INamespaceMember)">
            <summary>
            Visits the specified namespace member. Dispatch to type specific visiting methods. 
            </summary>
            <param name="namespaceMember">The namespace member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.NamespaceAliasForType)">
            <summary>
            Visits a mutable namespace alias for type.
            </summary>
            <param name="namespaceAliasForType">Type of the namespace alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition)">
            <summary>
            Visits a mutable namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.NestedAliasForType)">
            <summary>
            Visits a mutable node for nested alias for type.
            </summary>
            <param name="nestedAliasForType">Type of the nested alias for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.INestedTypeDefinition})">
            <summary>
            Visits the specified nested type definitions.
            </summary>
            <param name="nestedTypeDefinitions">The nested type definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.NestedTypeDefinition)">
            <summary>
            Visits the mutable nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitNestedTypeReference(Microsoft.Cci.MutableCodeModel.NestedTypeReference)">
            <summary>
            Visits a mutable nested type reference. 
            
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Visits the interface ISpecializedFieldReference. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            
            Note that mutable nodes that implement ISpecializedFieldReference include SpecializedFieldReference and SpecializedFieldDefinition. 
            </summary>
            <param name="specializedFieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.SpecializedFieldReference)">
            <summary>
            Visits a mutable specialized field reference.
            </summary>
            <param name="specializedFieldReference">The specialized field reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Visits an (interface) ISpecializedMethodReference. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            
            Note that mutable nodes that implement ISpecializedMethodReference include SpecializedMethodReference and 
            SpecializedMethodDefinition.
            </summary>
            <param name="specializedMethodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.SpecializedMethodReference)">
            <summary>
            Visits a mutable specialized method reference.
            </summary>
            <param name="specializedMethodReference">The specialized method reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Visits an (interface) ISpecializedNestedTypeReference node. We first check in the cache and return the cached value if there 
            is one. Then we call the Mutate method where a copy may be produced if anything changes. If not, we either return, 
            or continue to visit the immutable subnodes, according to the flag (this.visitImmutableNodes). 
            
            If a subclass want to change the node, override the corresponding Mutate method.
            
            Note that mutable nodes that implement ISpecializedNestedTypeReference include SpecializedNestedTypeReference and 
            SpecializedNestedTypeDefinition. 
            </summary>
            <param name="specializedNestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.ISpecializedNestedTypeReference)">
            <summary>
            Mutate an ISpecializedNestedTypeReference. 
            </summary>
            <param name="specializedNestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference)">
            <summary>
            Visits the mutable specialized nested type reference.
            </summary>
            <param name="specializedNestedTypeReference">The specialized nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitTypeDefinition(Microsoft.Cci.MutableCodeModel.NamedTypeDefinition)">
            <summary>
            Replaces the child nodes of the given mutable type definition with the results of running the mutator over them. 
            </summary>
            <param name="typeDefinition">A mutable type definition.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitPrivateHelperMembers(System.Collections.Generic.List{Microsoft.Cci.INamedTypeDefinition})">
            <summary>
            Visits the private helper members.
            </summary>
            <param name="typeDefinitions">The type definitions.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IPESection})">
            <summary>
            Visits the specified PE sections.
            </summary>
            <param name="peSections">The PE sections.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ITypeDefinitionMember})">
            <summary>
            Visits the specified type definition members.
            </summary>
            <param name="typeDefinitionMembers">The type definition members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Dispatch(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitITypeDefinitionMember(Microsoft.Cci.ITypeDefinitionMember)">
            <summary>
            Visit the common members of a type definition member. 
            </summary>
            <param name="typeDefinitionMember"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ITypeReference})">
            <summary>
            Visits the specified type references.
            </summary>
            <param name="typeReferences">The type references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INamespaceMember)">
            <summary>
            Visits the specified namespace member.
            </summary>
            <param name="namespaceMember">The namespace member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Visits the specified namespace type reference. We first check in the cache and return the cached value if there 
            is one. Then we call the Substitute method where a copy may be produced if anything changes. 
            
            If a subclass want to change the node, override the corresponding Substitute method.
            </summary>
            <param name="namespaceTypeReference">The namespace type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Creates a new copy of the reference node only if any its sub nodes are changed during recursive
            visit. Returns the input reference otherwise.
            
            Override this method in the subclass if changes to this node are planned. 
            </summary>
            <param name="namespaceTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Visits the specified nested type reference.
            </summary>
            <param name="nestedTypeReference">The nested type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Mutate an INestedTypeReference.
            </summary>
            <param name="nestedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Visits the specified generic method parameter reference.
            </summary>
            <param name="genericMethodParameterReference">The generic method parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference)">
            <summary>
            Visit a generic method parameter reference. 
            </summary>
            <param name="genericMethodParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetTypeSpecificReferenceCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            Get a type specific reference copy of a method reference. 
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Visits the specified array type reference.
            </summary>
            <param name="arrayTypeReference">The array type reference.</param>
            <returns></returns>
            <remarks>Array types are not nominal types, so always visit the reference, even if it is a definition.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.VectorTypeReference)">
            <summary>
            Mutate a VectorTypeRefence.
            </summary>
            <param name="vectorType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.MatrixTypeReference)">
            <summary>
            Mutate a matrix type reference.
            </summary>
            <param name="matrixType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Visits the specified generic type parameter reference.
            </summary>
            <param name="genericTypeParameterReference">The generic type parameter reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Mutate an IGenericTypeParameterReference.
            </summary>
            <param name="genericTypeParameterReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Visits the specified generic type instance reference.
            </summary>
            <param name="genericTypeInstanceReference">The generic type instance reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Mutate an IGenericTypeInstanceReference.
            </summary>
            <param name="genericTypeInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
            <summary>
            Mutate a collection of types. 
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Visits the specified pointer type reference.
            </summary>
            <param name="pointerTypeReference">The pointer type reference.</param>
            <returns></returns>
            <remarks>
            Pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Mutate an IPointerTypeReference.
            </summary>
            <param name="pointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Visits the specified function pointer type reference.
            </summary>
            <param name="functionPointerTypeReference">The function pointer type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier})">
            <summary>
            Mutate a collection of modifiers. 
            </summary>
            <param name="modifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Mutate an IFunctionPointerTypeReference. 
            </summary>
            <param name="functionPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Mutate a collection of IParameterTypeInformation.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Visits the specified managed pointer type reference.
            </summary>
            <param name="managedPointerTypeReference">The managed pointer type reference.</param>
            <returns></returns>
            <remarks>
            Managed pointer types are not nominal types, so always visit the reference, even if
            it is a definition.
            </remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IManagedPointerTypeReference)">
            <summary>
            Mutate an IManagedPointerTypeReference.
            </summary>
            <param name="managedPointerTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Visits the specified modified type reference.
            </summary>
            <param name="modifiedTypeReference">The modified type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.IModifiedTypeReference)">
            <summary>
            Mutate an IModifiedTypeReference.
            </summary>
            <param name="modifiedTypeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IModuleReference)">
            <summary>
            Visits the specified module reference.
            </summary>
            <param name="moduleReference">The module reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Visits the specified namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition">The namespace type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Visits the specified nested type definition.
            </summary>
            <param name="nestedTypeDefinition">The nested type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ITypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference.
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Visits the specified nested unit namespace reference.
            </summary>
            <param name="nestedUnitNamespaceReference">The nested unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.INestedUnitNamespaceReference)">
            <summary>
            Visit a nested unit namespace reference. 
            </summary>
            <param name="nestedUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.NestedUnitNamespace)">
            <summary>
            Visits the specified nested unit namespace.
            </summary>
            <param name="nestedUnitNamespace">The nested unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IUnitReference)">
            <summary>
            Visits the specified unit reference.
            </summary>
            <param name="unitReference">The unit reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Visits the specified parameter definitions.
            </summary>
            <param name="parameterDefinitions">The parameter definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Visit a parameter definition. 
            </summary>
            <param name="parameterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.ParameterDefinition)">
            <summary>
            Visits the specified parameter definition.
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitReferenceTo(Microsoft.Cci.IParameterDefinition)">
            <summary>
            Visits a parameter definition that is being referenced.
            </summary>
            <param name="parameterDefinition">The referenced parameter definition.</param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Visits the specified parameter type information list.
            </summary>
            <param name="parameterTypeInformationList">The parameter type information list.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Visit a parameter type information.
            </summary>
            <param name="parameterTypeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.ParameterTypeInformation)">
            <summary>
            Visits the specified parameter type information.
            </summary>
            <param name="parameterTypeInformation">The parameter type information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IPESection)">
            <summary>
            Visits the (interface) IPESection. We first see if it is a mutable model node, if so, we 
            visit the mutable node. If not, we just return the section.
            </summary>
            <param name="peSection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.PESection)">
            <summary>
            Visits a mutable PE section.
            </summary>
            <param name="peSection">The PE section.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IPlatformInvokeInformation)">
            <summary>
            Visit p/invoke information.
            </summary>
            <param name="platformInvokeInformation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.PlatformInvokeInformation)">
            <summary>
            Visits the specified platform invoke information.
            </summary>
            <param name="platformInvokeInformation">The platform invoke information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IPropertyDefinition})">
            <summary>
            Visits the specified property definitions.
            </summary>
            <param name="propertyDefinitions">The property definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Visits the (interface) property definition. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.PropertyDefinition)">
            <summary>
            Visits the specified mutable property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IResourceReference})">
            <summary>
            Visits the specified resource references.
            </summary>
            <param name="resourceReferences">The resource references.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IResourceReference)">
            <summary>
            Visit resource reference. 
            </summary>
            <param name="resourceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.ResourceReference)">
            <summary>
            Visits the specified resource reference. No copy is made. 
            </summary>
            <param name="resourceReference">The resource reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.ISecurityAttribute})">
            <summary>
            Visits the specified security attributes.
            </summary>
            <param name="securityAttributes">The security attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Visits the interface root unit namespace reference. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            
            Note that RootUnitNamespace also implements IRootUnitNamespaceReference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IRootUnitNamespace)">
            <summary>
            Visits (interface) IRootUnitNamespace. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="rootUnitNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.RootUnitNamespace)">
            <summary>
            Visits the specified mutable root unit namespace.
            </summary>
            <param name="rootUnitNamespace">The root unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference)">
            <summary>
            Visits the specified mutable root unit namespace reference.
            </summary>
            <param name="rootUnitNamespaceReference">The root unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ISecurityAttribute)">
            <summary>
            Visits the (interface) ISecurityAttribute. We first see if it is a mutable model node, if so, we call the visit method
            on the mutable node. If not, we either return, or continue to visit the immutable subnodes, depending
            on the flag (this.visitImmutableNodes). 
            </summary>
            <param name="securityAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.SecurityAttribute)">
            <summary>
            Visits the specified mutable security customAttribute.
            </summary>
            <param name="securityAttribute">The security customAttribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.ISectionBlock)">
            <summary>
            Visits the interface section block. Simply return itself. 
            </summary>
            <param name="sectionBlock">The section block.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitTypeDefinitionMember(Microsoft.Cci.MutableCodeModel.TypeDefinitionMember)">
            <summary>
            Visits the specified type definition member.
            </summary>
            <param name="typeDefinitionMember">The type definition member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitTypeReference(Microsoft.Cci.MutableCodeModel.TypeReference)">
            <summary>
            Visits the specified type reference.
            </summary>
            <param name="typeReference">The type reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitTypeReference(Microsoft.Cci.ITypeReference)">
            <summary>
            Visit the common part of a type reference. 
            </summary>
            <param name="typeReference"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.Unit)">
            <summary>
            Visits the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(Microsoft.Cci.MutableCodeModel.UnitNamespace)">
            <summary>
            Visits the specified unit namespace.
            </summary>
            <param name="unitNamespace">The unit namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitUnitNamespaceReference(Microsoft.Cci.MutableCodeModel.UnitNamespaceReference)">
            <summary>
            Visits the specified unit namespace reference. 
            </summary>
            <param name="unitNamespaceReference">The unit namespace reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Mutate(System.Collections.Generic.List{Microsoft.Cci.IWin32Resource})">
            <summary>
            Visits the specified win32 resources.
            </summary>
            <param name="win32Resources">The win32 resources.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.Visit(Microsoft.Cci.IWin32Resource)">
            <summary>
            Visits the specified win32 resource.
            </summary>
            <param name="win32Resource">The win32 resource.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitMethodReturnValueAttributes(System.Collections.Generic.List{Microsoft.Cci.ICustomAttribute})">
            <summary>
            Visits the method return value attributes.
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitMethodReturnValueCustomModifiers(System.Collections.Generic.List{Microsoft.Cci.ICustomModifier})">
            <summary>
            Visits the method return value custom modifiers.
            </summary>
            <param name="customModifers">The custom modifers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.VisitMethodReturnValueMarshallingInformation(Microsoft.Cci.MutableCodeModel.MarshallingInformation)">
            <summary>
            Visits the method return value marshalling information.
            </summary>
            <param name="marshallingInformation">The marshalling information.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.IFieldReference)">
            <summary>
            Create a copy for a field reference that is not specialized.
            </summary>
            <param name="fieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.IMethodReference)">
            <summary>
            Create a copy for a method reference that is not any specialized, instantiated method class.
            </summary>
            <param name="methodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.IRootUnitNamespaceReference)">
            <summary>
            Create a copy for root unit namespace reference. 
            </summary>
            <param name="rootUnitNamespaceReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.ISpecializedFieldReference)">
            <summary>
            Create a copy for a specialized field reference.
            </summary>
            <param name="specializedFieldReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.ISpecializedMethodReference)">
            <summary>
            Create a copy for a specialized method reference.
            </summary>
            <param name="specializedMethodReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutatingVisitor.GetReferenceCopy(Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            Create a copy for a generic method instance reference. 
            </summary>
            <param name="genericMethodInstanceReference"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MutableModelHelper">
            <summary>
            A helper class that provides functional versions of creating different type references. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetGenericTypeInstanceReference(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference},Microsoft.Cci.INamedTypeReference,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a generic type instance reference. 
            </summary>
            <param name="genericArgs"></param>
            <param name="genericType"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly 
            created node. </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetGenericTypeParameterReference(Microsoft.Cci.ITypeReference,Microsoft.Cci.IName,System.UInt16,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a generic type parameter reference. 
            </summary>
            <param name="definingType"></param>
            <param name="name"></param>
            <param name="index"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetNestedTypeReference(Microsoft.Cci.ITypeReference,System.UInt16,System.Boolean,Microsoft.Cci.IName,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a nested type reference. 
            </summary>
            <param name="containingType"></param>
            <param name="genericParameterCount"></param>
            <param name="mangleName"></param>
            <param name="name"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetNamespaceTypeReference(Microsoft.Cci.IUnitNamespaceReference,System.UInt16,System.Boolean,Microsoft.Cci.IName,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a namespace type reference.
            </summary>
            <param name="containingUnitNamespace"></param>
            <param name="genericParameterCount"></param>
            <param name="mangleName"></param>
            <param name="name"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetSpecializedNestedTypeReference(Microsoft.Cci.ITypeReference,System.UInt16,System.Boolean,Microsoft.Cci.IName,Microsoft.Cci.INestedTypeReference,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a specialized nested type reference.
            </summary>
            <param name="containingType"></param>
            <param name="genericParameterCount"></param>
            <param name="mangleName"></param>
            <param name="name"></param>
            <param name="unspecializedVersion"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetPointerTypeReference(Microsoft.Cci.ITypeReference,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a pointer type reference.
            </summary>
            <param name="targetType"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly 
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetFunctionPointerTypeReference(Microsoft.Cci.CallingConvention,System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier},System.Boolean,Microsoft.Cci.ITypeReference,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating a function pointer type reference. 
            </summary>
            <param name="callingConvention"></param>
            <param name="parameters"></param>
            <param name="extraArgumentTypes"></param>
            <param name="returnValueIsModified"></param>
            <param name="returnValueCustomModifiers"></param>
            <param name="returnValueIsByRef"></param>
            <param name="type"></param>
            <param name="internFactory"></param>
            <param name="original">If not null, contains auxiliary information such as attributes or locations, which we also copy to the newly 
            created node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetModifiedTypeReference(Microsoft.Cci.ITypeReference,System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomModifier},Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating an IModifiedTypeReference using mutable model. 
            </summary>
            <param name="unmodifiedType"></param>
            <param name="modifiers"></param>
            <param name="internFactory"></param>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MutableModelHelper.GetManagedPointerTypeReference(Microsoft.Cci.ITypeReference,Microsoft.Cci.IInternFactory,Microsoft.Cci.ITypeReference)">
            <summary>
            Functional version of creating an IManagedPointerTypeReference in mutable model. 
            </summary>
            <param name="pointeeType"></param>
            <param name="internFactory"></param>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.UnitNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.Copy(Microsoft.Cci.IUnitNamespace,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="unitNamespace"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.Contains(Microsoft.Cci.INamespaceMember)">
            <summary>
            Return true if the given member instance is a member of this scope.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.GetMatchingMembersNamed(Microsoft.Cci.IName,System.Boolean,Microsoft.Cci.Function{Microsoft.Cci.INamespaceMember,System.Boolean})">
            <summary>
            Returns the list of members with the given name that also satisfy the given predicate.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.GetMatchingMembers(Microsoft.Cci.Function{Microsoft.Cci.INamespaceMember,System.Boolean})">
            <summary>
            Returns the list of members that satisfy the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.GetMembersNamed(Microsoft.Cci.IName,System.Boolean)">
            <summary>
            Returns the list of members with the given name.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespace.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespace.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespace.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespace.Members">
            <summary>
            The collection of member objects comprising the namespaces.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespace.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespace.Unit">
            <summary>
            The IUnit instance associated with this namespace.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.Copy(Microsoft.Cci.INestedUnitNamespace,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespace"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedUnitNamespace).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedUnitNamespaceReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.ContainingUnitNamespace">
            <summary>
            The unit namespace that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.ContainingScope">
            <summary>
            The scope instance with a Members collection that includes this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespace.Container">
            <summary>
            The container instance with a Members collection that includes this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.Copy(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="unitNamespaceReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.isFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.IsFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitNamespaceReference.ResolvedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.Copy(Microsoft.Cci.INestedUnitNamespaceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="nestedUnitNamespaceReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedUnitNamespaceReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.GetUnit">
            <summary>
            Gets the unit.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.ContainingUnitNamespace">
            <summary>
            A reference to the unit namespace that contains the referenced nested unit namespace.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.ResolvedNestedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.ResolvedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedUnitNamespaceReference.Unit">
            <summary>
            A reference to the unit that defines the referenced namespace.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.RootUnitNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespace.Copy(Microsoft.Cci.IRootUnitNamespace,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespace"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespace.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IRootUnitNamespace).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespace.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IRootUnitNamespaceReference).
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference.Copy(Microsoft.Cci.IRootUnitNamespaceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="rootUnitNamespaceReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IRootUnitNamespaceReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference.ResolvedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.RootUnitNamespaceReference.Unit">
            <summary>
            A reference to the unit that defines the referenced namespace.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.AliasForType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.Copy(Microsoft.Cci.IAliasForType,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="aliasForType"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.Contains(Microsoft.Cci.IAliasMember)">
            <summary>
            Return true if the given member instance is a member of this scope.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            This throws an InvalidOperation exception since valid metadata never has a reference to a type alias.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.GetMatchingMembersNamed(Microsoft.Cci.IName,System.Boolean,Microsoft.Cci.Function{Microsoft.Cci.IAliasMember,System.Boolean})">
            <summary>
            Returns the list of members with the given name that also satisfy the given predicate.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.GetMatchingMembers(Microsoft.Cci.Function{Microsoft.Cci.IAliasMember,System.Boolean})">
            <summary>
            Returns the list of members that satisfy the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AliasForType.GetMembersNamed(Microsoft.Cci.IName,System.Boolean)">
            <summary>
            Returns the list of members with the given name.
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AliasForType.AliasedType">
            <summary>
            Type reference of the type for which this is the alias
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AliasForType.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AliasForType.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AliasForType.Members">
            <summary>
            The collection of member objects comprising the type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ArrayTypeReference">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.TypeReference">
            <summary>
            A reference to a type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeReference.#ctor">
            <summary>
            A reference to a type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeReference.Copy(Microsoft.Cci.ITypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="typeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.TypeReference.isFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.TypeReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.AliasForType">
            <summary>
            If this type reference can be resolved and it resolves to a type alias, the resolution continues on
            to resolve the reference to the aliased type. This property provides a way to discover how that resolution
            proceeded, by exposing the alias concerned. Think of this as a version of ResolvedType that does not
            traverse aliases.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.InternFactory">
            <summary>
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.InternedKey">
            <summary>
            Returns the unique interned key associated with the type. This takes unification/aliases/custom modifiers into account.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.IsAlias">
            <summary>
            Indicates if this type reference resolved to an alias rather than a type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.IsEnum">
            <summary>
            True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.IsFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.IsValueType">
            <summary>
            True if the type is a value type.
            Value types are sealed and extend System.ValueType or System.Enum.
            A type parameter for which MustBeValueType (the struct constraint in C#) is true also returns true for this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type.
            If the type reference cannot be resolved, the result is Dummy.TypeDefinition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.Locations">
            <summary>
            A potentially null, potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.PlatformType">
            <summary>
            A way to get to platform types such as System.Object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.TypeReference.TypeCode">
            <summary>
            Unless the value of TypeCode is PrimitiveTypeCode.NotPrimitive, the type corresponds to a "primitive" CLR type (such as System.Int32) and
            the type code identifies which of the primitive types it corresponds to.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.#ctor">
            <summary>
            A reference to an array type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IArrayTypeReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.Resolve">
            <summary>
            Returns the type of the resolved array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.ElementType">
            <summary>
            The type of the elements of this array.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.IsVector">
            <summary>
            This type of array is a single dimensional array with zero lower bound for index values.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.LowerBounds">
            <summary>
            A possibly empty list of lower bounds for dimension indices. When not explicitly specified, a lower bound defaults to zero.
            The first lower bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.Rank">
            <summary>
            The number of array dimensions.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.Sizes">
            <summary>
            A possible empty list of upper bounds for dimension indices.
            The first upper bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            An unspecified upper bound means that instances of this type can have an arbitrary upper bound for that dimension.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.ResolvedType">
            <summary>
            Gets the type of the resolved.
            </summary>
            <value>The type of the resolved.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ArrayTypeReference.ResolvedArrayType">
            <summary>
            Gets the type of the resolved array.
            </summary>
            <value>The type of the resolved array.</value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.CustomModifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CustomModifier.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.CustomModifier.Copy(Microsoft.Cci.ICustomModifier,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="customModifier"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomModifier.IsOptional">
            <summary>
            If true, a language may use the modified storage location without being aware of the meaning of the modification.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.CustomModifier.Modifier">
            <summary>
            A type used as a tag that indicates which type of modification applies to the storage location.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference">
            <summary>
            A reference to a function pointer type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.#ctor">
            <summary>
            A reference to a function pointer type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.Copy(Microsoft.Cci.IFunctionPointerTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="functionPointerTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IFunctionPointerTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.CallingConvention">
            <summary>
            Calling convention of the signature.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.IsStatic">
            <summary>
            True if the referenced function does not require an instance of its declaring type as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ExtraArgumentTypes">
            <summary>
            The types and modifiers of extra arguments that the caller will pass to the methods that are pointed to by this pointer. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.Parameters">
            <summary>
            The parameters forming part of this signature. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ResolvedFunctionPointer">
            <summary>
            The function pointer type being referred to. Note that function pointers are structural types and that two separate instances with the
            same structure will be equivalent and thus have the same value for InternedKey.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ReturnValueCustomModifiers">
            <summary>
            Returns the list of custom modifiers, if any, associated with the returned value. Evaluate this property only if ReturnValueIsModified is true.
            May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ReturnValueIsByRef">
            <summary>
            True if the return value is passed by reference (using a managed pointer).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.ReturnValueIsModified">
            <summary>
            True if the return value has one or more custom modifiers associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.FunctionPointerTypeReference.Type">
            <summary>
            The return type of the method or type of the property.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference">
            <summary>
            A reference to a generic method parameter type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.#ctor">
            <summary>
            A reference to a generic method parameter type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.Copy(Microsoft.Cci.IGenericMethodParameterReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="genericMethodParameterReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericMethodParameterReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.DefiningMethod">
            <summary>
            A reference to the generic method that defines the referenced type parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericMethodParameterReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference">
            <summary>
            A reference to a generic type instance. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.#ctor">
            <summary>
            A reference to a generic type instance. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.Copy(Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="genericTypeInstanceReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericTypeInstanceReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.GenericArguments">
            <summary>
            The type arguments that were used to instantiate this.GenericType in order to create this type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.GenericType">
            <summary>
            Returns the generic type of which this type is an instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.ResolvedGenericTypeInstance">
            <summary>
            The generic type instance being referred to. Note that generic type instances are structural types and that two separate instances with the
            same structure will be equivalent and thus have the same value for InternedKey.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeInstanceReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericTypeParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameter.Copy(Microsoft.Cci.IGenericTypeParameter,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this type be a shallow copy of the given type.
            </summary>
            <param name="genericTypeParameter">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameter.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericTypeParameter).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameter.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericTypeParameterReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeParameter.DefiningType">
            <summary>
            The generic type that defines this type parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference">
            <summary>
            A reference to a type parameter of a generic type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.#ctor">
            <summary>
            A reference to a type parameter of a generic type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.Copy(Microsoft.Cci.IGenericTypeParameterReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="genericTypeParameterReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IGenericTypeParameterReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.DefiningType">
            <summary>
            A reference to the generic type that defines the referenced type parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.Index">
            <summary>
            The position in the parameter list where this instance can be found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.GenericTypeParameterReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference">
            <summary>
            A reference to a managed pointer type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.#ctor">
            <summary>
            A reference to a managed pointer type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.Copy(Microsoft.Cci.IManagedPointerTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="managedPointerTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IManagedPointerTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.ResolvedManagedPointerType">
            <summary>
            Gets the type of the resolved pointer.
            </summary>
            <value>The type of the resolved pointer.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ManagedPointerTypeReference.TargetType">
            <summary>
            The type of value stored at the target memory location.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MatrixTypeReference">
            <summary>
            A reference to a multi-dimensional array type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.#ctor">
            <summary>
            A reference to a multi-dimensional array type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.Copy(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="matrixTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.Resolve">
            <summary>
            Returns the type of the resolved array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.IsVector">
            <summary>
            This type of array is a single dimensional array with zero lower bound for index values.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.LowerBounds">
            <summary>
            A possible empty list of lower bounds for dimension indices. When not explicitly specified, a lower bound defaults to zero.
            The first lower bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.Rank">
            <summary>
            The number of array dimensions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MatrixTypeReference.Sizes">
            <summary>
            A possible empty list of upper bounds for dimension indices.
            The first upper bound in the list corresponds to the first dimension. Dimensions cannot be skipped.
            An unspecified upper bound means that instances of this type can have an arbitrary upper bound for that dimension.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.MethodImplementation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodImplementation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodImplementation.Copy(Microsoft.Cci.IMethodImplementation,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this implementation be a shallow copy of the given implementation.
            </summary>
            <param name="methodImplementation">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.MethodImplementation.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodImplementation.ContainingType">
            <summary>
            The type that is explicitly implementing or overriding the base class virtual method or explicitly implementing an interface method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodImplementation.ImplementedMethod">
            <summary>
            A reference to the method whose implementation is being provided or overridden.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.MethodImplementation.ImplementingMethod">
            <summary>
            A reference to the method that provides the implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.Copy(Microsoft.Cci.INamespaceAliasForType,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this alias be a shallow copy of the given alias.
            </summary>
            <param name="namespaceAliasForType">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INamespaceAliasForType).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.ContainingNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.IsPublic">
            <summary>
            True if the type can be accessed from other assemblies.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceAliasForType.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.Copy(Microsoft.Cci.INamespaceTypeDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this type be a shallow copy of the given type.
            </summary>
            <param name="namespaceTypeDefinition">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INamespaceTypeDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INamespaceTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.AttributesFor">
            <summary>
            A map from type references to potentially empty enumerations of attributes.
            The references are expected to be references to interface types implemented by this type
            and the attributes are meant to provide additional information about the relationship between this type and its interface.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.ContainingUnitNamespace">
            <summary>
            The namespace that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.IsPublic">
            <summary>
            True if the type can be accessed from other assemblies.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.KeepDistinctFromDefinition">
            <summary>
            True if this reference should be kept distinct from the definition it refers to. That is, when copied or persisted,
            this object should not be unified with the referenced type, even if the referenced type is defined in the same
            module as the reference to the type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeDefinition.IsForeignObject">
            <summary>
            True if objects of this type are neither COM objects nor native to the CLR and are accessed via some kind of interoperation mechanism.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference">
            <summary>
            A reference to a namespace type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.#ctor">
            <summary>
            A reference to a namespace type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.Copy(Microsoft.Cci.INamespaceTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="namespaceTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INamespaceTypeReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.Resolve">
            <summary>
            The namespace type this reference resolves to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.AliasForType">
            <summary>
            If this type reference can be resolved and it resolves to a type alias, the resolution continues on
            to resolve the reference to the aliased type. This property provides a way to discover how that resolution
            proceeded, by exposing the alias concerned. Think of this as a version of ResolvedType that does not
            traverse aliases.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.ContainingUnitNamespace">
            <summary>
            The namespace that contains the referenced type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.MangleName">
            <summary>
            If true, the persisted type name is mangled by appending "`n" where n is the number of type parameters, if the number of type parameters is greater than 0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NamespaceTypeReference.KeepDistinctFromDefinition">
            <summary>
            True if this reference should be kept distinct from the definition it refers to. That is, when copied or persisted,
            this object should not be unified with the referenced type, even if the referenced type is defined in the same
            module as the reference to the type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NestedAliasForType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedAliasForType.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedAliasForType.Copy(Microsoft.Cci.INestedAliasForType,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this alias be a shallow copy of the given alias.
            </summary>
            <param name="nestedAliasForType">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedAliasForType.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedAliasForType).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedAliasForType.ContainingAlias">
            <summary>
            The alias that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedAliasForType.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedAliasForType.Visibility">
            <summary>
            Indicates if the member is public or confined to its containing type, derived types and/or declaring assembly.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.Copy(Microsoft.Cci.INestedTypeDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this type be a shallow copy of the given type.
            </summary>
            <param name="nestedTypeDefinition">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedTypeDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.ContainingTypeDefinition">
            <summary>
            The type definition that contains this member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.Visibility">
            <summary>
            Indicates if the member is public or confined to its containing type, derived types and/or declaring assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeDefinition.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition.Copy(Microsoft.Cci.ISpecializedNestedTypeDefinition,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="specializedNestedTypeDefinition"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(ISpecializedNestedTypeDefinition).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(ISpecializedNestedTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeDefinition.UnspecializedVersion">
            <summary>
            The property that has been specialized to obtain this event. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.NestedTypeReference">
            <summary>
            A reference to a nested type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeReference.#ctor">
            <summary>
            A reference to a nested type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeReference.Copy(Microsoft.Cci.INestedTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="nestedTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.NestedTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INestedTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.AliasForType">
            <summary>
            If this type reference can be resolved and it resolves to a type alias, the resolution continues on
            to resolve the reference to the aliased type. This property provides a way to discover how that resolution
            proceeded, by exposing the alias concerned. Think of this as a version of ResolvedType that does not
            traverse aliases.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.ContainingType">
            <summary>
            A reference to the containing type of the referenced type member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.MangleName">
            <summary>
            If true, the persisted type name is mangled by appending "`n" where n is the number of type parameters, if the number of type parameters is greater than 0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.Name">
            <summary>
            The name of the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.NestedTypeReference.ResolvedTypeDefinitionMember">
            <summary>
            The type definition member this reference resolves to.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.PointerTypeReference">
            <summary>
            A reference to a pointer to unmanaged type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PointerTypeReference.#ctor">
            <summary>
            A reference to a pointer to unmanaged type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PointerTypeReference.Copy(Microsoft.Cci.IPointerTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="pointerTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.PointerTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IPointerTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PointerTypeReference.ResolvedPointerType">
            <summary>
            Gets the type of the resolved pointer.
            </summary>
            <value>The type of the resolved pointer.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PointerTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.PointerTypeReference.TargetType">
            <summary>
            The type of value stored at the target memory location.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference">
            <summary>
            A reference to a specialized nested type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference.#ctor">
            <summary>
            A reference to a specialized nested type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference.Copy(Microsoft.Cci.ISpecializedNestedTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="specializedNestedTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(ISpecializedNestedTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.SpecializedNestedTypeReference.UnspecializedVersion">
            <summary>
            A reference to the nested type that has been specialized to obtain this nested type reference. When the containing type is an instance of type which is itself a specialized member (i.e. it is a nested
            type of a generic type instance), then the unspecialized member refers to a member from the unspecialized containing type. (I.e. the unspecialized member always
            corresponds to a definition that is not obtained via specialization.)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference">
            <summary>
            A modified reference to a type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.#ctor">
            <summary>
            A modified reference to a type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.Copy(Microsoft.Cci.IModifiedTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="modifiedTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IModifiedTypeReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.CustomModifiers">
            <summary>
            Returns the list of custom modifiers associated with the type reference. Evaluate this property only if IsModified is true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.ResolvedType">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModifiedTypeReference.UnmodifiedType">
            <summary>
            An unmodified type reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.VectorTypeReference">
            <summary>
            A reference to a zero based single dimensional array type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.VectorTypeReference.#ctor">
            <summary>
            A reference to a zero based single dimensional array type. Type references can be initialized incrementally, but once a reference is frozen, or resolved
            or once the InternedKey of a reference has been computed, no further initialization is permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.VectorTypeReference.Copy(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Makes this reference be a shallow copy of the given type reference.
            </summary>
            <param name="vectorTypeReference">The type referenced to shallow copy onto this reference.</param>
            <param name="internFactory">
            A collection of methods that associate unique integers with metadata model entities.
            The association is based on the identities of the entities and the factory does not retain
            references to the given metadata model objects.   
            </param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.VectorTypeReference.Resolve">
            <summary>
            Returns the type of the resolved array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.VectorTypeReference.IsVector">
            <summary>
            This type of array is a single dimensional array with zero lower bound for index values.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Assembly">
            <summary>
            Represents a .NET assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Module">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.Unit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.UnitReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitReference.Copy(Microsoft.Cci.IUnitReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="unitReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference. The dispatch method does nothing else.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.UnitReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IReference, which is not derived from IDefinition. For example an object implemeting IArrayType will
            call visitor.Visit(IArrayTypeReference) and not visitor.Visit(IArrayType).
            The dispatch method does nothing else.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MutableCodeModel.UnitReference.isFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.IsFrozen">
            <summary>
            True if the reference has been frozen and can no longer be modified. A reference becomes frozen
            as soon as it is resolved or interned. An unfrozen reference can also explicitly be set to be frozen.
            It is recommended that any code constructing a type reference freezes it immediately after construction is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.Name">
            <summary>
            The name of the referenced unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.UnitReference.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Unit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Unit.Copy(Microsoft.Cci.IUnit,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="unit"></param>
            <param name="internFactory"></param>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.ContractAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly corresponding to the target platform contract assembly at the time this unit was compiled.
            This property will be used to implement IMetadataHost.ContractAssemblySymbolicIdentity and its implementation must
            consequently not use the latter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.CoreAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly corresponding to the target platform core assembly at the time this unit was compiled.
            This property will be used to implement IMetadataHost.CoreAssemblySymbolicIdentity and its implementation must
            consequently not use the latter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.Location">
            <summary>
            An indication of the location where the unit is or will be stored. This need not be a file system path and may be empty.
            The interpretation depends on the ICompilationHostEnviroment instance used to resolve references to this unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.UninterpretedSections">
            <summary>
            A sequence of PE sections that are not well known to PE readers and thus have not been decompiled into 
            other parts of the Metadata Model. These sections may have meaning to other tools. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.PlatformType">
            <summary>
            A collection of well known types that must be part of every target platform and that are fundamental to modeling compiled code.
            The types are obtained by querying the unit set of the compilation and thus can include types that are defined by the compilation itself.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.UnitNamespaceRoot">
            <summary>
            A root namespace that contains nested namespaces as well as top level types and anything else that implements INamespaceMember.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.UnitReferences">
            <summary>
            A list of other units that are referenced by this unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Unit.NamespaceRoot">
            <summary>
            The associated root namespace.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Module.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Module.Copy(Microsoft.Cci.IModule,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Module.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IModule).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Module.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IModuleReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.AllTypes">
            <summary>
            Gets or sets all types.
            </summary>
            <value>All types.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.AssemblyReferences">
            <summary>
            A list of the assemblies that are referenced by this module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.BaseAddress">
            <summary>
            The preferred memory address at which the module is to be loaded at runtime.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ContainingAssembly">
            <summary>
            The Assembly that contains this module. If this module is main module then this returns this.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.DebugInformationLocation">
            <summary>
            A path to the debug information corresponding to this module. Can be absolute or relative to the file path of the module. Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.DebugInformationVersion">
            <summary>
            A hexadecimal string that is used to store and retrieve the debugging symbols from a symbol store.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.DllCharacteristics">
            <summary>
            Flags that control the behavior of the target operating system. CLI implementations are supposed to ignore this, but some operating system pay attention.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.EntryPoint">
            <summary>
            The method that will be called to start execution of this executable module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.FileAlignment">
            <summary>
            The alignment of sections in the module's image file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ILOnly">
            <summary>
            True if the module contains only IL and is processor independent.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.StrongNameSigned">
            <summary>
            True if the module contains a hash of its contents, encrypted with the private key of an assembly strong name.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.NativeEntryPoint">
            <summary>
            True if the module has a native entry point.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Kind">
            <summary>
            The kind of metadata stored in this module. For example whether this module is an executable or a manifest resource file.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.LinkerMajorVersion">
            <summary>
            The first part of a two part version number indicating the version of the linker that produced this module. For example, the 8 in 8.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.LinkerMinorVersion">
            <summary>
            The first part of a two part version number indicating the version of the linker that produced this module. For example, the 0 in 8.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Location">
            <summary>
            An indication of the location where the assembly is or will be stored. This need not be a file system path and may be empty.
            The interpretation depends on the ICompilationHostEnviroment instance used to resolve references to this unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.MetadataFormatMajorVersion">
            <summary>
            The first part of a two part version number indicating the version of the format used to persist this module. For example, the 1 in 1.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.MetadataFormatMinorVersion">
            <summary>
            The second part of a two part version number indicating the version of the format used to persist this module. For example, the 0 in 1.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ModuleAttributes">
            <summary>
            A list of objects representing persisted instances of types that extend System.Attribute. Provides an extensible way to associate metadata
            with this module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ModuleName">
            <summary>
            The name of the module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ModuleReferences">
            <summary>
            A list of the modules that are referenced by this module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Name">
            <summary>
            The name of the module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.PersistentIdentifier">
            <summary>
            A globally unique persistent identifier for this module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Machine">
            <summary>
            Specifies the target CPU. 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.RequiresAmdInstructionSet">
            <summary>
            If set, the module contains instructions or assumptions that are specific to the AMD 64 bit instruction set. Setting this flag to
            true also sets Requires64bits to true.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.RequiresStartupStub">
            <summary>
            If set, the module must include a machine code stub that transfers control to the virtual execution system.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Requires32bits">
            <summary>
            If set, the module contains instructions that assume a 32 bit instruction set. For example it may depend on an address being 32 bits.
            This may be true even if the module contains only IL instructions because of PlatformInvoke and COM interop.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Requires64bits">
            <summary>
            If set, the module contains instructions that assume a 64 bit instruction set. For example it may depend on an address being 64 bits.
            This may be true even if the module contains only IL instructions because of PlatformInvoke and COM interop.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SizeOfHeapCommit">
            <summary>
            The size of the virtual memory initially committed for the initial process heap.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SizeOfHeapReserve">
            <summary>
            The size of the virtual memory to reserve for the initial process heap.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SizeOfStackCommit">
            <summary>
            The size of the virtual memory initially committed for the initial thread's stack.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SizeOfStackReserve">
            <summary>
            The size of the virtual memory to reserve for the initial thread's stack.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Strings">
            <summary>
            Gets or sets the strings.
            </summary>
            <value>The strings.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SubsystemMajorVersion">
            <summary>
            The first part of a two part version number indicating the operating subsystem that is expected to be the target environment for this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.SubsystemMinorVersion">
            <summary>
            The second part of a two part version number indicating the operating subsystem that is expected to be the target environment for this module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.TargetRuntimeVersion">
            <summary>
            Identifies the version of the CLR that is required to load this module or assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.TrackDebugData">
            <summary>
            True if the instructions in this module must be compiled in such a way that the debugging experience is not compromised.
            To set the value of this property, add an instance of System.Diagnostics.DebuggableAttribute to the MetadataAttributes list.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.TypeReferences">
            <summary>
            Zero or more type references used in the module. May be null. If the module is produced by reading in a CLR PE file, then this will be the contents
            of the type reference table. If the module is produced some other way, the method may return an empty enumeration or an enumeration that is a
            subset of the type references actually used in the module. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.TypeMemberReferences">
            <summary>
            Returns zero or more type member references used in the module. May be null. If the module is produced by reading in a CLR PE file, then this will be the contents
            of the member reference table (which only contains entries for fields and methods). If the module is produced some other way, 
            the method may return an empty enumeration or an enumeration that is a subset of the member references actually used in the module. 
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.UnitReferences">
            <summary>
            A list of other units that are referenced by this unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.UsePublicKeyTokensForAssemblyReferences">
            <summary>
            True if the module will be persisted with a list of assembly references that include only tokens derived from the public keys
            of the referenced assemblies, rather than with references that include the full public keys of referenced assemblies as well
            as hashes over the contents of the referenced assemblies. Setting this property to true is appropriate during development.
            When building for deployment it is safer to set this property to false.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.Win32Resources">
            <summary>
            A list of named byte sequences persisted with the module and used during execution, typically via the Win32 API.
            A module will define Win32 resources rather than "managed" resources mainly to present metadata to legacy tools
            and not typically use the data in its own code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ModuleIdentity">
            <summary>
            The identity of the referenced module.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ResolvedModule">
            <summary>
            The referenced module, or Dummy.Module if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Module.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Assembly.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Assembly.Copy(Microsoft.Cci.IAssembly,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Assembly.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IAssembly).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.Assembly.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IAssemblyReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.AssemblyAttributes">
            <summary>
            A list of objects representing persisted instances of types that extend System.Attribute. Provides an extensible way to associate metadata
            with this assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ContainingAssembly">
            <summary>
            The Assembly that contains this module. If this module is main module then this returns this.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Culture">
            <summary>
            Identifies the culture associated with the assembly. Typically specified for sattelite assemblies with localized resources.
            Empty if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ExportedTypes">
            <summary>
            Public types defined in other modules making up this assembly and to which other assemblies may refer to via this assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Flags">
            <summary>
            A set of bits and bit ranges representing properties of the assembly. The value of <see cref="P:Microsoft.Cci.MutableCodeModel.Assembly.Flags"/> can be set
            from source code via the AssemblyFlags assembly custom attribute. The interpretation of the property depends on the target platform.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Files">
            <summary>
            A list of the files that constitute the assembly. These are not the source language files that may have been
            used to compile the assembly, but the files that contain constituent modules of a multi-module assembly as well
            as any external resources. It corresonds to the File table of the .NET assembly file format.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.IsRetargetable">
            <summary>
            True if the implementation of the referenced assembly used at runtime is not expected to match the version seen at compile time.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ContainsForeignTypes">
            <summary>
            True if the referenced assembly contains types that describe objects that are neither COM objects nor objects that are managed by the CLR.
            Instances of such types are created and managed by another runtime and are accessed by CLR objects via some form of interoperation mechanism.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Location">
            <summary>
            An indication of the location where the assembly is or will be stored. This need not be a file system path and may be empty.
            The interpretation depends on the ICompilationHostEnviroment instance used to resolve references to this unit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.MemberModules">
            <summary>
            A list of the modules that constitute the assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ModuleName">
            <summary>
            The name of the module containing the assembly manifest. This can be different from the name of the assembly itself.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ModuleIdentity">
            <summary>
            Gets the module identity.
            </summary>
            <value>The module identity.</value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Name">
            <summary>
            The name of the assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.PublicKey">
            <summary>
            The public part of the key used to encrypt the SHA1 hash over the persisted form of this assembly. Null if not specified.
            This value is used by the loader to decrypt HashValue which it then compares with a freshly computed hash value to verify the
            integrity of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Resources">
            <summary>
            A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.SecurityAttributes">
            <summary>
            A list of objects representing persisted instances of pairs of security actions and sets of security permissions.
            These apply by default to every method reachable from the module.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.AssemblyIdentity">
            <summary>
            The identity of the referenced assembly.
            </summary>
            <value></value>
            <remarks>The location might be empty.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.UnifiedAssemblyIdentity">
            <summary>
            Returns the identity of the assembly reference to which this assembly reference has been unified.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.Aliases">
            <summary>
            A list of aliases for the root namespace of the referenced assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.ResolvedAssembly">
            <summary>
            The referenced assembly, or Dummy.Assembly if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.HashValue">
            <summary>
            The encrypted SHA1 hash of the persisted form of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.Assembly.PublicKeyToken">
            <summary>
            The hashed 8 bytes of the public key of the referenced assembly. This is empty if the referenced assembly does not have a public key.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.AssemblyReference">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MutableCodeModel.ModuleReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModuleReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModuleReference.Copy(Microsoft.Cci.IModuleReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="moduleReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModuleReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls vistor.Visit(IModuleReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.ModuleReference.Resolve">
            <summary>
            Tries to resolves the reference with the aid of this.Host. If resolution fails, the result is Dummy.Module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.ContainingAssembly">
            <summary>
            The Assembly that contains this module. May be null if the module is not part of an assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.Host">
            <summary>
            An object representing the application that is hosting the object model that this reference forms a part of.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.ModuleIdentity">
            <summary>
            The identity of the referenced module.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.ReferringUnit">
            <summary>
            The unit that is the root of a graph that contains this reference instance. This is not the same as ContainingAssembly, which
            is a reference to the assembly that contains the module which is referenced by this instance. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.ResolvedModule">
            <summary>
            The referenced module, or Dummy.Module if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.ModuleReference.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AssemblyReference.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AssemblyReference.Copy(Microsoft.Cci.IAssemblyReference,Microsoft.Cci.IInternFactory)">
            <summary>
            
            </summary>
            <param name="assemblyReference"></param>
            <param name="internFactory"></param>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AssemblyReference.DispatchAsReference(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls vistor.Visit(IAssemblyReference).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MutableCodeModel.AssemblyReference.Resolve">
            <summary>
            Tries to resolves the reference with the aid of this.Host. If resolution fails, the result is Dummy.Module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.Aliases">
            <summary>
            A list of aliases for the root namespace of the referenced assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.ResolvedAssembly">
            <summary>
            The referenced assembly, or Dummy.Assembly if the reference cannot be resolved.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.Culture">
            <summary>
            Identifies the culture associated with the assembly reference. Typically specified for sattelite assemblies with localized resources.
            Empty if not specified.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.IsRetargetable">
            <summary>
            True if the implementation of the referenced assembly used at runtime is not expected to match the version seen at compile time.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.ContainsForeignTypes">
            <summary>
            True if the referenced assembly contains types that describe objects that are neither COM objects nor objects that are managed by the CLR.
            Instances of such types are created and managed by another runtime and are accessed by CLR objects via some form of interoperation mechanism.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.HashValue">
            <summary>
            The encrypted SHA1 hash of the persisted form of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.PublicKey">
            <summary>
            The public part of the key used to encrypt the SHA1 hash over the persisted form of the referenced assembly. Null if not specified.
            This value is used by the loader to decrypt HashValue which it then compares with a freshly computed hash value to verify the
            integrity of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.PublicKeyToken">
            <summary>
            The hashed 8 bytes of the public key of the referenced assembly. This is empty if the referenced assembly does not have a public key.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.Version">
            <summary>
            The version of the assembly reference.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.Location">
            <summary>
            The location of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.AssemblyIdentity">
            <summary>
            The identity of the referenced assembly. Has the same Culture, Name, PublicKeyToken and Version as the reference.
            </summary>
            <value></value>
            <remarks>Also has a location, which may might be empty. Although mostly redundant, the object returned by this
            property is useful because it derives from System.Object and therefore can be used as a hash table key. It may be more efficient
            to use the properties defined directly on the reference, since the object returned by this property may be allocated lazily
            and the allocation can thus be avoided by using the reference's properties.</remarks>
        </member>
        <member name="P:Microsoft.Cci.MutableCodeModel.AssemblyReference.UnifiedAssemblyIdentity">
            <summary>
            Returns the identity of the assembly reference to which this assembly reference has been unified.
            </summary>
            <value></value>
            <remarks>The location might not be set.</remarks>
        </member>
    </members>
</doc>
