<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.NewILToCodeModel</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Cci.ILToCodeModel.AnonymousDelegateInserter.GenericArgumentsDoNotMatchGenericParameters(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
            <summary>
            A compiler method that was generated from the body of an anonymous delegate inside a generic method will itself be generic and will be instantiated with the
            generic parameters of the generic method. Return false if this is not the case, so that the caller knows that it is not dealing with an anonymous method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.DecompilerOptions">
            <summary>
            Options that are used to control how much decompilation happens.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.None">
            <summary>
            Default value: all flags are false.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.AnonymousDelegates">
            <summary>
            True if display classes should be decompiled into anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.Iterators">
            <summary>
            True if iterator classes should be decompiled into iterator methods.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompilerOptions.Loops">
            <summary>
            True if loop structures should be decompiled into high-level loops (for-statements, while-statements, etc.)
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.Decompiler">
            <summary>
            Provides methods that convert a given Metadata Model into an equivalent Code Model. 
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IAssembly,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Returns a mutable Code Model assembly that is equivalent to the given Metadata Model assembly,
            except that in the new assembly method bodies also implement ISourceMethodBody.
            </summary>
            <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="assembly">The root of the Metadata Model to be converted to a Code Model.</param>
            <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IModule,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Returns a mutable Code Model module that is equivalent to the given Metadata Model module,
            except that in the new module method bodies also implement ISourceMethodBody.
            </summary>
            <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="module">The root of the Metadata Model to be converted to a Code Model.</param>
            <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModel(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodBody,Microsoft.Cci.PdbReader,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Returns a (mutable) Code Model SourceMethod body that is equivalent to the given Metadata Model method body.
            It does *not* delete any helper types.
            </summary>
            <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="methodBody">The Metadata Model method body that is to be decompiled.</param>
            <param name="pdbReader">An object that can map offsets in an IL stream to source locations and block scopes. May be null.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.GetCodeModelFromMetadataModelHelper(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IModule,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Returns a mutable Code Model module that is equivalent to the given Metadata Model module,
            except that in the new module method bodies also implement ISourceMethodBody.
            </summary>
            <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="module">The root of the Metadata Model to be converted to a Code Model.</param>
            <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
            <param name="localScopeProvider">An object that can provide information about the local scopes of a method. May be null.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider">
            <summary>
            An object that can provide information about the local scopes of a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.#ctor(Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            An object that can provide information about the local scopes of a method.
            </summary>
            <param name="originalLocalScopeProvider">The local scope provider to use for methods that have not been decompiled.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetIteratorScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes, each defining an IL range in which an iterator local is defined.
            The scopes are returned by the MoveNext method of the object returned by the iterator method.
            The index of the scope corresponds to the index of the local. Specifically local scope i corresponds
            to the local stored in field &lt;localName&gt;x_i of the class used to store the local values in between
            calls to MoveNext.
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetLocalScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more local (block) scopes into which the CLR IL operations in the given method body is organized.
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetNamespaceScopes(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetConstantsInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local constant definitions that are local to the given scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.GetVariablesInScope(Microsoft.Cci.ILocalScope)">
            <summary>
            Returns zero or more local variable definitions that are local to the given scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.Decompiler.LocalScopeProvider.IsIterator(Microsoft.Cci.IMethodBody)">
            <summary>
            Returns true if the method body is an iterator.
            </summary>
            <param name="methodBody"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies">
            <summary>
            A mutator that copies metadata models into mutable code models by using the base MetadataMutator class to make a mutable copy
            of a given metadata model and also replaces any method bodies with instances of SourceMethodBody, which implements the ISourceMethodBody.Block property
            by decompiling the metadata model information provided by the properties of IMethodBody.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.localScopeProvider">
            <summary>
            An object that can provide information about the local scopes of a method. May be null. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.sourceLocationProvider">
            <summary>
            An object that can map offsets in an IL stream to source locations and block scopes. May be null.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.host">
            <summary>
            An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.options">
            <summary>
            Decompiler options needed at the point that new source method bodies are created for each method definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Allocates a mutator that copies metadata models into mutable code models by using the base MetadataMutator class to make a mutable copy
            of a given metadata model and also replaces any method bodies with instances of SourceMethodBody, which implements the ISourceMethodBody.Block property
            by decompiling the metadata model information provided by the properties of IMethodBody.
            </summary>
            <param name="host">An object representing the application that is hosting this mutator. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
            <param name="localScopeProvider">An object that can provide information about the local scopes of a method. May be null.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.ReplaceMetadataMethodBodiesWithDecompiledMethodBodies.TraverseChildren(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Replaces the body of the given method with an equivalent instance of SourceMethod body, which in addition also implements ISourceMethodBody,
            which has the additional property, Block, which represents the corresponding Code Model for the method body.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.HelperTypeFinder">
            <summary>
            A traverser that visits every method body and collects together all of the private helper types of these bodies.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperTypes">
            <summary>
            Contains an entry for every type that has been introduced by the compiler to hold the state of an anonymous delegate or of an iterator.
            Since decompilation re-introduces the anonymous delegates and iterators, these types should be removed from member lists.
            They stick around as PrivateHelperTypes of the methods containing the iterators and anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperMethods">
            <summary>
            Contains an entry for every method that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.helperFields">
            <summary>
            Contains an entry for every field that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.host">
            <summary>
            An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.sourceLocationProvider">
            <summary>
            An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider)">
            <summary>
            A traverser that visits every method body and collects together all of the private helper types of these bodies.
            </summary>
            <param name="host">An object representing the application that is hosting this decompiler. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IModule)">
            <summary>
            Traverses only the namespace root of the given assembly, removing any type from the model that have the same
            interned key as one of the entries of this.typesToRemove.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Traverses only the nested types and methods and collects together all of the private helper types that are introduced by the compiler
            when methods that contain closures or iterators are compiled.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Traverses only the (possibly missing) body of the method.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.HelperTypeFinder.TraverseChildren(Microsoft.Cci.IMethodBody)">
            <summary>
            Records all of the helper types of the method body into this.helperTypes.
            </summary>
            <param name="methodBody"></param>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes">
            <summary>
            A traverser for a mutable code model that removes a specified set of types from the model.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperTypes">
            <summary>
            Contains an entry for every type that has been introduced by the compiler to hold the state of an anonymous delegate or of an iterator.
            Since decompilation re-introduces the anonymous delegates and iterators, these types should be removed from member lists.
            They stick around as PrivateHelperTypes of the methods containing the iterators and anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperMethods">
            <summary>
            Contains an entry for every method that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.helperFields">
            <summary>
            Contains an entry for every field that has been introduced by the compiler in order to implement anonymous delegates.
            Since decompilation re-introduces the anonymous delegates and iterators, these members should be removed from member lists.
            They stick around as PrivateHelperMembers of the methods containing the anonymous delegates.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.#ctor(System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Cci.ITypeDefinition},System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Cci.IMethodDefinition},System.Collections.Generic.Dictionary{Microsoft.Cci.IFieldDefinition,Microsoft.Cci.IFieldDefinition})">
            <summary>
            Allocates a traverser for a mutable code model that removes a specified set of types from the model.
            </summary>
            <param name="helperTypes">A dictionary whose keys are the interned keys of the types to remove from member lists.</param>
            <param name="helperMethods">A dictionary whose keys are the interned keys of the methods to remove from member lists.</param>
            <param name="helperFields">A dictionary whose keys are the interned keys of the methods to remove from member lists.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.TraverseChildren(Microsoft.Cci.IModule)">
            <summary>
            Traverses only the namespace root of the given assembly, removing any type from the model that have the same
            interned key as one of the entries of this.typesToRemove.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.RemoveUnnecessaryTypes.TraverseChildren(Microsoft.Cci.INamedTypeDefinition)">
            <summary>
            Traverses the specified type definition, removing any nested types that are compiler introduced private helper types
            for maintaining the state of closures and anonymous delegates.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.DecompiledBlock">
            <summary>
            A delimited collection of statements to execute in a new (nested) scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.DecompiledBlock.#ctor(System.UInt32,System.UInt32,Microsoft.Cci.UtilityDataStructures.Sublist{Microsoft.Cci.Analysis.BasicBlock{Microsoft.Cci.Analysis.Instruction}},System.Boolean)">
            <summary>
            A delimited collection of statements to execute in a new (nested) scope.
            </summary>
            <param name="startOffset">The IL offset of the first statement in the block.</param>
            <param name="endOffset">The IL offset of the first statement following the block.</param>
            <param name="containedBlocks">A list of basic blocks that are contained inside this source block.</param>
            <param name="isLexicalScope">If false, the block is a helper block for the decompilation process and it should be removed during final cleanup.</param>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.StartOffset">
            <summary>
            The IL offset of the first statement in the block.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.EndOffset">
            <summary>
            The IL offset of the first statement following the block. 
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.IsLexicalScope">
            <summary>
            If false, the block is a helper block for the decompilation process and it should be removed during final cleanup.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ILToCodeModel.DecompiledBlock.ContainedBlocks">
            <summary>
            A list of basic blocks that are contained inside this source block.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ILToCodeModel.CompilationArtifactRemover.GetTypeFromHandle">
            <summary>
            A reference to System.Type.GetTypeFromHandle(System.Runtime.TypeHandle).
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ILToCodeModel.SourceMethodBody">
            <summary>
            A metadata (IL) representation along with a source level representation of the body of a method or of a property/event accessor.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.#ctor(Microsoft.Cci.IMethodBody,Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider,Microsoft.Cci.ILToCodeModel.DecompilerOptions)">
            <summary>
            Allocates a metadata (IL) representation along with a source level representation of the body of a method or of a property/event accessor.
            </summary>
            <param name="ilMethodBody">A method body whose IL operations should be decompiled into a block of statements that will be the
            result of the Block property of the resulting source method body.</param>
            <param name="host">An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="sourceLocationProvider">An object that can map some kinds of ILocation objects to IPrimarySourceLocation objects. May be null.</param>
            <param name="localScopeProvider">An object that can provide information about the local scopes of a method.</param>
            <param name="options">Set of options that control decompilation.</param>
        </member>
        <member name="M:Microsoft.Cci.ILToCodeModel.SourceMethodBody.GetBlock">
            <summary>
            Decompile the IL operations of this method body into a block of statements.
            </summary>
        </member>
    </members>
</doc>
